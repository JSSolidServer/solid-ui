{"version":3,"file":"table.js","names":["UI","icons","log","ns","utils","widgets","renderTableViewPane","doc","options","sourceDocument","tableClass","givenQuery","query","RDFS_LITERAL","kb","store","rowsLookup","FORBIDDEN_COLUMNS","XSD_NUMBER_TYPES","XSD_DATE_TYPES","IMAGE_TYPES","keyVariable","subjectIdCounter","allType","types","typeSelectorDiv","addColumnDiv","lastQuery","mostCommonType","resultDiv","createElement","className","appendChild","generateControlBar","tableDiv","refresh","runQuery","table","logicalRows","columns","renderTableForQuery","s","calculateTable","generateTypeSelector","getMostCommonType","buildFilteredTable","result","setAttribute","tr","addSelectToQuery","type","selectedColumns","getColumns","i","length","variable","vars","push","setVariable","addWhereToQuery","rowVar","queryType","pat","add","rdf","addColumnsToQuery","column","formula","predicate","getVariable","optional","generateQuery","Query","slice","clearElement","generateColumnAddDropdown","updateTable","running","htmlTable","element","childNodes","removeChild","SubjectType","allColumns","useCount","getAllColumns","getUnusedColumns","indexOf","addColumn","removeColumn","filter","x","getLabel","label","addUse","Column","checkedAnyValues","possiblyLiteral","possiblyNumber","constraints","checkValue","term","termType","literalValue","value","match","getKey","toString","getHints","hints","toNT","sameTerm","superClass","setPredicate","inverse","other","concat","each","rdfs","alternatives","undefined","getConstraints","filterFunction","sortKey","toLowerCase","isImageColumn","uri","objectToArray","obj","property","optionElement","createTextNode","dropdown","addEventListener","typeSelectorChanged","selectedType","unusedColumns","sort","a","b","aLabel","bLabel","columnIndex","Number","getColumnForVariable","variableNT","predicateUri","Error","getColumnForPredicate","getTypeForObject","subjectType","discoverTypes","subjectList","statementsMatching","subjects","object","typeObj","subject","getSubjectProperties","properties","j","identifyColumnsForType","allColumnsList","sortColumns","typeUrl","sortFunction","renderColumnDeleteButton","button","renderTableHeader","linkTd","th","applyColumnSort","rows","reverse","columnKey","row1","row2","row1Value","row2Value","values","parentTable","_htmlRow","parentNode","applyColumnFiltersToRow","row","rowDisplayed","c","columnValue","htmlRow","style","display","applyColumnFilters","r","literalSort","literalToString","colValue","literalCompare","value1","value2","strValue1","strValue2","renderLiteralSelector","textBox","width","sort1","sort2","substring","renderEnumSelector","list","doMultiple","searchValue","initialSelection","ele","selected","opt","option","index","renderNumberSelector","minSelector","maxSelector","min","max","eventListener","fallbackRenderTableSelector","renderTableSelector","cs","range","choices","owl","elements","renderTableSelectors","td","selector","linkTo","linkText","linkFunction","openHrefInOutlineMode","e","preventDefault","stopPropagation","target","getTarget","getAttribute","debug","linkToObject","renderImage","height","renderValue","cellFormat","shortDate","datatype","span","textContent","forEach","lastChild","renderTableRowInto","_downstream","_subject","orig","objects","different","originalValues","background","valueInList","key","updateRow","needUpdate","getSubjectId","_subject_id","startTime","Date","now","progressMessage","original","onResult","rowKey","rowKeyId","onDone","elapsedTimeMS","splice","sortBy","sortReverse","inferColumnsFromFormula","statements","statement","inferColumns","queryVar","bestCount","best","typeUri"],"sources":["../src/table.js"],"sourcesContent":["// Table Widget: Format an array of RDF statements as an HTML table.\n//\n// This can operate in one of three modes: when the class of object is given\n// or when the source document from whuch data is taken is given,\n// or if a prepared query object is given.\n// (In principle it could operate with neither class nor document\n// given but typically\n// there would be too much data.)\n// When the tableClass is not given, it looks for common  classes in the data,\n// and gives the user the option.\n//\n// 2008 Written, Ilaria Liccardi  as the tableViewPane.js\n// 2014 Core table widget moved into common/table.js - timbl\n//\n\nimport * as debug from './debug'\nimport { icons } from './iconBase'\nimport { store } from 'solid-logic'\nimport * as log from './log'\nimport * as ns from './ns'\nimport * as rdf from 'rdflib' // pull in first avoid cross-refs\nimport * as utils from './utils'\nimport * as widgets from './widgets'\n\nconst UI = { icons, log, ns, utils, widgets }\n\n// UI.widgets.renderTableViewPane\nexport function renderTableViewPane (doc, options) {\n  const sourceDocument = options.sourceDocument\n  const tableClass = options.tableClass\n  const givenQuery = options.query\n\n  const RDFS_LITERAL = 'http://www.w3.org/2000/01/rdf-schema#Literal'\n  const ns = UI.ns\n  const kb = store\n  const rowsLookup = {} //  Persistent mapping of subject URI to dom TR\n\n  // Predicates that are never made into columns:\n\n  const FORBIDDEN_COLUMNS = {\n    'http://www.w3.org/2002/07/owl#sameAs': true,\n    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': true\n  }\n\n  // Number types defined in the XML schema:\n\n  const XSD_NUMBER_TYPES = {\n    'http://www.w3.org/2001/XMLSchema#decimal': true,\n    'http://www.w3.org/2001/XMLSchema#float': true,\n    'http://www.w3.org/2001/XMLSchema#double': true,\n    'http://www.w3.org/2001/XMLSchema#integer': true,\n    'http://www.w3.org/2001/XMLSchema#nonNegativeInteger': true,\n    'http://www.w3.org/2001/XMLSchema#positiveInteger': true,\n    'http://www.w3.org/2001/XMLSchema#nonPositiveInteger': true,\n    'http://www.w3.org/2001/XMLSchema#negativeInteger': true,\n    'http://www.w3.org/2001/XMLSchema#long': true,\n    'http://www.w3.org/2001/XMLSchema#int': true,\n    'http://www.w3.org/2001/XMLSchema#short': true,\n    'http://www.w3.org/2001/XMLSchema#byte': true,\n    'http://www.w3.org/2001/XMLSchema#unsignedLong': true,\n    'http://www.w3.org/2001/XMLSchema#unsignedInt': true,\n    'http://www.w3.org/2001/XMLSchema#unsignedShort': true,\n    'http://www.w3.org/2001/XMLSchema#unsignedByte': true\n  }\n\n  const XSD_DATE_TYPES = {\n    'http://www.w3.org/2001/XMLSchema#dateTime': true,\n    'http://www.w3.org/2001/XMLSchema#date': true\n  }\n\n  // Classes that indicate an image:\n\n  const IMAGE_TYPES = {\n    'http://xmlns.com/foaf/0.1/Image': true,\n    'http://purl.org/dc/terms/Image': true\n  }\n\n  // Name of the column used as a \"key\" value to look up the row.\n  // This is necessary because in the normal view, the columns are\n  // all \"optional\" values, meaning that we will get a result set\n  // for every individual value that is found.  The row key acts\n  // as an anchor that can be used to combine this information\n  // back into the same row.\n\n  const keyVariable = options.keyVariable || '?_row'\n\n  let subjectIdCounter = 0\n  let allType, types\n  let typeSelectorDiv, addColumnDiv\n\n  // The last SPARQL query used:\n  let lastQuery = null\n  let mostCommonType = null\n\n  const resultDiv = doc.createElement('div')\n  resultDiv.className = 'tableViewPane'\n\n  resultDiv.appendChild(generateControlBar()) // sets typeSelectorDiv\n\n  const tableDiv = doc.createElement('div')\n  resultDiv.appendChild(tableDiv)\n\n  // Save a refresh function for use by caller\n  resultDiv.refresh = function () {\n    runQuery(table.query, table.logicalRows, table.columns, table)\n    // updateTable(givenQuery, mostCommonType) // This could be a lot more incremental and efficient\n  }\n\n  // A specifically asked-for query\n  let table\n  if (givenQuery) {\n    table = renderTableForQuery(givenQuery)\n    // lastQuery = givenQuery\n    tableDiv.appendChild(table)\n  } else {\n    // Find the most common type and select it by default\n\n    const s = calculateTable()\n    allType = s[0]\n    types = s[1]\n    if (!tableClass) {\n      typeSelectorDiv.appendChild(generateTypeSelector(allType, types))\n    }\n\n    mostCommonType = getMostCommonType(types)\n\n    if (mostCommonType) {\n      buildFilteredTable(mostCommonType)\n    } else {\n      buildFilteredTable(allType)\n    }\n  }\n  return resultDiv\n\n  // /////////////////////////////////////////////////////////////////\n  /*\n  function closeDialog (dialog) {\n    dialog.parentNode.removeChild(dialog)\n  }\n\n  function createActionButton (label, callback) {\n    var button = doc.createElement('input')\n    button.setAttribute('type', 'submit')\n    button.setAttribute('value', label)\n    button.addEventListener('click', callback, false)\n    return button\n  }\n// @@ Tdo:  put these  buttonsback in,\n// to allow user to see and edit and save the sparql query for the table they are looking at\n//\n\n  function createSparqlWindow () {\n    var dialog = doc.createElement('div')\n\n    dialog.setAttribute('class', 'sparqlDialog')\n\n    var title = doc.createElement('h3')\n    title.appendChild(doc.createTextNode('Edit SPARQL query'))\n\n    var inputbox = doc.createElement('textarea')\n    inputbox.value = rdf.queryToSPARQL(lastQuery)\n\n    dialog.appendChild(title)\n    dialog.appendChild(inputbox)\n\n    dialog.appendChild(createActionButton('Query', function () {\n      var query = rdf.SPARQLToQuery(inputbox.value)\n      updateTable(query)\n      closeDialog(dialog)\n    }))\n\n    dialog.appendChild(createActionButton('Close', function () {\n      closeDialog(dialog)\n    }))\n\n    return dialog\n  }\n\n  function sparqlButtonPressed () {\n    var dialog = createSparqlWindow()\n\n    resultDiv.appendChild(dialog)\n  }\n\n  function generateSparqlButton () {\n    var image = doc.createElement('img')\n    image.setAttribute('class', 'sparqlButton')\n    image.setAttribute('src', UI.iconBase + 'icons/1pt5a.gif')\n    image.setAttribute('alt', 'Edit SPARQL query')\n\n    image.addEventListener('click', sparqlButtonPressed, false)\n\n    return image\n  }\n*/\n  // Generate the control bar displayed at the top of the screen.\n\n  function generateControlBar () {\n    const result = doc.createElement('table')\n    result.setAttribute('class', 'toolbar')\n\n    const tr = doc.createElement('tr')\n\n    /*             @@    Add in later -- not debugged yet\n            var sparqlButtonDiv = doc.createElement(\"td\")\n            sparqlButtonDiv.appendChild(generateSparqlButton())\n            tr.appendChild(sparqlButtonDiv)\n    */\n    typeSelectorDiv = doc.createElement('td')\n    tr.appendChild(typeSelectorDiv)\n\n    addColumnDiv = doc.createElement('td')\n    tr.appendChild(addColumnDiv)\n\n    result.appendChild(tr)\n\n    return result\n  }\n\n  // Add the SELECT details to the query being built.\n\n  function addSelectToQuery (query, type) {\n    const selectedColumns = type.getColumns()\n\n    for (let i = 0; i < selectedColumns.length; ++i) {\n      // TODO: autogenerate nicer names for variables\n      // variables have to be unambiguous\n\n      const variable = kb.variable('_col' + i)\n\n      query.vars.push(variable)\n      selectedColumns[i].setVariable(variable)\n    }\n  }\n\n  // Add WHERE details to the query being built.\n\n  function addWhereToQuery (query, rowVar, type) {\n    let queryType = type.type\n\n    if (!queryType) {\n      queryType = kb.variable('_any')\n    }\n\n    // _row a type\n    query.pat.add(rowVar, UI.ns.rdf('type'), queryType)\n  }\n\n  // Generate OPTIONAL column selectors.\n\n  function addColumnsToQuery (query, rowVar, type) {\n    const selectedColumns = type.getColumns()\n\n    for (let i = 0; i < selectedColumns.length; ++i) {\n      const column = selectedColumns[i]\n\n      const formula = kb.formula()\n\n      formula.add(rowVar, column.predicate, column.getVariable())\n\n      query.pat.optional.push(formula)\n    }\n  }\n\n  // Generate a query object from the currently-selected type\n  // object.\n\n  function generateQuery (type) {\n    const query = new rdf.Query()\n    const rowVar = kb.variable(keyVariable.slice(1)) // don't pass '?'\n\n    addSelectToQuery(query, type)\n    addWhereToQuery(query, rowVar, type)\n    addColumnsToQuery(query, rowVar, type)\n\n    return query\n  }\n\n  // Build the contents of the tableDiv element, filtered according\n  // to the specified type.\n\n  function buildFilteredTable (type) {\n    // Generate \"add column\" cell.\n\n    clearElement(addColumnDiv)\n    addColumnDiv.appendChild(generateColumnAddDropdown(type))\n\n    const query = generateQuery(type)\n\n    updateTable(query, type)\n  }\n\n  function updateTable (query, type) {\n    // Stop the previous query from doing any updates.\n\n    if (lastQuery) {\n      lastQuery.running = false\n    }\n\n    // Render the HTML table.\n\n    const htmlTable = renderTableForQuery(query, type)\n\n    // Clear the tableDiv element, and replace with the new table.\n\n    clearElement(tableDiv)\n    tableDiv.appendChild(htmlTable)\n\n    // Save the query for the edit dialog.\n\n    lastQuery = query\n  }\n\n  // Remove all subelements of the specified element.\n\n  function clearElement (element) {\n    while (element.childNodes.length > 0) {\n      element.removeChild(element.childNodes[0])\n    }\n  }\n\n  // A SubjectType is created for each rdf:type discovered.\n\n  function SubjectType (type) {\n    this.type = type\n    this.columns = null\n    this.allColumns = []\n    this.useCount = 0\n\n    // Get a list of all columns used by this type.\n\n    this.getAllColumns = function () {\n      return this.allColumns\n    }\n\n    // Get a list of the current columns used by this type\n    // (subset of allColumns)\n\n    this.getColumns = function () {\n      // The first time through, get a list of all the columns\n      // and select only the six most popular columns.\n\n      if (!this.columns) {\n        const allColumns = this.getAllColumns()\n        this.columns = allColumns.slice(0, 7)\n      }\n\n      return this.columns\n    }\n\n    // Get a list of unused columns\n\n    this.getUnusedColumns = function () {\n      const allColumns = this.getAllColumns()\n      const columns = this.getColumns()\n\n      const result = []\n\n      for (let i = 0; i < allColumns.length; ++i) {\n        if (columns.indexOf(allColumns[i]) === -1) {\n          result.push(allColumns[i])\n        }\n      }\n\n      return result\n    }\n\n    this.addColumn = function (column) {\n      this.columns.push(column)\n    }\n\n    this.removeColumn = function (column) {\n      this.columns = this.columns.filter(function (x) {\n        return x !== column\n      })\n    }\n\n    this.getLabel = function () {\n      return utils.label(this.type)\n    }\n\n    this.addUse = function () {\n      this.useCount += 1\n    }\n  }\n\n  // Class representing a column in the table.\n\n  function Column () {\n    this.useCount = 0\n\n    // Have we checked any values for this column yet?\n\n    this.checkedAnyValues = false\n\n    // If the range is unknown, but we just get literals in this\n    // column, then we can generate a literal selector.\n\n    this.possiblyLiteral = true\n\n    // If the range is unknown, but we just get literals and they\n    // match the regular expression for numbers, we can generate\n    // a number selector.\n\n    this.possiblyNumber = true\n\n    // We accumulate classes which things in the column must be a member of\n\n    this.constraints = []\n\n    // Check values as they are read.  If we don't know what the\n    // range is, we might be able to infer that it is a literal\n    // if all of the values are literals.  Similarly, we might\n    // be able to determine if the literal values are actually\n    // numbers (using regexps).\n\n    this.checkValue = function (term) {\n      const termType = term.termType\n      if (\n        this.possiblyLiteral &&\n        termType !== 'Literal' &&\n        termType !== 'NamedNode'\n      ) {\n        this.possiblyNumber = false\n        this.possiblyLiteral = false\n      } else if (this.possiblyNumber) {\n        if (termType !== 'Literal') {\n          this.possiblyNumber = false\n        } else {\n          const literalValue = term.value\n\n          if (!literalValue.match(/^-?\\d+(\\.\\d*)?$/)) {\n            this.possiblyNumber = false\n          }\n        }\n      }\n\n      this.checkedAnyValues = true\n    }\n\n    this.getVariable = function () {\n      return this.variable\n    }\n\n    this.setVariable = function (variable) {\n      this.variable = variable\n    }\n\n    this.getKey = function () {\n      return this.variable.toString()\n    }\n\n    this.addUse = function () {\n      this.useCount += 1\n    }\n\n    this.getHints = function () {\n      if (\n        options &&\n        options.hints &&\n        this.variable &&\n        options.hints[this.variable.toNT()]\n      ) {\n        return options.hints[this.variable.toNT()]\n      }\n      return {}\n    }\n\n    this.getLabel = function () {\n      if (this.getHints().label) {\n        return this.getHints().label\n      }\n      if (this.predicate) {\n        if (this.predicate.sameTerm(ns.rdf('type')) && this.superClass) {\n          return utils.label(this.superClass, true) // do initial cap\n        }\n        return utils.label(this.predicate)\n      } else if (this.variable) {\n        return this.variable.toString()\n      } else {\n        return 'unlabeled column?'\n      }\n    }\n\n    this.setPredicate = function (predicate, inverse, other) {\n      if (inverse) {\n        // variable is in the subject pos\n        this.inverse = predicate\n        this.constraints = this.constraints.concat(\n          kb.each(predicate, UI.ns.rdfs('domain'))\n        )\n        if (\n          predicate.sameTerm(ns.rdfs('subClassOf')) &&\n          other.termType === 'NamedNode'\n        ) {\n          this.superClass = other\n          this.alternatives = kb.each(undefined, ns.rdfs('subClassOf'), other)\n        }\n      } else {\n        // variable is the object\n        this.predicate = predicate\n        this.constraints = this.constraints.concat(\n          kb.each(predicate, UI.ns.rdfs('range'))\n        )\n      }\n    }\n\n    this.getConstraints = function () {\n      return this.constraints\n    }\n\n    this.filterFunction = function () {\n      return true\n    }\n\n    this.sortKey = function () {\n      return this.getLabel().toLowerCase()\n    }\n\n    this.isImageColumn = function () {\n      for (let i = 0; i < this.constraints.length; i++) {\n        if (this.constraints[i].uri in IMAGE_TYPES) return true\n      }\n      return false\n    }\n  }\n\n  // Convert an object to an array.\n\n  function objectToArray (obj, filter) {\n    const result = []\n\n    for (const property in obj) {\n      // @@@ have to guard against methods\n      const value = obj[property]\n\n      if (!filter || filter(property, value)) {\n        result.push(value)\n      }\n    }\n\n    return result\n  }\n\n  // Generate an <option> in a drop-down list.\n\n  function optionElement (label, value) {\n    const result = doc.createElement('option')\n\n    result.setAttribute('value', value)\n    result.appendChild(doc.createTextNode(label))\n\n    return result\n  }\n\n  // Generate drop-down list box for choosing type of data displayed\n\n  function generateTypeSelector (allType, types) {\n    const resultDiv = doc.createElement('div')\n\n    resultDiv.appendChild(doc.createTextNode('Select type: '))\n\n    const dropdown = doc.createElement('select')\n\n    dropdown.appendChild(optionElement('All types', 'null'))\n\n    for (const uri in types) {\n      dropdown.appendChild(optionElement(types[uri].getLabel(), uri))\n    }\n\n    dropdown.addEventListener(\n      'click',\n      function () {\n        let type\n\n        if (dropdown.value === 'null') {\n          type = allType\n        } else {\n          type = types[dropdown.value]\n        }\n\n        typeSelectorChanged(type)\n      },\n      false\n    )\n\n    resultDiv.appendChild(dropdown)\n\n    return resultDiv\n  }\n\n  // Callback invoked when the type selector drop-down list is changed.\n\n  function typeSelectorChanged (selectedType) {\n    buildFilteredTable(selectedType)\n  }\n\n  // Build drop-down list to add a new column\n\n  function generateColumnAddDropdown (type) {\n    const resultDiv = doc.createElement('div')\n\n    const unusedColumns = type.getUnusedColumns()\n\n    unusedColumns.sort(function (a, b) {\n      const aLabel = a.sortKey()\n      const bLabel = b.sortKey()\n      return (aLabel > bLabel) - (aLabel < bLabel)\n    })\n\n    // If there are no unused columns, the div is empty.\n\n    if (unusedColumns.length > 0) {\n      resultDiv.appendChild(doc.createTextNode('Add column: '))\n\n      // Build dropdown list of unused columns.\n\n      const dropdown = doc.createElement('select')\n\n      dropdown.appendChild(optionElement('', '-1'))\n\n      for (let i = 0; i < unusedColumns.length; ++i) {\n        const column = unusedColumns[i]\n        dropdown.appendChild(optionElement(column.getLabel(), '' + i))\n      }\n\n      resultDiv.appendChild(dropdown)\n\n      // Invoke callback when the dropdown is changed, to add\n      // the column and reload the table.\n\n      dropdown.addEventListener(\n        'click',\n        function () {\n          const columnIndex = Number(dropdown.value)\n\n          if (columnIndex >= 0) {\n            type.addColumn(unusedColumns[columnIndex])\n            buildFilteredTable(type)\n          }\n        },\n        false\n      )\n    }\n\n    return resultDiv\n  }\n\n  // Find the column for a given variable\n\n  function getColumnForVariable (columns, variableNT) {\n    for (const predicateUri in columns) {\n      const column = columns[predicateUri]\n      if (column.variable.toNT() === variableNT) {\n        return column\n      }\n    }\n    throw new Error(`getColumnForVariable: no column for variable ${variableNT}`)\n    // return null\n  }\n\n  // Find the column for a given predicate, creating a new column object\n  // if necessary.\n\n  function getColumnForPredicate (columns, predicate) {\n    let column\n\n    if (predicate.uri in columns) {\n      column = columns[predicate.uri]\n    } else {\n      column = new Column()\n      column.setPredicate(predicate)\n      columns[predicate.uri] = column\n    }\n\n    return column\n  }\n\n  // Find a type by its URI, creating a new SubjectType object if\n  // necessary.\n\n  function getTypeForObject (types, type) {\n    let subjectType\n\n    if (type.uri in types) {\n      subjectType = types[type.uri]\n    } else {\n      subjectType = new SubjectType(type)\n      types[type.uri] = subjectType\n    }\n\n    return subjectType\n  }\n\n  // Discover types and subjects for search.\n\n  function discoverTypes () {\n    // rdf:type properties of subjects, indexed by URI for the type.\n\n    const types = {}\n\n    // Get a list of statements that match:  ? rdfs:type ?\n    // From this we can get a list of subjects and types.\n\n    const subjectList = kb.statementsMatching(\n      undefined,\n      UI.ns.rdf('type'),\n      tableClass, // can be undefined OR\n      sourceDocument\n    ) // can be undefined\n\n    // Subjects for later lookup.  This is a mapping of type URIs to\n    // lists of subjects (it is necessary to record the type of\n    // a subject).\n\n    const subjects = {}\n\n    for (let i = 0; i < subjectList.length; ++i) {\n      const type = subjectList[i].object\n\n      if (type.termType !== 'NamedNode') {\n        // @@ no bnodes?\n        continue\n      }\n\n      const typeObj = getTypeForObject(types, type)\n\n      if (!(type.uri in subjects)) {\n        subjects[type.uri] = []\n      }\n\n      subjects[type.uri].push(subjectList[i].subject)\n      typeObj.addUse()\n    }\n\n    return [subjects, types]\n  }\n\n  // Get columns for the given subject.\n\n  function getSubjectProperties (subject, columns) {\n    // Get a list of properties of this subject.\n\n    const properties = kb.statementsMatching(\n      subject,\n      undefined,\n      undefined,\n      sourceDocument\n    )\n\n    const result = {}\n\n    for (let j = 0; j < properties.length; ++j) {\n      const predicate = properties[j].predicate\n\n      if (predicate.uri in FORBIDDEN_COLUMNS) {\n        continue\n      }\n\n      // Find/create a column for this predicate.\n\n      const column = getColumnForPredicate(columns, predicate)\n      column.checkValue(properties[j].object)\n\n      result[predicate.uri] = column\n    }\n\n    return result\n  }\n\n  // Identify the columns associated with a type.\n\n  function identifyColumnsForType (type, subjects) {\n    const allColumns = {}\n\n    // Process each subject of this type to build up the\n    // column list.\n\n    for (let i = 0; i < subjects.length; ++i) {\n      const columns = getSubjectProperties(subjects[i], allColumns)\n\n      for (const predicateUri in columns) {\n        const column = columns[predicateUri]\n\n        column.addUse()\n      }\n    }\n\n    // Generate the columns list\n\n    const allColumnsList = objectToArray(allColumns)\n    sortColumns(allColumnsList)\n    type.allColumns = allColumnsList\n  }\n\n  // Build table information from parsing RDF statements.\n\n  function calculateTable () {\n    // Find the types that we will display in the dropdown\n    // list box, and associated objects of those types.\n\n    let subjects, types\n\n    const s = discoverTypes()\n    // eslint-disable-next-line prefer-const\n    subjects = s[0]\n    // eslint-disable-next-line prefer-const\n    types = s[1] // no [ ] on LHS\n\n    for (const typeUrl in subjects) {\n      const subjectList = subjects[typeUrl]\n      const type = types[typeUrl]\n\n      identifyColumnsForType(type, subjectList)\n    }\n\n    // TODO: Special type that captures all rows.\n    // Combine columns from all types\n\n    const allType = new SubjectType(null)\n\n    return [allType, objectToArray(types)]\n  }\n\n  // Sort the list of columns by the most common columns.\n\n  function sortColumns (columns) {\n    function sortFunction (a, b) {\n      return (a.useCount < b.useCount) - (a.useCount > b.useCount)\n    }\n\n    columns.sort(sortFunction)\n  }\n\n  // Create the delete button for a column.\n\n  function renderColumnDeleteButton (type, column) {\n    const button = doc.createElement('a')\n\n    button.appendChild(doc.createTextNode('[x]'))\n\n    button.addEventListener(\n      'click',\n      function () {\n        type.removeColumn(column)\n        buildFilteredTable(type)\n      },\n      false\n    )\n\n    return button\n  }\n\n  // Render the table header for the HTML table.\n\n  function renderTableHeader (columns, type) {\n    const tr = doc.createElement('tr')\n\n    /* Empty header for link column */\n    const linkTd = doc.createElement('th')\n    tr.appendChild(linkTd)\n\n    for (let i = 0; i < columns.length; ++i) {\n      const th = doc.createElement('th')\n      const column = columns[i]\n\n      th.appendChild(doc.createTextNode(column.getLabel()))\n\n      // We can only add a delete button if we are using the\n      // proper interface and have a type to delete from:\n      if (type) {\n        th.appendChild(renderColumnDeleteButton(type, column))\n      }\n\n      tr.appendChild(th)\n    }\n\n    return tr\n  }\n\n  // Sort the rows in the rendered table by data from a specific\n  // column, using the provided sort function to compare values.\n\n  function applyColumnSort (rows, column, sortFunction, reverse) {\n    const columnKey = column.getKey()\n\n    // Sort the rows array.\n    rows.sort(function (row1, row2) {\n      let row1Value = null\n      let row2Value = null\n\n      if (columnKey in row1.values) {\n        row1Value = row1.values[columnKey][0]\n      }\n      if (columnKey in row2.values) {\n        row2Value = row2.values[columnKey][0]\n      }\n\n      const result = sortFunction(row1Value, row2Value)\n\n      if (reverse) {\n        return -result\n      } else {\n        return result\n      }\n    })\n\n    // Remove all rows from the table:\n\n    if (rows.length) {\n      const parentTable = rows[0]._htmlRow.parentNode\n\n      for (let i = 0; i < rows.length; ++i) {\n        parentTable.removeChild(rows[i]._htmlRow)\n      }\n\n      // Add back the rows in the new sorted order:\n\n      for (let i = 0; i < rows.length; ++i) {\n        parentTable.appendChild(rows[i]._htmlRow)\n      }\n    }\n  }\n\n  // Filter the list of rows based on the selectors for the\n  // columns.\n\n  function applyColumnFiltersToRow (row, columns) {\n    let rowDisplayed = true\n\n    // Check the filter functions for every column.\n    // The row should only be displayed if the filter functions\n    // for all of the columns return true.\n\n    for (let c = 0; c < columns.length; ++c) {\n      const column = columns[c]\n      const columnKey = column.getKey()\n\n      let columnValue = null\n\n      if (columnKey in row.values) {\n        columnValue = row.values[columnKey][0]\n      }\n\n      if (!column.filterFunction(columnValue)) {\n        rowDisplayed = false\n        break\n      }\n    }\n\n    // Show or hide the HTML row according to the result\n    // from the filter function.\n\n    const htmlRow = row._htmlRow\n\n    if (rowDisplayed) {\n      htmlRow.style.display = ''\n    } else {\n      htmlRow.style.display = 'none'\n    }\n  }\n\n  // Filter the list of rows based on the selectors for the\n  // columns.\n\n  function applyColumnFilters (rows, columns) {\n    // Apply filterFunction to each row.\n\n    for (let r = 0; r < rows.length; ++r) {\n      const row = rows[r]\n      applyColumnFiltersToRow(row, columns)\n    }\n  }\n\n  // /////////////////////////////////// Literal column handling\n\n  // Sort by literal value\n\n  function literalSort (rows, column, reverse) {\n    function literalToString (colValue) {\n      if (colValue) {\n        if (colValue.termType === 'Literal') {\n          return colValue.value.toLowerCase()\n        } else if (colValue.termType === 'NamedNode') {\n          return utils.label(colValue).toLowerCase()\n        }\n        return colValue.value.toLowerCase()\n      } else {\n        return ''\n      }\n    }\n\n    function literalCompare (value1, value2) {\n      const strValue1 = literalToString(value1)\n      const strValue2 = literalToString(value2)\n\n      if (strValue1 < strValue2) {\n        return -1\n      } else if (strValue1 > strValue2) {\n        return 1\n      } else {\n        return 0\n      }\n    }\n\n    applyColumnSort(rows, column, literalCompare, reverse)\n  }\n\n  // Generates a selector for an RDF literal column.\n\n  function renderLiteralSelector (rows, columns, column) {\n    const result = doc.createElement('div')\n\n    const textBox = doc.createElement('input')\n    textBox.setAttribute('type', 'text')\n    textBox.style.width = '70%'\n\n    result.appendChild(textBox)\n\n    const sort1 = doc.createElement('span')\n    sort1.appendChild(doc.createTextNode('\\u25BC'))\n    sort1.addEventListener(\n      'click',\n      function () {\n        literalSort(rows, column, false)\n      },\n      false\n    )\n    result.appendChild(sort1)\n\n    const sort2 = doc.createElement('span')\n    sort2.appendChild(doc.createTextNode('\\u25B2'))\n    sort2.addEventListener(\n      'click',\n      function () {\n        literalSort(rows, column, true)\n      },\n      false\n    )\n    result.appendChild(sort2)\n\n    let substring = null\n\n    // Filter the table to show only rows that have a particular\n    // substring in the specified column.\n\n    column.filterFunction = function (colValue) {\n      if (!substring) {\n        return true\n      } else if (!colValue) {\n        return false\n      } else {\n        let literalValue\n\n        if (colValue.termType === 'Literal') {\n          literalValue = colValue.value\n        } else if (colValue.termType === 'NamedNode') {\n          literalValue = utils.label(colValue)\n        } else {\n          literalValue = ''\n        }\n\n        return literalValue.toLowerCase().indexOf(substring) >= 0\n      }\n    }\n\n    textBox.addEventListener(\n      'keyup',\n      function () {\n        if (textBox.value !== '') {\n          substring = textBox.value.toLowerCase()\n        } else {\n          substring = null\n        }\n\n        applyColumnFilters(rows, columns)\n      },\n      false\n    )\n\n    return result\n  }\n\n  // ///////////////////////////////////  Enumeration\n\n  // Generates a dropdown selector for enumeration types include\n  //\n  //  @param rows,\n  //  @param columns, the mapping of predictae URIs to columns\n  //  @param column,\n  //  @param list,    List of alternative terms\n  //\n  function renderEnumSelector (rows, columns, column, list) {\n    const doMultiple = true\n    const result = doc.createElement('div')\n    const dropdown = doc.createElement('select')\n\n    let searchValue = {} // Defualt to all enabled\n    for (let i = 0; i < list.length; ++i) {\n      const value = list[i]\n      searchValue[value.uri] = true\n    }\n\n    const initialSelection = getHints(column).initialSelection\n    if (initialSelection) searchValue = initialSelection\n\n    if (doMultiple) dropdown.setAttribute('multiple', 'true')\n    else dropdown.appendChild(optionElement('(All)', '-1'))\n\n    for (let i = 0; i < list.length; ++i) {\n      const value = list[i]\n      const ele = optionElement(utils.label(value), i)\n      if (searchValue[value.uri]) ele.selected = true\n      dropdown.appendChild(ele)\n    }\n    result.appendChild(dropdown)\n\n    // Select based on an enum value.\n\n    column.filterFunction = function (colValue) {\n      return !searchValue || (colValue && searchValue[colValue.uri])\n    }\n\n    dropdown.addEventListener(\n      'click',\n      function () {\n        if (doMultiple) {\n          searchValue = {}\n          const opt = dropdown.options\n          for (let i = 0; i < opt.length; i++) {\n            const option = opt[i]\n            const index = Number(option.value)\n            if (opt[i].selected) searchValue[list[index].uri] = true\n          }\n        } else {\n          const index = Number(dropdown.value) // adjusted in Standard tweaks 2018-01\n          if (index < 0) {\n            searchValue = null\n          } else {\n            searchValue = {}\n            searchValue[list[index].uri] = true\n          }\n        }\n        applyColumnFilters(rows, columns)\n      },\n      true\n    )\n\n    return result\n  }\n\n  // //////////////////////////////////// Numeric\n  //\n  // Selector for XSD number types.\n\n  function renderNumberSelector (rows, columns, column) {\n    const result = doc.createElement('div')\n\n    const minSelector = doc.createElement('input')\n    minSelector.setAttribute('type', 'text')\n    minSelector.style.width = '40px'\n    result.appendChild(minSelector)\n\n    const maxSelector = doc.createElement('input')\n    maxSelector.setAttribute('type', 'text')\n    maxSelector.style.width = '40px'\n    result.appendChild(maxSelector)\n\n    // Select based on minimum/maximum limits.\n\n    let min = null\n    let max = null\n\n    column.filterFunction = function (colValue) {\n      if (colValue) {\n        colValue = Number(colValue)\n      }\n\n      if (min && (!colValue || colValue < min)) {\n        return false\n      }\n      if (max && (!colValue || colValue > max)) {\n        return false\n      }\n\n      return true\n    }\n\n    // When the values in the boxes are changed, update the\n    // displayed columns.\n\n    function eventListener () {\n      if (minSelector.value === '') {\n        min = null\n      } else {\n        min = Number(minSelector.value)\n      }\n\n      if (maxSelector.value === '') {\n        max = null\n      } else {\n        max = Number(maxSelector.value)\n      }\n\n      applyColumnFilters(rows, columns)\n    }\n\n    minSelector.addEventListener('keyup', eventListener, false)\n    maxSelector.addEventListener('keyup', eventListener, false)\n\n    return result\n  }\n\n  // /////////////////////////////////////////////////////////////////\n\n  // Fallback attempts at generating a selector if other attempts fail.\n\n  function fallbackRenderTableSelector (rows, columns, column) {\n    // Have all values matched as numbers?\n\n    if (column.checkedAnyValues && column.possiblyNumber) {\n      return renderNumberSelector(rows, columns, column)\n    }\n\n    // Have all values been literals?\n\n    if (column.possiblyLiteral) {\n      return renderLiteralSelector(rows, columns, column)\n    }\n\n    return null\n  }\n\n  // Render a selector for a given row.\n\n  function renderTableSelector (rows, columns, column) {\n    // What type of data is in this column?  Check the constraints for\n    // this predicate.\n\n    // If this is a class which can be one of various sibling classes?\n    if (column.superClass && column.alternatives.length > 0) {\n      return renderEnumSelector(rows, columns, column, column.alternatives)\n    }\n\n    const cs = column.getConstraints()\n    let range\n    for (let i = 0; i < cs.length; i++) {\n      range = cs[i]\n\n      // Is this a number type?\n      // Alternatively, is this an rdf:Literal type where all of\n      // the values match as numbers?\n\n      if (\n        (column.checkedAnyValues && column.possiblyNumber) ||\n        range.uri in XSD_NUMBER_TYPES\n      ) {\n        return renderNumberSelector(rows, columns, column)\n      }\n\n      // rdf:Literal?  Assume a string at this point\n\n      if (range.uri === RDFS_LITERAL) {\n        return renderLiteralSelector(rows, columns, column)\n      }\n\n      // Is this an enumeration type?\n\n      // Also  ToDo: @@@ Handle membership of classes whcih are disjointUnions\n\n      const choices = kb.each(range, UI.ns.owl('oneOf'))\n      if (choices.length > 0) {\n        return renderEnumSelector(rows, columns, column, choices.elements)\n      }\n    }\n    return fallbackRenderTableSelector(rows, columns, column)\n  }\n\n  // Generate the search selectors for the table columns.\n\n  function renderTableSelectors (rows, columns) {\n    const tr = doc.createElement('tr')\n    tr.className = 'selectors'\n\n    // Empty link column\n\n    tr.appendChild(doc.createElement('td'))\n\n    // Generate selectors.\n\n    for (let i = 0; i < columns.length; ++i) {\n      const td = doc.createElement('td')\n\n      const selector = renderTableSelector(rows, columns, columns[i])\n\n      if (selector) {\n        td.appendChild(selector)\n      }\n      /*\n                  // Useful debug: display URI of predicate in column header\n                  if (columns[i].predicate.uri) {\n                      td.appendChild(document.createTextNode(columns[i].predicate.uri))\n                  }\n      */\n      tr.appendChild(td)\n    }\n\n    return tr\n  }\n\n  function linkTo (uri, linkText, hints) {\n    hints = hints || {}\n    const result = doc.createElement('a')\n    const linkFunction = hints.linkFunction\n    result.setAttribute('href', uri)\n    result.appendChild(doc.createTextNode(linkText))\n    if (!linkFunction) {\n      result.addEventListener('click', UI.widgets.openHrefInOutlineMode, true)\n    } else {\n      result.addEventListener(\n        'click',\n        function (e) {\n          e.preventDefault()\n          e.stopPropagation()\n          const target = utils.getTarget(e)\n          const uri = target.getAttribute('href')\n          if (!uri) debug.log('No href found \\n')\n          linkFunction(uri)\n        },\n        true\n      )\n    }\n    return result\n  }\n\n  function linkToObject (obj, hints) {\n    let match = false\n\n    if (obj.uri) {\n      match = obj.uri.match(/^mailto:(.*)/)\n    }\n\n    if (match) {\n      return linkTo(obj.uri, match[1], hints)\n    } else {\n      return linkTo(obj.uri, utils.label(obj), hints)\n    }\n  }\n\n  // Render an image\n\n  function renderImage (obj) {\n    const result = doc.createElement('img')\n    result.setAttribute('src', obj.uri)\n\n    // Set the height, so it appears as a thumbnail.\n    result.style.height = '40px'\n    return result\n  }\n\n  // Render an individual RDF object to an HTML object displayed\n  // in a table cell.\n\n  function getHints (column) {\n    if (\n      options &&\n      options.hints &&\n      column.variable &&\n      options.hints[column.variable.toNT()]\n    ) {\n      return options.hints[column.variable.toNT()]\n    }\n    return {}\n  }\n\n  function renderValue (obj, column) {\n    // hint\n    const hints = getHints(column)\n    const cellFormat = hints.cellFormat\n    if (cellFormat) {\n      switch (cellFormat) {\n        case 'shortDate':\n          return doc.createTextNode(UI.widgets.shortDate(obj.value))\n        // break\n        default:\n        // drop through\n      }\n    } else {\n      if (obj.termType === 'Literal') {\n        if (obj.datatype) {\n          if (XSD_DATE_TYPES[obj.datatype.uri]) {\n            return doc.createTextNode(UI.widgets.shortDate(obj.value))\n          } else if (XSD_NUMBER_TYPES[obj.datatype.uri]) {\n            const span = doc.createElement('span')\n            span.textContent = obj.value\n            span.setAttribute('style', 'text-align: right')\n            return span\n          }\n        }\n        return doc.createTextNode(obj.value)\n      } else if (obj.termType === 'NamedNode' && column.isImageColumn()) {\n        return renderImage(obj)\n      } else if (obj.termType === 'NamedNode' || obj.termType === 'BlankNode') {\n        return linkToObject(obj, hints)\n      } else if (obj.termType === 'Collection') {\n        const span = doc.createElement('span')\n        span.appendChild(doc.createTextNode('['))\n        obj.elements.forEach(function (x) {\n          span.appendChild(renderValue(x, column))\n          span.appendChild(doc.createTextNode(', '))\n        })\n        span.removeChild(span.lastChild)\n        span.appendChild(doc.createTextNode(']'))\n        return span\n      } else {\n        return doc.createTextNode(\"unknown termtype '\" + obj.termType + \"'!\")\n      }\n    }\n  }\n\n  // Render a row of the HTML table, from the given row structure.\n  // Note that unlike other functions, this renders into a provided\n  // row (<tr>) element.\n\n  function renderTableRowInto (tr, row, columns, _downstream) {\n    /* Link column, for linking to this subject. */\n\n    const linkTd = doc.createElement('td')\n\n    if (row._subject && 'uri' in row._subject) {\n      linkTd.appendChild(linkTo(row._subject.uri, '\\u2192'))\n    }\n\n    tr.appendChild(linkTd)\n\n    // Create a <td> for each column (whether the row has data for that\n    // column or not).\n\n    for (let i = 0; i < columns.length; ++i) {\n      const column = columns[i]\n      const td = doc.createElement('td')\n      let orig\n\n      const columnKey = column.getKey()\n\n      if (columnKey in row.values) {\n        const objects = row.values[columnKey]\n        let different = false\n        if (row.originalValues && row.originalValues[columnKey]) {\n          if (objects.length !== row.originalValues[columnKey].length) {\n            different = true\n          }\n        }\n        for (let j = 0; j < objects.length; ++j) {\n          const obj = objects[j]\n          if (\n            row.originalValues &&\n            row.originalValues[columnKey] &&\n            row.originalValues[columnKey].length > j\n          ) {\n            orig = row.originalValues[columnKey][j]\n            if (obj.toString() !== orig.toString()) {\n              different = true\n            }\n          }\n          td.appendChild(renderValue(obj, column))\n\n          if (j !== objects.length - 1) {\n            td.appendChild(doc.createTextNode(',\\n'))\n          }\n          if (different) {\n            td.style.background = '#efe' // green = new changed\n          }\n        }\n      }\n\n      tr.appendChild(td)\n    }\n\n    // Save a reference to the HTML row in the row object.\n\n    row._htmlRow = tr\n\n    return tr\n  }\n\n  // Check if a value is already stored in the list of values for\n  // a cell (the query can sometimes find it multiple times)\n\n  function valueInList (value, list) {\n    let key = null\n\n    if (value.termType === 'Literal') {\n      key = 'value'\n    } else if (value.termType === 'NamedNode') {\n      key = 'uri'\n    } else {\n      return list.indexOf(value) >= 0\n    }\n\n    // Check the list and compare keys:\n\n    let i\n\n    for (i = 0; i < list.length; ++i) {\n      if (list[i].termType === value.termType && list[i][key] === value[key]) {\n        return true\n      }\n    }\n\n    // Not found?\n\n    return false\n  }\n\n  // Update a row, add new values, and regenerate the HTML element\n  // containing the values.\n\n  function updateRow (row, columns, values) {\n    let key\n    let needUpdate = false\n\n    for (key in values) {\n      const value = values[key]\n\n      // If this key is not already in the row, create a new entry\n      // for it:\n\n      if (!(key in row.values)) {\n        row.values[key] = []\n      }\n\n      // Possibly add this new value to the list, but don't\n      // add it if we have already added it:\n\n      if (!valueInList(value, row.values[key])) {\n        row.values[key].push(value)\n        needUpdate = true\n      }\n    }\n\n    // Regenerate the HTML row?\n\n    if (needUpdate) {\n      clearElement(row._htmlRow)\n      renderTableRowInto(row._htmlRow, row, columns)\n    }\n    applyColumnFiltersToRow(row, columns) // Hide immediately if nec\n  }\n\n  // Get a unique ID for the given subject.  This is normally the\n  // URI; if the subject has no URI, a unique ID is assigned.\n\n  function getSubjectId (subject) {\n    if ('uri' in subject) {\n      return subject.uri\n    } else if ('_subject_id' in subject) {\n      return subject._subject_id\n    } else {\n      const result = '' + subjectIdCounter\n      subject._subject_id = result\n      ++subjectIdCounter\n      return result\n    }\n  }\n\n  // Run a query and populate the table.\n  // Populates also an array of logical rows.  This will be empty when the function\n  // first returns (as the query is performed in the background)\n\n  function runQuery (query, rows, columns, table) {\n    query.running = true\n    const startTime = Date.now()\n\n    let progressMessage = doc.createElement('tr')\n    table.appendChild(progressMessage)\n    progressMessage.textContent = 'Loading ...'\n\n    for (let i = 0; i < rows.length; i++) {\n      rows[i].original = true\n      if (!rows[i].originalValues) {\n        // remember first set\n        rows[i].originalValues = rows[i].values\n      }\n      rows[i].values = {}\n      // oldStyle = rows[i]._htmlRow.getAttribute('style') || ''\n      // rows[i]._htmlRow.style.background = '#ffe'; //setAttribute('style', ' background-color: #ffe;')// yellow\n    }\n\n    const onResult = function (values) {\n      if (!query.running) {\n        return\n      }\n\n      progressMessage.textContent += '.' // give a progress bar\n\n      let row = null\n      let rowKey = null\n      let rowKeyId\n\n      // If the query has a row key, use it to look up the row.\n\n      if (keyVariable in values) {\n        rowKey = values[keyVariable]\n        rowKeyId = getSubjectId(rowKey)\n\n        // Do we have a row for this already?\n        // If so, reuse it; otherwise, we must create a new row.\n\n        if (rowKeyId in rowsLookup) {\n          row = rowsLookup[rowKeyId]\n        }\n      }\n\n      // Create a new row?\n\n      if (!row) {\n        const tr = doc.createElement('tr')\n        table.appendChild(tr)\n\n        row = {\n          _htmlRow: tr,\n          _subject: rowKey,\n          values: {}\n        }\n        rows.push(row)\n\n        if (rowKey) {\n          rowsLookup[rowKeyId] = row\n        }\n      }\n\n      // Add the new values to this row.\n      delete row.original // This is included in the new data\n      updateRow(row, columns, values)\n    }\n\n    const onDone = function () {\n      if (\n        progressMessage &&\n        progressMessage.parentNode &&\n        progressMessage.parentNode.removeChild\n      ) {\n        progressMessage.parentNode.removeChild(progressMessage)\n        progressMessage = null\n      }\n\n      const elapsedTimeMS = Date.now() - startTime\n      debug.log(\n        'Query done: ' + rows.length + ' rows, ' + elapsedTimeMS + 'ms'\n      )\n      // Delete rows which were from old values not new\n      for (let i = rows.length - 1; i >= 0; i--) {\n        // backwards\n        if (rows[i].original) {\n          debug.log('   deleting row ' + rows[i]._subject)\n          const tr = rows[i]._htmlRow\n          tr.parentNode.removeChild(tr)\n          delete rowsLookup[getSubjectId(rows[i]._subject)]\n          rows.splice(i, 1)\n        }\n      }\n\n      if (options.sortBy) { // @@ for each column check needs sorting\n        const column = getColumnForVariable(columns, options.sortBy)\n        literalSort(rows, column, options.sortReverse)\n      }\n\n      if (options.onDone) options.onDone(resultDiv) // return div makes testing easier\n    }\n    kb.query(query, onResult, undefined, onDone)\n  }\n\n  // Given the formula object which is the query pattern,\n  // deduce from where the variable occurs constraints on\n  // what values it can take.\n\n  function inferColumnsFromFormula (columns, formula) {\n    UI.log.debug('>> processing formula')\n\n    for (let i = 0; i < formula.statements.length; ++i) {\n      const statement = formula.statements[i]\n      // UI.log.debug(\"processing statement \" + i)\n\n      // Does it match this?:\n      // <something> <predicate> ?var\n      // If so, we can use the predicate as the predicate for the\n      // column used for the specified variable.\n\n      if (\n        statement.predicate.termType === 'NamedNode' &&\n        statement.object.termType === 'Variable'\n      ) {\n        const variable = statement.object.toString()\n        if (variable in columns) {\n          const column = columns[variable]\n          column.setPredicate(statement.predicate, false, statement.subject)\n        }\n      }\n      if (\n        statement.predicate.termType === 'NamedNode' &&\n        statement.subject.termType === 'Variable'\n      ) {\n        const variable = statement.subject.toString()\n        if (variable in columns) {\n          const column = columns[variable]\n          column.setPredicate(statement.predicate, true, statement.object)\n        }\n      }\n    }\n\n    // Apply to OPTIONAL formulas:\n\n    for (let i = 0; i < formula.optional.length; ++i) {\n      UI.log.debug('recurse to optional subformula ' + i)\n      inferColumnsFromFormula(columns, formula.optional[i])\n    }\n\n    UI.log.debug('<< finished processing formula')\n  }\n\n  // Generate a list of column structures and infer details about the\n  // predicates based on the contents of the query\n\n  function inferColumns (query) {\n    // Generate the columns list:\n\n    const result = []\n    const columns = {}\n\n    for (let i = 0; i < query.vars.length; ++i) {\n      const column = new Column()\n      const queryVar = query.vars[i]\n      UI.log.debug('column ' + i + ' : ' + queryVar)\n\n      column.setVariable(queryVar)\n      columns[queryVar] = column\n      result.push(column)\n    }\n\n    inferColumnsFromFormula(columns, query.pat)\n\n    return result\n  }\n\n  // Generate a table from a query.\n\n  function renderTableForQuery (query, type) {\n    // infer columns from query, to allow generic queries\n    let columns\n    if (!givenQuery) {\n      columns = type.getColumns()\n    } else {\n      columns = inferColumns(query)\n    }\n\n    // Start with an empty list of rows; this will be populated\n    // by the query.\n\n    const rows = []\n\n    // Create table element and header.\n\n    const table = doc.createElement('table')\n\n    table.appendChild(renderTableHeader(columns, type))\n    table.appendChild(renderTableSelectors(rows, columns))\n\n    // Run query.  Note that this is perform asynchronously; the\n    // query runs in the background and this call does not block.\n\n    table.logicalRows = rows // Save for refresh\n    table.columns = columns\n    table.query = query\n\n    runQuery(query, rows, columns, table)\n\n    return table\n  }\n\n  // Find the most common type of row\n\n  function getMostCommonType (types) {\n    let bestCount = -1\n    let best = null\n\n    let typeUri\n    for (typeUri in types) {\n      const type = types[typeUri]\n\n      if (type.useCount > bestCount) {\n        best = type\n        bestCount = type.useCount\n      }\n    }\n\n    return best\n  }\n\n  // Filter list of columns to only those columns used in the\n  // specified rows.\n  /*\n  function filterColumns (columns, rows) {\n    var filteredColumns = {}\n\n    // Copy columns from \"columns\" -> \"filteredColumns\", but only\n    // those columns that are used in the list of rows specified.\n\n    for (let columnUri in columns) {\n      for (let i = 0; i < rows.length; ++i) {\n        if (columnUri in rows[i]) {\n          filteredColumns[columnUri] = columns[columnUri]\n          break\n        }\n      }\n    }\n    return filteredColumns\n  }\n  */\n}\n// ///////////////////////////////////////////////////////////////////\n\n// ENDS\n"],"mappings":"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"}