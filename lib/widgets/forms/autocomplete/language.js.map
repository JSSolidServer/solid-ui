{"version":3,"sources":["../../../../src/widgets/forms/autocomplete/language.ts"],"names":["languageCodeURIBase","defaultPreferedLangages","getPreferredLanagugesFor","person","kb","fetcher","load","doc","list","any","ns","schema","console","log","languageCodeArray","elements","forEach","item","lang","solid","warn","value","startsWith","error","code","slice","length","push","join","getPreferredLanguages","authn","currentUser","me","solidLanguagePrefs","navigator","languages","map","longForm","split","language","filterByLanguage","bindings","languagePrefs","uris","binding","uri","subject","languagePrefs2","reverse","slimmed","u","sortMe","indexOf","name","sort","debug"],"mappings":";;;;;;;;;;;;;;;;;;AAMA;;AAEA;;AACA;;AAIA;;;;;;AAbA;AACA;AACA;AACA;AACA;;AACA;AAEA;AAIA;AACA;AAYO,IAAMA,mBAAmB,GAAG,2CAA5B,C,CAAwE;;;AAExE,IAAMC,uBAAuB,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAhC;;;SAEeC,wB;;;AA4BtB;AACA;AACA;AACA;;;;4GA/BO,iBAAyCC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCC,UAAGC,OAAH,CAAWC,IAAX,CAAgBH,MAAM,CAACI,GAAP,EAAhB,CADD;;AAAA;AAECC,YAAAA,IAFD,GAEQJ,UAAGK,GAAH,CAAON,MAAP,EAAeO,EAAE,CAACC,MAAH,CAAU,eAAV,CAAf,EAA2C,IAA3C,EAAiDR,MAAM,CAACI,GAAP,EAAjD,CAFR;;AAAA,gBAGAC,IAHA;AAAA;AAAA;AAAA;;AAIHI,YAAAA,OAAO,CAACC,GAAR,gBAAoBV,MAApB;AAJG,6CAKI,IALJ;;AAAA;AAOCW,YAAAA,iBAPD,GAO+B,EAP/B;AAQLN,YAAAA,IAAI,CAACO,QAAL,CAAcC,OAAd,CAAsB,UAAAC,IAAI,EAAI;AAC5B,kBAAMC,IAAI,GAAGd,UAAGK,GAAH,CAAOQ,IAAP,EAAoBP,EAAE,CAACS,KAAH,CAAS,UAAT,CAApB,EAA0C,IAA1C,EAAiDF,IAAD,CAAoBV,GAApB,EAAhD,CAAb;;AACA,kBAAI,CAACW,IAAL,EAAW;AACTN,gBAAAA,OAAO,CAACQ,IAAR,CAAa,gDAAb;AACA;AACD;;AACD,kBAAI,CAACF,IAAI,CAACG,KAAL,CAAWC,UAAX,CAAsBtB,mBAAtB,CAAL,EAAiD;AAC/CY,gBAAAA,OAAO,CAACW,KAAR,0CAAgDL,IAAI,CAACG,KAArD,kCAAkFrB,mBAAlF;AACA;AACD;;AACD,kBAAMwB,IAAI,GAAGN,IAAI,CAACG,KAAL,CAAWI,KAAX,CAAiBzB,mBAAmB,CAAC0B,MAArC,CAAb;AACAZ,cAAAA,iBAAiB,CAACa,IAAlB,CAAuBH,IAAvB;AACD,aAZD;;AARK,kBAsBDV,iBAAiB,CAACY,MAAlB,GAA2B,CAtB1B;AAAA;AAAA;AAAA;;AAuBHd,YAAAA,OAAO,CAACC,GAAR,mDAAsDC,iBAAiB,CAACc,IAAlB,CAAuB,GAAvB,CAAtD;AAvBG,6CAwBId,iBAxBJ;;AAAA;AAAA,6CA0BE,IA1BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAgCee,qB;;;AAkBtB;AACA;AACA;AACA;;;;yGArBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEYC,aAAMC,WAAN,EAFZ;;AAAA;AAECC,YAAAA,EAFD;;AAAA,iBAGDA,EAHC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAI8B9B,wBAAwB,CAAC8B,EAAD,CAJtD;;AAAA;AAIGC,YAAAA,kBAJH;;AAAA,iBAKCA,kBALD;AAAA;AAAA;AAAA;;AAAA,8CAK4BA,kBAL5B;;AAAA;AAAA,kBAOD,OAAOC,SAAP,KAAqB,WAPpB;AAAA;AAAA;AAAA;;AAAA,iBAQCA,SAAS,CAACC,SARX;AAAA;AAAA;AAAA;;AAAA,8CASMD,SAAS,CAACC,SAAV,CAAoBC,GAApB,CAAwB,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAJ;AAAA,aAAhC,CATN;;AAAA;AAAA,iBAWCJ,SAAS,CAACK,QAXX;AAAA;AAAA;AAAA;;AAAA,8CAYM,CAACL,SAAS,CAACK,QAAV,CAAmBD,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAAD,CAZN;;AAAA;AAAA,8CAeErC,uBAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBA,SAASuC,gBAAT,CAA2BC,QAA3B,EAAqCC,aAArC,EAAoD;AACzD,MAAMC,IAAI,GAAG,EAAb;AACAF,EAAAA,QAAQ,CAACzB,OAAT,CAAiB,UAAA4B,OAAO,EAAI;AAAE;AAC5B,QAAMC,GAAG,GAAGD,OAAO,CAACE,OAAR,CAAgBzB,KAA5B;AACAsB,IAAAA,IAAI,CAACE,GAAD,CAAJ,GAAYF,IAAI,CAACE,GAAD,CAAJ,IAAa,EAAzB;AACAF,IAAAA,IAAI,CAACE,GAAD,CAAJ,CAAUlB,IAAV,CAAeiB,OAAf;AACD,GAJD;AAMA,MAAMG,cAAc,GAAGL,aAAa,IAAIzC,uBAAxC;AACA8C,EAAAA,cAAc,CAACC,OAAf,GATyD,CAShC;;AAEzB,MAAMC,OAAO,GAAI,EAAjB;;AACA,OAAK,IAAMC,CAAX,IAAgBP,IAAhB,EAAsB;AAAE;AACtB,QAAMF,SAAQ,GAAGE,IAAI,CAACO,CAAD,CAArB;;AACA,QAAMC,MAAM,GAAGV,SAAQ,CAACL,GAAT,CAAa,UAAAQ,OAAO,EAAI;AACrC,aAAO,CAACG,cAAc,CAACK,OAAf,CAAuBR,OAAO,CAACS,IAAR,CAAa,UAAb,CAAvB,CAAD,EAAmDT,OAAnD,CAAP;AACD,KAFc,CAAf;;AAGAO,IAAAA,MAAM,CAACG,IAAP,GALoB,CAKN;;AACdH,IAAAA,MAAM,CAACH,OAAP,GANoB,CAMH;;AACjBC,IAAAA,OAAO,CAACtB,IAAR,CAAcwB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAd;AACD,GApBwD,CAoBvD;;;AACFI,EAAAA,KAAK,CAAC1C,GAAN,gCAAkC4B,QAAQ,CAACf,MAA3C,iBAAwDuB,OAAO,CAACvB,MAAhE;AACA,SAAOuB,OAAP;AACD","sourcesContent":["/* Logic to access public data stores\n*\n* including filtering resut by natural language etc\n* See https://solidos.solidcommunity.net/public/2021/01%20Building%20Solid%20Apps%20which%20use%20Public%20Data.html\n*/\n/* eslint-disable no-console */\nimport * as debug from '../../../debug'\n// import * as logic from '../index'\nimport { authn } from '../../../authn/index'\nimport * as ns from '../../../ns'\nimport { Collection, NamedNode, Node } from 'rdflib'\n// import { Binding } from '../widgets/forms/autocomplete/publicData'\n// import { nativeNameForLanguageCode, englishNameForLanguageCode } from './nativeNameForLanguageCode'\nimport { kb } from '../../../logic'\n\n// const { currentUser } = logic.authn\n\nexport interface Binding {\n  subject: Node;\n  name?: Node\n  location?: Node\n  coordinates?: Node\n}\n\nexport const languageCodeURIBase = 'https://www.w3.org/ns/iana/language-code/' /// @@ unsupported on the web (2021)\n\nexport const defaultPreferedLangages = ['en', 'fr', 'de', 'it']\n\nexport async function getPreferredLanagugesFor (person: NamedNode) {\n  await kb.fetcher.load(person.doc())\n  const list = kb.any(person, ns.schema('knowsLanguage'), null, person.doc()) as Collection | undefined\n  if (!list) {\n    console.log(`User ${person} has not set their languages in their profile.`)\n    return null // differnet from []\n  }\n  const languageCodeArray: string[] = []\n  list.elements.forEach(item => {\n    const lang = kb.any(item as any, ns.solid('publicId'), null, (item as NamedNode).doc())\n    if (!lang) {\n      console.warn('getPreferredLanguages: No publiID of language.')\n      return\n    }\n    if (!lang.value.startsWith(languageCodeURIBase)) {\n      console.error(`What should be a language code ${lang.value} does not start with ${languageCodeURIBase}`)\n      return\n    }\n    const code = lang.value.slice(languageCodeURIBase.length)\n    languageCodeArray.push(code)\n  })\n\n  if (languageCodeArray.length > 0) {\n    console.log(`     User knows languages with codes: \"${languageCodeArray.join(',')}\"`)\n    return languageCodeArray\n  }\n  return null\n}\n/* Get the preferred langauges for the user\n *\n *  Either from solid preferences or browser preferences or default\n */\nexport async function getPreferredLanguages () {\n  // In future:  cache in the login session for speed, but get from profile and private prefs\n  const me = await authn.currentUser() as NamedNode\n  if (me) { // If logged in\n    const solidLanguagePrefs = await getPreferredLanagugesFor(me)\n    if (solidLanguagePrefs) return solidLanguagePrefs\n  }\n  if (typeof navigator !== 'undefined') { // use browser settings\n    if (navigator.languages) {\n      return navigator.languages.map(longForm => longForm.split('-')[0])\n    }\n    if (navigator.language) {\n      return [navigator.language.split('-')[0]]\n    }\n  }\n  return defaultPreferedLangages // @@ or null?\n}\n\n/* From an array of bindings with a names for each row,\n * remove dupliacte names for the same thing, leaving the user's\n * preferred language version\n*/\n\nexport function filterByLanguage (bindings, languagePrefs) {\n  const uris = {}\n  bindings.forEach(binding => { // Organize names by their subject\n    const uri = binding.subject.value\n    uris[uri] = uris[uri] || []\n    uris[uri].push(binding)\n  })\n\n  const languagePrefs2 = languagePrefs || defaultPreferedLangages\n  languagePrefs2.reverse() // prefered last\n\n  const slimmed = ([] as Array<Binding>)\n  for (const u in uris) { // needs hasOwnProperty ?\n    const bindings = uris[u]\n    const sortMe = bindings.map(binding => {\n      return [languagePrefs2.indexOf(binding.name['xml:lang']), binding]\n    })\n    sortMe.sort() // best at th ebottom\n    sortMe.reverse() // best at the top\n    slimmed.push((sortMe[0][1] as any))\n  } // map u\n  debug.log(` Filter by language: ${bindings.length} -> ${slimmed.length}`)\n  return slimmed\n}\n"],"file":"language.js"}