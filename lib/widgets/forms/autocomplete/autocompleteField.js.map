{"version":3,"sources":["../../../../src/widgets/forms/autocomplete/autocompleteField.ts"],"names":["autocompleteField","dom","container","already","subject","form","doc","callbackFunction","addOneIdAndRefresh","result","name","Error","oldValue","kb","the","property","oldName","any","labelProperty","equals","sameTerm","console","log","deletables","statementsMatching","concat","map","st","toNT","insertables","length","updater","updateMany","box","appendChild","widgets","errorMessageBlock","deleteOne","e2","NamedNode","store","formDoc","createElement","lhs","setAttribute","rhs","ns","ui","schema","dataSource","queryParams","label","anyJS","logo","targetClass","objectURIBase","undefined","endpoint","searchByNameQuery","insitituteDetailsQuery","searchByNameURI","suppressEmptyUneditable","editable","uri","autocompleteOptions","permanent","size","obj","currentObject","currentName","style","display","fieldLabel","barOptions","dbLookup","then","control","err"],"mappings":"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","sourcesContent":["/* Form field for doing autocompleete\n */\nimport * as ns from '../../../ns'\nimport { store } from '../../../logic'\nimport * as widgets from '../../../widgets'\nimport { renderAutocompleteControl } from './autocompleteBar'\nimport { QueryParameters } from './publicData'\nimport { NamedNode, BlankNode, Literal, Variable, st } from 'rdflib'\nimport { AutocompleteOptions } from './autocompletePicker'\n/**\n  * Render a autocomplete form field\n  *\n  * Teh autocomplete form searches for an iobject in a definitive public database,\n  * and allows the user to search for it by name, displaying a list of objects whose names match\n  * the input to date, and letting  the user either click on one of the list,\n  * or just go on untill there is only one.  The process then returns two values,\n  * the URiI of the object and its name.\n  *\n  * @param dom The HTML Document object aka Document Object Model\n  * @param container  If present, the created widget will be appended to this\n  * @param already A hash table of (form, subject) kept to prevent recursive forms looping\n  * @param subject The thing about which the form displays/edits data\n  * @param form The form or field to be rendered\n  * @param doc The web document in which the data is\n  * @param callbackFunction Called when data is changed so other parts can be refreshed.\n  *\n  * Form properties:\n  * @param ui:property  The property to store the object itself\n  * @param ui:labelProperty The property used to store the name of the object\n  * @param ui:category The class of objects to be searched, if fixed (else dep on class of subject)\n  *\n  * @returns The HTML widget created\n */\n/* eslint-disable no-console */\n// eslint-disable-next-line complexity\nexport function autocompleteField (\n  dom: HTMLDocument,\n  container: HTMLElement | undefined,\n  already,\n  subject: NamedNode | BlankNode | Variable,\n  form: NamedNode,\n  doc: NamedNode | undefined,\n  callbackFunction: (_ok: boolean, _errorMessage: string) => void\n): HTMLElement {\n  async function addOneIdAndRefresh (result:NamedNode | Literal, name: Literal) {\n    if (!name) {\n      throw new Error('autocompleteField:  No name set.')\n    }\n    const oldValue = kb.the(subject, property as any, null, doc)\n    if (oldValue) {\n      const oldName = kb.any(oldValue as any, labelProperty as any, null, doc)\n      if (oldValue.equals(result) && oldName && oldName.sameTerm(name)) {\n        console.log('No change: same values.')\n        return\n      }\n    }\n    const deletables = oldValue\n      ? kb.statementsMatching(subject, property as any, oldValue, doc)\n        .concat(kb.statementsMatching(oldValue as any, labelProperty as any, null, doc))\n      : []\n    console.log('autocompleteField Deletables ' + deletables.map(st => st.toNT()))\n    const insertables = [st(subject, property as any, result, doc),\n      st(result as any, labelProperty as any, name, doc)] // @@ track the language of the  name too!\n    console.log(`AC form: ${deletables.length} to delete and ${insertables.length} to insert`)\n    try {\n      await kb.updater.updateMany(deletables, insertables)\n    } catch (err) {\n      callbackFunction(false, err)\n      box.appendChild(widgets.errorMessageBlock(dom, 'Autocomplete form data update error:' + err))\n      return\n    }\n    callbackFunction(true, '')\n  }\n\n  async function deleteOne (result:NamedNode | Literal, name: Literal) {\n    const oldValue = kb.the(subject, property as any, null, doc)\n    if (!oldValue) {\n      callbackFunction(false, 'NO data to elete')\n      box.appendChild(widgets.errorMessageBlock(dom, 'Autocomplet delete: no old data!'))\n      return\n    }\n    // const oldName = kb.any(oldValue as any, labelProperty as any, null, doc)\n    const deletables = kb.statementsMatching(subject, property as any, oldValue, doc)\n      .concat(kb.statementsMatching(oldValue as any, labelProperty as any, null, doc))\n    console.log('autocompleteField Deletables ' + deletables.map(st => st.toNT()))\n    const insertables = []\n    console.log(`AC form delete: ${deletables.length} to delete and ${insertables.length} to insert`)\n    try {\n      await kb.updater.updateMany(deletables, insertables)\n    } catch (err) {\n      const e2 = new Error('Autocomplete form data delete error:' + err)\n      callbackFunction(false, err)\n      box.appendChild(widgets.errorMessageBlock(dom, e2))\n      return\n    }\n    callbackFunction(true, '') // changed\n  }\n\n  if (!(subject instanceof NamedNode)) {\n    throw new Error('Sorry this field only works on NamedNode subjects (for editable)')\n  }\n  const kb = store\n  const formDoc = form.doc ? form.doc() : null // @@ if blank no way to know\n\n  const box = dom.createElement('tr')\n  if (container) container.appendChild(box)\n  const lhs = dom.createElement('td')\n  lhs.setAttribute('class', 'formFieldName')\n  lhs.setAttribute('style', '  vertical-align: middle;')\n  box.appendChild(lhs)\n  const rhs = dom.createElement('td')\n  rhs.setAttribute('class', 'formFieldValue')\n  box.appendChild(rhs)\n\n  const property = kb.any(form, ns.ui('property'))\n  if (!property) {\n    return box.appendChild(\n      widgets.errorMessageBlock(dom, 'Error: No property given for autocomplete field: ' + form)\n    )\n  }\n  const labelProperty = kb.any(form, ns.ui('labelProperty')) || ns.schema('name')\n\n  // Parse the data source into query options\n\n  const dataSource = kb.any(form, ns.ui('dataSource')) as NamedNode | undefined\n  if (!dataSource) {\n    return box.appendChild(\n      widgets.errorMessageBlock(dom, 'Error: No data source given for autocomplete field: ' + form)\n    )\n  }\n  const queryParams:QueryParameters = {\n    // targetClass: kb.any(dataSource, ns.ui('targetClass'), null, dataSource.doc()) as NamedNode | undefined,\n    label: kb.anyJS(dataSource, ns.schema('name'), null, dataSource.doc()),\n    logo: (kb.any(dataSource, ns.schema('logo'), null, dataSource.doc())) as NamedNode | undefined\n  }\n\n  // @@ Should we pass the target class in from the data source definition or use a current type of the subject\n  const targetClass = (kb.any(form, ns.ui('targetClass'), null, form.doc()) || // class in form takes pecedence\n      kb.any(dataSource, ns.ui('targetClass'), null, dataSource.doc())) as NamedNode | undefined\n  if (targetClass) {\n    queryParams.targetClass = targetClass\n  }\n\n  queryParams.objectURIBase = (kb.any(dataSource, ns.ui('objectURIBase'), null, dataSource.doc()) || undefined) as NamedNode | undefined\n\n  /*\n  if (!queryParams.targetClass) {\n    const klass = kb.any(subject, ns.rdf('type')) as NamedNode | undefined\n    // @@ be more selective of which class if many\n    // @@ todo: Take ALL classes,  and compare them with those the data source knows about\n    // with translation where necessary.  Find most specific of the classes for the search.\n    if (!klass) throw new Error('Autocomplete: No class specified or is current type of' + subject)\n    queryParams.targetClass = klass\n  }\n  */\n  const endpoint = kb.anyJS(dataSource, ns.ui('endpoint'), null, dataSource.doc()) as string | undefined\n  if (endpoint) { // SPARQL\n    queryParams.endpoint = endpoint\n\n    queryParams.searchByNameQuery = kb.anyJS(dataSource, ns.ui('searchByNameQuery'), null, dataSource.doc())\n    if (!queryParams.searchByNameQuery) {\n      return box.appendChild(\n        widgets.errorMessageBlock(dom, 'Error: No searchByNameQuery given for endpoint data Source: ' + form))\n    }\n    queryParams.insitituteDetailsQuery = kb.anyJS(dataSource, ns.ui('insitituteDetailsQuery'), null, dataSource.doc())\n  } else {\n    // return box.appendChild(\n    //  widgets.errorMessageBlock(dom, 'Error: No SPARQL endpoint given for autocomplete field: ' + form))\n    const searchByNameURI = kb.anyJS(dataSource, ns.ui('searchByNameURI'))\n    if (!searchByNameURI) {\n      return box.appendChild(\n        widgets.errorMessageBlock(dom, 'Error: No searchByNameURI OR sparql endpoint given for dataSource: ' + dataSource)\n      )\n    }\n    queryParams.searchByNameURI = searchByNameURI\n  }\n  // It can be cleaner to just remove empty fields if you can't edit them anyway\n  const suppressEmptyUneditable = kb.anyJS(form, ns.ui('suppressEmptyUneditable'), null, formDoc)\n  const editable = kb.updater.editable((doc as NamedNode).uri)\n\n  const autocompleteOptions:AutocompleteOptions = { // cancelButton?: HTMLElement,\n    permanent: true,\n    targetClass: queryParams.targetClass, // @@ simplify?\n    queryParams\n  }\n\n  autocompleteOptions.size = kb.anyJS(form, ns.ui('size'), null, formDoc) || undefined\n\n  let obj = kb.any(subject, property as any, undefined, doc)\n  if (!obj) {\n    obj = kb.any(form, ns.ui('default'))\n    if (obj) {\n      autocompleteOptions.currentObject = obj as NamedNode\n      autocompleteOptions.currentName = kb.any(autocompleteOptions.currentObject, labelProperty, null, doc) as Literal\n    } else { // No data or default. Should we suprress the whole field?\n      if (suppressEmptyUneditable && !editable) {\n        box.style.display = 'none' // clutter removal\n        return box\n      }\n    }\n  } else { // get object and name from target data:\n    autocompleteOptions.currentObject = obj as NamedNode\n    autocompleteOptions.currentName = kb.any(autocompleteOptions.currentObject, labelProperty, null, doc) as Literal\n  }\n\n  lhs.appendChild(widgets.fieldLabel(dom, property as any, form))\n\n  const barOptions = {\n    editable: doc && doc.uri && kb.updater.editable(doc.uri, kb),\n    // permanent: true,\n    dbLookup: true\n  }\n  renderAutocompleteControl(dom, subject as NamedNode, barOptions, autocompleteOptions, addOneIdAndRefresh, deleteOne).then((control) => {\n    rhs.appendChild(control)\n  }, (err) => {\n    rhs.appendChild(widgets.errorMessageBlock(dom, `Error rendering autocomplete${form}: ${err}`))\n  })\n\n  return box\n}\n\n// ends\n"],"file":"autocompleteField.js"}