{"version":3,"file":"publicData.js","names":["_rdflib","require","_solidLogic","debug","_interopRequireWildcard","ns","_language","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","AUTOCOMPLETE_LIMIT","exports","subjectRegexp","wikidataClasses","Corporation","EducationalOrganization","GovernmentOrganization","MedicalOrganization","MusicGroup","NGO","Occupation","Project","ResearchOrganization","SportsOrganization","instituteDetailsWikidataQuery","fetcherOptionsJsonPublicData","credentials","headers","Headers","Accept","escoParameters","label","logo","store","sym","searchByNameURI","dbpediaParameters","searchByNameQuery","endpoint","dbPediaTypeMap","AcademicInsitution","wikidataOutgoingClassMap","Enterprise","Business","CharitableOrganization","Insitute","wikidataParameters","limit","insitituteDetailsQuery","wikidataIncomingClassMap","schema","variableNameToPredicateMap","targetClass","rdf","sealImage","shortName","foaf","subsidiary","city","vcard","state","country","homepage","lat","bindingToTerm","item","typ","type","toLowerCase","value","Literal","Error","concat","loadFromBindings","kb","solidSubject","bindings","doc","predMap","arguments","length","undefined","results","log","forEach","binding","result","combined","JSON","stringify","Set","add","_loop","values","parse","language","datatype","warn","regexp","match","exec","float","xsd","latitude","longitude","pred","ESCOResultToBindings","json","_embedded","map","name","title","uri","subject","queryESCODataByName","_x","_x2","_x3","_queryESCODataByName","apply","_asyncToGenerator2","_regenerator","mark","_callee","filter","theClass","queryTarget","_store$fetcher","queryURI","response","text","wrap","_callee$","_context","prev","next","replace","toNT","fetcher","webOperation","sent","responseText","slice","abrupt","stop","fixWikidataJSON","str","syntaxProblem","indexOf","goodness","lastIndexOf","queryPublicDataByName","_x4","_x5","_x6","_x7","_queryPublicDataByName","_callee2","languages","substituteStrings","languagePrefs","sparql","_store$fetcher2","text2","_callee2$","_context2","_substituteStrings","template","u1","getPreferredLanguages","t0","defaultPreferredLanguages","queryPublicDataSelect","t1","status","alert","_x8","_x9","_queryPublicDataSelect","_callee3","_store$fetcher3","myUrlWithParams","options","_callee3$","_context3","URL","searchParams","append","href","queryPublicDataConstruct","_x10","_x11","_x12","_queryPublicDataConstruct","_callee4","pubicId","_store$fetcher4","report","_callee4$","_context4","loadPublicDataThing","_x13","_x14","_x15","_loadPublicDataThing","_callee5","publicDataID","iDToFetch","_callee5$","_context5","startsWith","getDbpediaDetails","getWikidataDetails","load","_x16","_x17","_x18","_getWikidataDetails","_callee6","subjRegexp","_callee6$","_context6","getWikidataDetailsOld","_x19","_x20","_x21","_getWikidataDetailsOld","_callee7","_callee7$","_context7","getWikidataLocation","_x22","_x23","_x24","_getWikidataLocation","_callee8","_callee8$","_context8","_x25","_x26","_x27","_getDbpediaDetails","_callee9","_callee9$","_context9"],"sources":["../../../../src/widgets/forms/autocomplete/publicData.ts"],"sourcesContent":["/* Logic to access public data stores\n*\n* including filtering resut by natural language etc\n* See https://solidos.solidcommunity.net/public/2021/01%20Building%20Solid%20Apps%20which%20use%20Public%20Data.html\n*/\n/* eslint-disable no-console */\nimport { Literal, NamedNode, parse } from 'rdflib'\nimport { store } from 'solid-logic'\nimport * as debug from '../../../debug'\nimport * as ns from '../../../ns'\nimport { defaultPreferredLanguages, getPreferredLanguages } from './language'\n\nexport const AUTOCOMPLETE_LIMIT = 200 // How many to get from server\n// With 3000 we could exceed the wikidata timeout\n\nconst subjectRegexp = /\\$\\(subject\\)/g\n\ninterface Term {\n  type: string;\n  value: string\n}\n\nexport interface Binding {\n  subject: Term;\n  name?: Term\n  location?: Term\n  coordinates?: Term\n}\n\ntype Bindings = Binding[]\n\nexport type QueryParameters =\n{ label: string;\n  limit?: number;\n  logo?: NamedNode;\n  searchByNameQuery?: string;\n  searchByNameURI?: string;\n  insitituteDetailsQuery?: string;\n  endpoint?: string;\n  objectURIBase?: NamedNode;\n  targetClass?: NamedNode,\n}\n\n// Schema.org seems to suggest NGOs are non-profit and Corporaions are for-profit\n// but doesn't have explicit classes\nexport const wikidataClasses = {\n  Corporation: 'http://www.wikidata.org/entity/Q6881511', // Enterprise is for-profit\n  EducationalOrganization: 'http://www.wikidata.org/entity/Q178706', // insitution\n  GovernmentOrganization: 'http://www.wikidata.org/entity/Q327333', // government agency\n  MedicalOrganization: 'http://www.wikidata.org/entity/Q4287745',\n  MusicGroup: 'http://www.wikidata.org/entity/Q32178211', // music organization\n  NGO: 'http://www.wikidata.org/entity/Q163740', // nonprofit organization @@\n  Occupation: 'http://www.wikidata.org/entity/Q28640', // Profession\n  // Organization: 'http://www.wikidata.org/entity/Q43229',\n  Project: 'http://www.wikidata.org/entity/Q170584',\n  ResearchOrganization: 'http://www.wikidata.org/entity/Q31855',\n  SportsOrganization: 'http://www.wikidata.org/entity/Q4438121'\n}\n\nexport const instituteDetailsWikidataQuery = `prefix vcard: <http://www.w3.org/2006/vcard/ns#>\nCONSTRUCT\n{  wd:Q49108 vcard:fn ?itemLabel.\nwd:Q49108 rdf:type ?klass. ?klass rdfs:label ?klassLabel; rdfs:comment ?klassDescription .\nwd:Q49108 schema:logo ?logo;\n   schema:image ?image;\n   schema:logo  ?sealImage;\n   schema:subOrganization  ?subsidiary .\n      ?subsidiary rdfs:label ?subsidiaryLabel .\n ?supersidiary schema:subOrganization wd:Q49108 .\n      ?supersidiary rdfs:label ?supersidiaryLabel .\n  wd:Q49108 schema:location ?location .\n     ?location  schema:elevation  ?elevation .\n     ?location  wdt:P131  ?region .  ?region rdfs:label ?regionLabel .\n     ?location wdt:P625 ?coordinates .\n     ?location  schema:country  ?country . ?country rdfs:label ?countryLabel .\n}\nWHERE\n{  optional {wd:Q49108 rdfs:label ?itemLabel} .\n  optional {wd:Q49108 wdt:P154 ?logo .}\n  optional {wd:Q49108 wdt:P31 ?klass .}\n  optional {wd:Q49108 wdt:P158  ?sealImage .}\n  optional {wd:Q49108 wdt:P18 ?image .}\n\n  optional { wd:Q49108       wdt:P355 ?subsidiary . }\n  optional { ?supersidiary   wdt:P355 wd:Q49108. }\n\n  optional { wd:Q49108 wdt:P276 ?location .\n\n    optional { ?location  schema:eleveation  ?elevation }\n    optional { ?location  wdt:P131  ?region }\n    optional { ?location wdt:P625 ?coordinates }\n    optional {  ?location  wdt:P17  ?country }\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\". }\n}`\n\nexport const fetcherOptionsJsonPublicData = {\n  credentials: 'omit' as 'include' | 'omit' | undefined, // try to avoid CORS problems. Data is public so no auth\n  headers: new Headers({ Accept: 'application/json' })\n}\n\nexport const escoParameters:QueryParameters = {\n  label: 'ESCO',\n  logo: store.sym('https://ec.europa.eu/esco/portal/static_resource2/images/logo/logo_en.gif'),\n  searchByNameURI: 'https://ec.europa.eu/esco/api/search?language=$(language)&type=occupation&text=$(name)'\n  // endpoint: undefined\n  // returnFormat: 'ESCO',\n  // targetClass: {}\n}\n\nexport const dbpediaParameters:QueryParameters = {\n  label: 'DBPedia',\n  logo: store.sym('https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/DBpediaLogo.svg/263px-DBpediaLogo.svg.png'),\n  searchByNameQuery: `select distinct ?subject, ?name where {\n    ?subject a $(targetClass); rdfs:label ?name\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit)`,\n  endpoint: 'https://dbpedia.org/sparql/'\n}\n\nexport const dbPediaTypeMap = { AcademicInsitution: 'http://umbel.org/umbel/rc/EducationalOrganization' }\n\nexport const wikidataOutgoingClassMap = {\n  AcademicInsitution: 'http://www.wikidata.org/entity/Q4671277',\n  Enterprise: 'http://www.wikidata.org/entity/Q6881511',\n  Business: 'http://www.wikidata.org/entity/Q4830453',\n  NGO: 'http://www.wikidata.org/entity/Q79913',\n  CharitableOrganization: 'http://www.wikidata.org/entity/Q708676',\n  Insitute: 'http://www.wikidata.org/entity/Q1664720'\n}\n\nexport const wikidataParameters = {\n  label: 'WikiData',\n  limit: 3000, // Need a high one as very many items, and many languages\n  logo: store.sym('https://www.wikimedia.org/static/images/project-logos/wikidatawiki.png'),\n  endpoint: 'https://query.wikidata.org/sparql',\n  searchByNameQuery: `SELECT ?subject ?name\n  WHERE {\n    ?klass wdt:P279* $(targetClass) .\n    ?subject wdt:P31 ?klass .\n    ?subject rdfs:label ?name.\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit) `, // was SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n\n  insitituteDetailsQuery: `CONSTRUCT\n{  wd:Q49108 schema:name ?itemLabel;\n             schema:logo ?logo;\n              schema:logo  ?sealImage;\n             schema:subOrganization  ?subsidiary .\n                 ?subsidiary schema:name ?subsidiaryLabel .\n}\nWHERE\n{\n   wd:Q49108 # rdfs:label ?itemLabel ;\n             wdt:P154 ?logo;\n              wdt:P158  ?sealImage ;\n             wdt:P355  ?subsidiary .\n          #  ?subsidiary rdfs:label ?subsidiaryLabel .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE], fr\". }\n}`\n}\n\nexport const wikidataIncomingClassMap = {\n  'http://www.wikidata.org/entity/Q15936437': ns.schema('CollegeOrUniversity'), // research university\n  'http://www.wikidata.org/entity/Q1664720': ns.schema('EducationalOrganization'), // insitute @@\n  'http://www.wikidata.org/entity/Q43229': ns.schema('Organization'), // research university\n  'http://www.wikidata.org/entity/Q3918': ns.schema('CollegeOrUniversity'), // university\n  'http://www.wikidata.org/entity/Q170584': ns.schema('Project'), // university\n  'http://www.wikidata.org/entity/Q327333': ns.schema('GovernmentOrganization'), // govt agency\n  'http://www.wikidata.org/entity/Q2221906': ns.schema('Place'), // geographic location\n  'http://www.wikidata.org/entity/Q167037': ns.schema('Corporation') // Corporation\n\n}\nexport const variableNameToPredicateMap = { // allow other mappings to be added in theory hence var\n  // wikidata:\n  targetClass: ns.rdf('type'),\n  // logo: ns.schema('logo'),\n  sealImage: ns.schema('logo'),\n  // image: ns.schema('image'),   defaults to shema\n  shortName: ns.foaf('nick'),\n  subsidiary: ns.schema('subOrganization'),\n  // dbpedia - :\n  city: ns.vcard('locality'),\n  state: ns.vcard('region'),\n  country: ns.vcard('country-name'),\n  homepage: ns.foaf('homepage'),\n  lat: ns.schema('latitude'),\n  long: ns.schema('longitude')\n}\n\nexport function bindingToTerm (item) {\n  const typ = item.type.toLowerCase()\n  if (typ === 'uri' || typ === 'iri') {\n    return store.sym(item.value)\n  } else if (typ === 'literal') {\n    if (item['xml:lang']) {\n      return new Literal(item.value, item['xml:lang'])\n    } else {\n      return new Literal(item.value)\n    }\n  } else {\n    throw new Error(`bindingToTerm: Unexpected type \"${item.type}\" in sparql binding}`)\n  }\n}\n\nexport function loadFromBindings (kb, solidSubject:NamedNode, bindings, doc, predMap = variableNameToPredicateMap) {\n  const results = {}\n  debug.log(`loadFromBindings:  subject: ${solidSubject}`)\n  debug.log(`                       doc: ${doc}`)\n  bindings.forEach(binding => {\n    for (const key in binding) {\n      const result = binding[key]\n      const combined = JSON.stringify(result) // ( result.type, result.value )\n      results[key] = results[key] || new Set()\n      results[key].add(combined) // remove duplicates\n    }\n  })\n  for (const key in results) {\n    const values = results[key]\n    debug.log(`    results ${key} -> ${values}`)\n    values.forEach(combined => {\n      const result = JSON.parse(combined)\n      const { type, value } = result\n      let obj\n      if (type === 'uri') {\n        obj = kb.sym(value)\n      } else if (type === 'literal') {\n        obj = new Literal(value, result.language, result.datatype)\n      } else {\n        throw new Error(`loadFromBindings:  unexpected type: ${type}`)\n      }\n      if (key === 'type') {\n        if (wikidataIncomingClassMap[value]) {\n          obj = wikidataIncomingClassMap[value]\n        } else {\n          debug.warn('Unmapped Wikidata Class: ' + value)\n        }\n      } else if (key === 'coordinates') {\n        // const latlong = value // Like 'Point(-71.106111111 42.375)'\n        debug.log('         @@@ hey a point: ' + value)\n        // const regexp = /.*\\(([-0-9\\.-]*) ([-0-9\\.-]*)\\)/\n        const regexp = /.*\\(([-0-9.-]*) ([-0-9.-]*)\\)/\n        const match = regexp.exec(value)\n        if (match) {\n          const float = ns.xsd('float')\n          const latitude = new Literal(match[1], null, float)\n          const longitude = new Literal(match[2], null, float)\n          kb.add(solidSubject, ns.schema('longitude'), longitude, doc)\n          kb.add(solidSubject, ns.schema('latitude'), latitude, doc)\n        } else {\n          debug.log('Bad coordinates syntax: ' + value)\n        }\n      } else {\n        const pred = predMap[key] || ns.schema(key) // fallback to just using schema.org\n        kb.add(solidSubject, pred, obj, doc) // @@ deal with non-string and objects\n        debug.log(`  public data ${pred} ${obj}.`)\n      }\n    })\n  }\n}\n\n/* ESCO sopecific\n*/\nexport function ESCOResultToBindings (json: Object): Bindings {\n  const results = (json as any)._embedded.results // Array\n  const bindings = results.map(result => {\n    const name = result.title\n    const uri = result.uri // like http://data.europa.eu/esco/occupation/57af9090-55b4-4911-b2d0-86db01c00b02\n    return { name: { value: name, type: 'literal' }, subject: { type: 'IRI', value: uri } } // simulate SPARQL bindings\n  })\n  return bindings\n}\n\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryESCODataByName (filter: string, theClass:NamedNode, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.searchByNameURI) throw new Error('Missing queryTarget.searchByNameURI on queryESCODataByName')\n  const limit = queryTarget.limit || AUTOCOMPLETE_LIMIT\n  const queryURI = queryTarget.searchByNameURI\n    .replace('$(name)', filter)\n    .replace('$(limit)', '' + limit)\n    .replace('$(targetClass)', theClass.toNT())\n  debug.log('Querying ESCO data - uri: ' + queryURI)\n\n  const response = await store.fetcher?.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n  const text = response?.responseText || ''\n  debug.log('    Query result  text' + text.slice(0, 500) + '...')\n  if (text.length === 0) throw new Error('Wot no text back from ESCO query ' + queryURI)\n  const json = JSON.parse(text)\n  // console.log('Whole JSON return object', json)\n  debug.log('    ESCO Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n  return ESCOResultToBindings(json)\n}\n\n/* Cope ithe syntax probelm in wikidata timeout responses\n*\n* Wikidata bug: https://phabricator.wikimedia.org/T283962\n* This will not be needed whn that  WDQS bug fixed.\n* This is aptured in https://github.com/solidos/solid-ui/issues/403\n*/\nfunction fixWikidataJSON (str) {\n  const syntaxProblem = str.indexOf('SPARQL-QUERY')\n  if (syntaxProblem < 0) return str\n  // console.log('@@ fixWikidataJSON FIXING')\n  debug.warn('  ### Fixing JSON with wikidata error code injection ' + str.slice(syntaxProblem, syntaxProblem + 200))\n  const goodness = str.lastIndexOf('}, {')\n  return str.slice(0, goodness) + ' } ] } } ' // Close binding, array, bindings, results, root object\n}\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryPublicDataByName (\n  filter: string,\n  theClass:NamedNode,\n  languages: Array<string>,\n  queryTarget: QueryParameters): Promise<Bindings> {\n  function substituteStrings (template: string):string {\n    const limit = queryTarget.limit || AUTOCOMPLETE_LIMIT\n    const u1 = template.replace('$(name)', filter)\n      .replace('$(limit)', '' + limit)\n      .replace('$(language)', language)\n    return u1.replace('$(targetClass)', theClass.toNT())\n  }\n\n  if (!theClass) {\n    throw new Error('queryPublicDataByName: No class provided')\n  }\n\n  const languagePrefs = await getPreferredLanguages() || defaultPreferredLanguages\n  const language = languagePrefs[0] || 'en'\n  if (queryTarget.searchByNameQuery) {\n    const sparql = substituteStrings(queryTarget.searchByNameQuery)\n    debug.log('Querying public data - sparql: ' + sparql)\n    return queryPublicDataSelect(sparql, queryTarget)\n  } else if (queryTarget.searchByNameURI) { // not sparql - random API\n    const queryURI = substituteStrings(queryTarget.searchByNameURI)\n    let response\n    try {\n      response = await store.fetcher?.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n    } catch (err) {\n      throw new Error(`Exception when trying to fetch ${queryURI} \\n ${err}`)\n    }\n    const text = response.responseText || '' // ts\n    if (response.status !== 200) {\n      throw new Error(`HTTP error status ${response.status} trying to fetch ${queryURI} `)\n    }\n    debug.log('    Query result  text' + text.slice(0, 500) + '...')\n    if (text.length === 0) throw new Error('queryPublicDataByName: No text back from public data query ' + queryURI)\n    const text2 = fixWikidataJSON(text) // Kludge: strip of interrupting error message\n    const json = JSON.parse(text2)\n    debug.log('    API Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n    if ((json as any)._embedded) {\n      debug.log('      Looks like ESCO')\n      const bindings = ESCOResultToBindings(json)\n      return bindings\n    } else {\n      alert('Code me: unrecognized API return format')\n      throw new Error(`*** Need to add code to parse unrecognized API JSON return\\n${JSON.stringify(json, null, 4)}`)\n    }\n  } else {\n    throw new Error('Query source must have either rest API or SPARQL endpoint.')\n  }\n}\n\n/* Query a database using SPARQL SELECT\n*/\nexport async function queryPublicDataSelect (sparql: string, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataSelect')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataSelect uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'application/json')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS - as we know it is public\n    headers\n  }\n\n  const response = await store.fetcher?.webOperation('GET', queryURI, options)\n\n  const text = response?.responseText || ''\n  if (text.length === 0) throw new Error('No text back from query ' + queryURI)\n  const text2 = fixWikidataJSON(text)\n  const json = JSON.parse(text2)\n  debug.log('    Query result JSON' + JSON.stringify(json, null, 4).slice(0, 100) + '...')\n  const bindings = json.results.bindings\n  return bindings\n}\n\n/* Load from a database using SPARQL CONSTRUCT\n*/\nexport async function queryPublicDataConstruct (sparql: string, pubicId: NamedNode, queryTarget: QueryParameters): Promise<void> {\n  debug.log('queryPublicDataConstruct: sparql:', sparql)\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataConstruct')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataConstruct uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'text/turtle')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS // @tsc pain\n    headers // ({ Accept: 'text/turtle' } as Headers)\n  }\n  const response = await store.fetcher?.webOperation('GET', queryURI, options)\n  const text = response?.responseText || 'No response text?'\n  const report = text.length > 500 ? text.slice(0, 200) + ' ... ' + text.slice(-200) : text\n  debug.log('    queryPublicDataConstruct result text:' + report)\n  if (text.length === 0) throw new Error('queryPublicDataConstruct: No text back from construct query:' + queryURI)\n  parse(text, store, pubicId.uri, 'text/turtle')\n}\n\nexport async function loadPublicDataThing (kb, subject: NamedNode, publicDataID: NamedNode) {\n  if (publicDataID.uri.startsWith('https://dbpedia.org/resource/')) {\n    return getDbpediaDetails(kb, subject, publicDataID)\n  } else if (publicDataID.uri.match(/^https?:\\/\\/www\\.wikidata\\.org\\/entity\\/.*/)) {\n    // const QId = publicDataID.uri.split('/')[4]\n    // const dataURI = `http://www.wikidata.org/wiki/Special:EntityData/${QId}.ttl`\n    // In fact loading the data URI gives much too much irrelevant data, from wikidata, so we do a query.\n    await getWikidataDetails(kb, subject, publicDataID)\n    // await getWikidataLocation(kb, subject, publicDataID)  -- should get that in the details query now\n  } else {\n    const iDToFetch = publicDataID.uri.startsWith('http:')\n      ? kb.sym('https:' + publicDataID.uri.slice(5))\n      : publicDataID\n    const headers = new Headers()\n    headers.append('Accept', 'text/turtle')\n    return kb.fetcher.load(iDToFetch, {\n      credentials: 'omit' as 'include' | 'omit' | undefined,\n      headers\n    })\n  }\n}\n\nexport async function getWikidataDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const subjRegexp = /wd:Q49108/g\n  const sparql = instituteDetailsWikidataQuery.replace(subjRegexp, publicDataID.toNT())\n  await queryPublicDataConstruct(sparql, publicDataID, wikidataParameters)\n  debug.log('getWikidataDetails: loaded.', publicDataID)\n}\n\nexport async function getWikidataDetailsOld (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n  optional { $(subject)  wdt:P31  ?targetClass } # instance of\n  optional { $(subject)  wdt:P154  ?logo }\n  optional { $(subject)  wdt:P158  ?sealImage }\n# optional { $(subject)  wdt:P159  ?headquartersLocation }\n\noptional { $(subject)  wdt:P17  ?country }\noptional { $(subject)  wdt:P18  ?image }\noptional { $(subject)  wdt:P1813  ?shortName }\n\noptional { $(subject)  wdt:P355  ?subsidiary }\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`\n    .replace(subjectRegexp, publicDataID.toNT())\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // arg2 was solidSubject\n}\n\nexport async function getWikidataLocation (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n\n  $(subject) wdt:P276 ?location .\n\n  optional { ?location  wdt:P2044  ?elevation }\n  optional { ?location  wdt:P131  ?region }\n  optional { ?location wdt:P625 ?coordinates }\noptional {  ?location  wdt:P17  ?country }\n\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`.replace(subjectRegexp, publicDataID.toNT())\n  debug.log(' location query sparql:' + sparql)\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  debug.log(' location query bindings:', bindings)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // was solidSubject\n}\n\nexport async function getDbpediaDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n// Note below the string form of the named node with <> works in SPARQL\n  const sparql = `select distinct ?city, ?state, ?country, ?homepage, ?logo, ?lat, ?long,  WHERE {\n    OPTIONAL { <${publicDataID}> <http://dbpedia.org/ontology/city> ?city }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/state> ?state }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n    OPTIONAL { ${publicDataID} foaf:homepage ?homepage }\n    OPTIONAL { ${publicDataID} foaf:lat ?lat; foaf:long ?long }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n   }`\n  const bindings = await queryPublicDataSelect(sparql, dbpediaParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc())\n  debug.log('Finished getDbpediaDetails.')\n}\n"],"mappings":"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"}