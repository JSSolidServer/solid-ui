{"version":3,"sources":["../../../../src/widgets/forms/autocomplete/publicData.ts"],"names":["AUTOCOMPLETE_LIMIT","subjectRegexp","wikidataClasses","Corporation","EducationalOrganization","GovernmentOrganization","MedicalOrganization","MusicGroup","NGO","Occupation","Project","SportsOrganization","instituteDetailsWikidataQuery","fetcherOptionsJsonPublicData","credentials","headers","Headers","Accept","escoParameters","label","logo","kb","sym","searchByNameURI","dbpediaParameters","searchByNameQuery","endpoint","dbPediaTypeMap","AcademicInsitution","wikidataOutgoingClassMap","Enterprise","Business","CharitableOrganization","Insitute","wikidataParameters","insitituteDetailsQuery","wikidataIncomingClassMap","ns","schema","variableNameToPredicateMap","targetClass","rdf","sealImage","shortName","foaf","subsidiary","city","vcard","state","country","homepage","lat","bindingToTerm","item","typ","type","toLowerCase","value","Literal","Error","loadFromBindings","solidSubject","bindings","doc","predMap","results","debug","log","forEach","binding","key","result","combined","JSON","stringify","Set","add","values","parse","obj","language","datatype","warn","regexp","match","exec","float","xsd","latitude","longitude","pred","ESCOResultToBindings","json","_embedded","map","name","title","uri","subject","queryESCODataByName","filter","theClass","queryTarget","queryURI","replace","toNT","fetcher","webOperation","response","text","responseText","slice","length","console","queryPublicDataByName","languages","substituteStrings","template","u1","defaultPreferedLangages","languagePrefs","sparql","queryPublicDataSelect","alert","myUrlWithParams","URL","searchParams","append","href","options","queryPublicDataConstruct","pubicId","report","loadPublicDataThing","publicDataID","startsWith","getDbpediaDetails","getWikidataDetails","iDToFetch","load","subjRegexp","getWikidataDetailsOld","getWikidataLocation"],"mappings":"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","sourcesContent":["/* Logic to access public data stores\n*\n* including filtering resut by natural language etc\n* See https://solidos.solidcommunity.net/public/2021/01%20Building%20Solid%20Apps%20which%20use%20Public%20Data.html\n*/\n/* eslint-disable no-console */\nimport { NamedNode, Literal, parse } from 'rdflib'\nimport * as debug from '../../../debug'\nimport * as ns from '../../../ns'\nimport { kb } from '../../../logic'\n// import  * as logic from '../../../logic'\nimport { getPreferredLanguages, defaultPreferedLangages } from './language'\n\nexport const AUTOCOMPLETE_LIMIT = 200 // How many to get from server\n// With 3000 we could exceed the wikidata timeout\n\nconst subjectRegexp = /\\$\\(subject\\)/g\n\ninterface Term {\n  type: string;\n  value: string\n}\n\nexport interface Binding {\n  subject: Term;\n  name?: Term\n  location?: Term\n  coordinates?: Term\n}\n\ntype Bindings = Binding[]\n\nexport type QueryParameters =\n{ label: string;\n  logo?: NamedNode;\n  searchByNameQuery?: string;\n  searchByNameURI?: string;\n  insitituteDetailsQuery?: string;\n  endpoint?: string;\n  objectURIBase?: NamedNode;\n  targetClass?: NamedNode,\n}\n\n// Schema.org seems to suggest NGOs are non-profit and Corporaions are for-profit\n// but doesn't have explicit classes\nexport const wikidataClasses = {\n  Corporation: 'http://www.wikidata.org/entity/Q6881511', // Enterprise is for-profit\n  EducationalOrganization: 'http://www.wikidata.org/entity/Q178706', // insitution\n  GovernmentOrganization: 'http://www.wikidata.org/entity/Q327333', // government agency\n  MedicalOrganization: 'http://www.wikidata.org/entity/Q4287745',\n  MusicGroup: 'http://www.wikidata.org/entity/Q32178211', // music organization\n  NGO: 'http://www.wikidata.org/entity/Q163740', // nonprofit organization @@\n  Occupation: 'http://www.wikidata.org/entity/Q28640', // Profession\n  // Organization: 'http://www.wikidata.org/entity/Q43229',\n  Project: 'http://www.wikidata.org/entity/Q170584',\n  SportsOrganization: 'http://www.wikidata.org/entity/Q4438121'\n}\n\nexport const instituteDetailsWikidataQuery = `prefix vcard: <http://www.w3.org/2006/vcard/ns#>\nCONSTRUCT\n{  wd:Q49108 vcard:fn ?itemLabel.\nwd:Q49108 rdf:type ?klass. ?klass rdfs:label ?klassLabel; rdfs:comment ?klassDescription .\nwd:Q49108 schema:logo ?logo;\n   schema:image ?image;\n   schema:logo  ?sealImage;\n   schema:subOrganization  ?subsidiary .\n      ?subsidiary rdfs:label ?subsidiaryLabel .\n ?supersidiary schema:subOrganization wd:Q49108 .\n      ?supersidiary rdfs:label ?supersidiaryLabel .\n  wd:Q49108 schema:location ?location .\n     ?location  schema:elevation  ?elevation .\n     ?location  wdt:P131  ?region .  ?region rdfs:label ?regionLabel .\n     ?location wdt:P625 ?coordinates .\n     ?location  schema:country  ?country . ?country rdfs:label ?countryLabel .\n}\nWHERE\n{  optional {wd:Q49108 rdfs:label ?itemLabel} .\n  optional {wd:Q49108 wdt:P154 ?logo .}\n  optional {wd:Q49108 wdt:P31 ?klass .}\n  optional {wd:Q49108 wdt:P158  ?sealImage .}\n  optional {wd:Q49108 wdt:P18 ?image .}\n\n  optional { wd:Q49108       wdt:P355 ?subsidiary . }\n  optional { ?supersidiary   wdt:P355 wd:Q49108. }\n\n  optional { wd:Q49108 wdt:P276 ?location .\n\n    optional { ?location  schema:eleveation  ?elevation }\n    optional { ?location  wdt:P131  ?region }\n    optional { ?location wdt:P625 ?coordinates }\n    optional {  ?location  wdt:P17  ?country }\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\". }\n}`\n\nexport const fetcherOptionsJsonPublicData = {\n  credentials: 'omit' as 'include' | 'omit' | undefined, // try to avoid CORS problems. Data is public so no auth\n  headers: new Headers({ Accept: 'application/json' })\n}\n\nexport const escoParameters:QueryParameters = {\n  label: 'ESCO',\n  logo: kb.sym('https://ec.europa.eu/esco/portal/static_resource2/images/logo/logo_en.gif'),\n  searchByNameURI: 'https://ec.europa.eu/esco/api/search?language=$(language)&type=occupation&text=$(name)'\n  // endpoint: undefined\n  // returnFormat: 'ESCO',\n  // targetClass: {}\n}\n\nexport const dbpediaParameters:QueryParameters = {\n  label: 'DBPedia',\n  logo: kb.sym('https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/DBpediaLogo.svg/263px-DBpediaLogo.svg.png'),\n  searchByNameQuery: `select distinct ?subject, ?name where {\n    ?subject a $(targetClass); rdfs:label ?name\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit)`,\n  endpoint: 'https://dbpedia.org/sparql/'\n}\n\nexport const dbPediaTypeMap = { AcademicInsitution: 'http://umbel.org/umbel/rc/EducationalOrganization' }\n\nexport const wikidataOutgoingClassMap = {\n  AcademicInsitution: 'http://www.wikidata.org/entity/Q4671277',\n  Enterprise: 'http://www.wikidata.org/entity/Q6881511',\n  Business: 'http://www.wikidata.org/entity/Q4830453',\n  NGO: 'http://www.wikidata.org/entity/Q79913',\n  CharitableOrganization: 'http://www.wikidata.org/entity/Q708676',\n  Insitute: 'http://www.wikidata.org/entity/Q1664720'\n}\n\nexport const wikidataParameters = {\n  label: 'WikiData',\n  logo: kb.sym('https://www.wikimedia.org/static/images/project-logos/wikidatawiki.png'),\n  endpoint: 'https://query.wikidata.org/sparql',\n  searchByNameQuery: `SELECT ?subject ?name\n  WHERE {\n    ?klass wdt:P279* $(targetClass) .\n    ?subject wdt:P31 ?klass .\n    ?subject rdfs:label ?name.\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit) `, // was SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n\n  insitituteDetailsQuery: `CONSTRUCT\n{  wd:Q49108 schema:name ?itemLabel;\n             schema:logo ?logo;\n              schema:logo  ?sealImage;\n             schema:subOrganization  ?subsidiary .\n                 ?subsidiary schema:name ?subsidiaryLabel .\n}\nWHERE\n{\n   wd:Q49108 # rdfs:label ?itemLabel ;\n             wdt:P154 ?logo;\n              wdt:P158  ?sealImage ;\n             wdt:P355  ?subsidiary .\n          #  ?subsidiary rdfs:label ?subsidiaryLabel .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE], fr\". }\n}`\n}\n\nexport const wikidataIncomingClassMap = {\n  'http://www.wikidata.org/entity/Q15936437': ns.schema('CollegeOrUniversity'), // research university\n  'http://www.wikidata.org/entity/Q1664720': ns.schema('EducationalOrganization'), // insitute @@\n  'http://www.wikidata.org/entity/Q43229': ns.schema('Organization'), // research university\n  'http://www.wikidata.org/entity/Q3918': ns.schema('CollegeOrUniversity'), // university\n  'http://www.wikidata.org/entity/Q170584': ns.schema('Project'), // university\n  'http://www.wikidata.org/entity/Q327333': ns.schema('GovernmentOrganization'), // govt agency\n  'http://www.wikidata.org/entity/Q2221906': ns.schema('Place'), // geographic location\n  'http://www.wikidata.org/entity/Q167037': ns.schema('Corporation') // Corporation\n\n}\nexport const variableNameToPredicateMap = { // allow other mappings to be added in theory hence var\n  // wikidata:\n  targetClass: ns.rdf('type'),\n  // logo: ns.schema('logo'),\n  sealImage: ns.schema('logo'),\n  // image: ns.schema('image'),   defaults to shema\n  shortName: ns.foaf('nick'),\n  subsidiary: ns.schema('subOrganization'),\n  // dbpedia - :\n  city: ns.vcard('locality'),\n  state: ns.vcard('region'),\n  country: ns.vcard('country-name'),\n  homepage: ns.foaf('homepage'),\n  lat: ns.schema('latitude'),\n  long: ns.schema('longitude')\n}\n\nexport function bindingToTerm (item) {\n  const typ = item.type.toLowerCase()\n  if (typ === 'uri' || typ === 'iri') {\n    return kb.sym(item.value)\n  } else if (typ === 'literal') {\n    if (item['xml:lang']) {\n      return new Literal(item.value, item['xml:lang'])\n    } else {\n      return new Literal(item.value)\n    }\n  } else {\n    throw new Error(`bindingToTerm: Unexpected type \"${item.type}\" in sparql binding}`)\n  }\n}\n\nexport function loadFromBindings (kb, solidSubject:NamedNode, bindings, doc, predMap = variableNameToPredicateMap) {\n  const results = {}\n  debug.log(`loadFromBindings:  subject: ${solidSubject}`)\n  debug.log(`                       doc: ${doc}`)\n  bindings.forEach(binding => {\n    for (const key in binding) {\n      const result = binding[key]\n      const combined = JSON.stringify(result) // ( result.type, result.value )\n      results[key] = results[key] || new Set()\n      results[key].add(combined) // remove duplicates\n    }\n  })\n  for (const key in results) {\n    const values = results[key]\n    debug.log(`    results ${key} -> ${values}`)\n    values.forEach(combined => {\n      const result = JSON.parse(combined)\n      const { type, value } = result\n      let obj\n      if (type === 'uri') {\n        obj = kb.sym(value)\n      } else if (type === 'literal') {\n        obj = new Literal(value, result.language, result.datatype)\n      } else {\n        throw new Error(`loadFromBindings:  unexpected type: ${type}`)\n      }\n      if (key === 'type') {\n        if (wikidataIncomingClassMap[value]) {\n          obj = wikidataIncomingClassMap[value]\n        } else {\n          debug.warn('Unmapped Wikidata Class: ' + value)\n        }\n      } else if (key === 'coordinates') {\n        // const latlong = value // Like 'Point(-71.106111111 42.375)'\n        debug.log('         @@@ hey a point: ' + value)\n        // const regexp = /.*\\(([-0-9\\.-]*) ([-0-9\\.-]*)\\)/\n        const regexp = /.*\\(([-0-9.-]*) ([-0-9.-]*)\\)/\n        const match = regexp.exec(value)\n        if (match) {\n          const float = ns.xsd('float')\n          const latitude = new Literal(match[1], null, float)\n          const longitude = new Literal(match[2], null, float)\n          kb.add(solidSubject, ns.schema('longitude'), longitude, doc)\n          kb.add(solidSubject, ns.schema('latitude'), latitude, doc)\n        } else {\n          debug.log('Bad coordinates syntax: ' + value)\n        }\n      } else {\n        const pred = predMap[key] || ns.schema(key) // fallback to just using schema.org\n        kb.add(solidSubject, pred, obj, doc) // @@ deal with non-string and objects\n        debug.log(`  public data ${pred} ${obj}.`)\n      }\n    })\n  }\n}\n\n/* ESCO sopecific\n*/\nexport function ESCOResultToBindings (json: Object): Bindings {\n  const results = (json as any)._embedded.results // Array\n  const bindings = results.map(result => {\n    const name = result.title\n    const uri = result.uri // like http://data.europa.eu/esco/occupation/57af9090-55b4-4911-b2d0-86db01c00b02\n    return { name: { value: name, type: 'literal' }, subject: { type: 'IRI', value: uri } } // simulate SPARQL bindings\n  })\n  return bindings\n}\n\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryESCODataByName (filter: string, theClass:NamedNode, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.searchByNameURI) throw new Error('Missing queryTarget.searchByNameURI on queryESCODataByName')\n  const queryURI = queryTarget.searchByNameURI\n    .replace('$(name)', filter)\n    .replace('$(limit)', '' + AUTOCOMPLETE_LIMIT)\n    .replace('$(targetClass)', theClass.toNT())\n  debug.log('Querying ESCO data - uri: ' + queryURI)\n\n  const response = await kb.fetcher.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n  const text = response.responseText || ''\n  debug.log('    Query result  text' + text.slice(0, 500) + '...')\n  if (text.length === 0) throw new Error('Wot no text back from ESCO query ' + queryURI)\n  const json = JSON.parse(text)\n  console.log('Whole JSON return object', json)\n  debug.log('    ESCO Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n  return ESCOResultToBindings(json)\n}\n\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryPublicDataByName (\n  filter: string,\n  theClass:NamedNode,\n  languages: Array<string>,\n  queryTarget: QueryParameters): Promise<Bindings> {\n  function substituteStrings (template: string):string {\n    const u1 = template.replace('$(name)', filter)\n      .replace('$(limit)', '' + AUTOCOMPLETE_LIMIT)\n      .replace('$(language)', language)\n    return u1.replace('$(targetClass)', theClass.toNT())\n  }\n\n  if (!theClass) {\n    throw new Error('queryPublicDataByName: No class provided')\n  }\n  const languagePrefs = await getPreferredLanguages() || defaultPreferedLangages\n  const language = languagePrefs[0] || 'en'\n  if (queryTarget.searchByNameQuery) {\n    const sparql = substituteStrings(queryTarget.searchByNameQuery)\n    debug.log('Querying public data - sparql: ' + sparql)\n    return queryPublicDataSelect(sparql, queryTarget)\n  } else if (queryTarget.searchByNameURI) { // not sparql - random API\n    const queryURI = substituteStrings(queryTarget.searchByNameURI)\n    const response = await kb.fetcher.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n    const text = response.responseText || '' // ts\n    debug.log('    Query result  text' + text.slice(0, 500) + '...')\n    if (text.length === 0) throw new Error('Wot no text back from ESCO query ' + queryURI)\n    const json = JSON.parse(text)\n    debug.log('    API Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n    if ((json as any)._embedded) {\n      debug.log('      Looks like ESCO')\n      const bindings = ESCOResultToBindings(json)\n      return bindings\n    } else {\n      alert('Code me: unrecognized API return format')\n      throw new Error(`*** Need to add code to parse unrecognized API JSON return\\n${JSON.stringify(json, null, 4)}`)\n    }\n  } else {\n    throw new Error('Query source must have either rest API or SPARQL endpoint.')\n  }\n}\n\n/* Query a database using SPARQL SELECT\n*/\nexport async function queryPublicDataSelect (sparql: string, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataSelect')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataSelect uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'application/json')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS - as we know it is public\n    headers: headers\n  }\n  const response = await kb.fetcher.webOperation('GET', queryURI, options)\n  // complain('Error querying db of organizations: ' + err)\n  const text = response.responseText || 'wot no response text'\n  // debug.log('    Query result  text' + text.slice(0,100) + '...')\n  if (text.length === 0) throw new Error('Wot no text back from query ' + queryURI)\n  const json = JSON.parse(text)\n  debug.log('    Query result JSON' + JSON.stringify(json, null, 4).slice(0, 100) + '...')\n  const bindings = json.results.bindings\n  return bindings\n}\n\n/* Load from a database using SPARQL CONSTRUCT\n*/\nexport async function queryPublicDataConstruct (sparql: string, pubicId: NamedNode, queryTarget: QueryParameters): Promise<void> {\n  debug.log('queryPublicDataConstruct: sparql:', sparql)\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataConstruct')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataConstruct uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'text/turtle')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS // @tsc pain\n    headers: headers // ({ Accept: 'text/turtle' } as Headers)\n  }\n  const response = await kb.fetcher.webOperation('GET', queryURI, options)\n  const text = response.responseText || 'No response text?'\n  const report = text.length > 500 ? text.slice(0, 200) + ' ... ' + text.slice(-200) : text\n  debug.log('    queryPublicDataConstruct result text:' + report)\n  if (text.length === 0) throw new Error('queryPublicDataConstruct: No text back from construct query:' + queryURI)\n  parse(text, kb, pubicId.uri, 'text/turtle')\n}\n\nexport async function loadPublicDataThing (kb, subject: NamedNode, publicDataID: NamedNode) {\n  if (publicDataID.uri.startsWith('https://dbpedia.org/resource/')) {\n    return getDbpediaDetails(kb, subject, publicDataID)\n  } else if (publicDataID.uri.match(/^https?:\\/\\/www\\.wikidata\\.org\\/entity\\/.*/)) {\n    // const QId = publicDataID.uri.split('/')[4]\n    // const dataURI = `http://www.wikidata.org/wiki/Special:EntityData/${QId}.ttl`\n    // In fact loading the data URI gives much too much irrelevant data, from wikidata, so we do a query.\n    await getWikidataDetails(kb, subject, publicDataID)\n    // await getWikidataLocation(kb, subject, publicDataID)  -- should get that in the details query now\n  } else {\n    const iDToFetch = publicDataID.uri.startsWith('http:')\n      ? kb.sym('https:' + publicDataID.uri.slice(5))\n      : publicDataID\n    const headers = new Headers()\n    headers.append('Accept', 'text/turtle')\n    return kb.fetcher.load(iDToFetch, {\n      credentials: 'omit' as 'include' | 'omit' | undefined,\n      headers: headers\n    })\n  }\n}\n\nexport async function getWikidataDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const subjRegexp = /wd:Q49108/g\n  const sparql = instituteDetailsWikidataQuery.replace(subjRegexp, publicDataID.toNT())\n  await queryPublicDataConstruct(sparql, publicDataID, wikidataParameters)\n  debug.log('getWikidataDetails: loaded.', publicDataID)\n}\n\nexport async function getWikidataDetailsOld (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n  optional { $(subject)  wdt:P31  ?targetClass } # instance of\n  optional { $(subject)  wdt:P154  ?logo }\n  optional { $(subject)  wdt:P158  ?sealImage }\n# optional { $(subject)  wdt:P159  ?headquartersLocation }\n\noptional { $(subject)  wdt:P17  ?country }\noptional { $(subject)  wdt:P18  ?image }\noptional { $(subject)  wdt:P1813  ?shortName }\n\noptional { $(subject)  wdt:P355  ?subsidiary }\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`\n    .replace(subjectRegexp, publicDataID.toNT())\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // arg2 was solidSubject\n}\n\nexport async function getWikidataLocation (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n\n  $(subject) wdt:P276 ?location .\n\n  optional { ?location  wdt:P2044  ?elevation }\n  optional { ?location  wdt:P131  ?region }\n  optional { ?location wdt:P625 ?coordinates }\noptional {  ?location  wdt:P17  ?country }\n\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`.replace(subjectRegexp, publicDataID.toNT())\n  debug.log(' location query sparql:' + sparql)\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  debug.log(' location query bindings:', bindings)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // was solidSubject\n}\n\nexport async function getDbpediaDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n// Note below the string form of the named node with <> works in SPARQL\n  const sparql = `select distinct ?city, ?state, ?country, ?homepage, ?logo, ?lat, ?long,  WHERE {\n    OPTIONAL { <${publicDataID}> <http://dbpedia.org/ontology/city> ?city }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/state> ?state }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n    OPTIONAL { ${publicDataID} foaf:homepage ?homepage }\n    OPTIONAL { ${publicDataID} foaf:lat ?lat; foaf:long ?long }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n   }`\n  const bindings = await queryPublicDataSelect(sparql, dbpediaParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc())\n  debug.log('Finished getDbpediaDetails.')\n}\n"],"file":"publicData.js"}