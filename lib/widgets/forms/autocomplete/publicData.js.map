{"version":3,"file":"publicData.js","names":["AUTOCOMPLETE_LIMIT","subjectRegexp","wikidataClasses","Corporation","EducationalOrganization","GovernmentOrganization","MedicalOrganization","MusicGroup","NGO","Occupation","Project","ResearchOrganization","SportsOrganization","instituteDetailsWikidataQuery","fetcherOptionsJsonPublicData","credentials","headers","Headers","Accept","escoParameters","label","logo","store","sym","searchByNameURI","dbpediaParameters","searchByNameQuery","endpoint","dbPediaTypeMap","AcademicInsitution","wikidataOutgoingClassMap","Enterprise","Business","CharitableOrganization","Insitute","wikidataParameters","limit","insitituteDetailsQuery","wikidataIncomingClassMap","ns","schema","variableNameToPredicateMap","targetClass","rdf","sealImage","shortName","foaf","subsidiary","city","vcard","state","country","homepage","lat","bindingToTerm","item","typ","type","toLowerCase","value","Literal","Error","loadFromBindings","kb","solidSubject","bindings","doc","predMap","results","debug","log","forEach","binding","key","result","combined","JSON","stringify","Set","add","values","parse","obj","language","datatype","warn","regexp","match","exec","float","xsd","latitude","longitude","pred","ESCOResultToBindings","json","_embedded","map","name","title","uri","subject","queryESCODataByName","filter","theClass","queryTarget","queryURI","replace","toNT","fetcher","webOperation","response","text","responseText","slice","length","fixWikidataJSON","str","syntaxProblem","indexOf","goodness","lastIndexOf","queryPublicDataByName","languages","substituteStrings","template","u1","getPreferredLanguages","defaultPreferredLanguages","languagePrefs","sparql","queryPublicDataSelect","status","text2","alert","myUrlWithParams","URL","searchParams","append","href","options","queryPublicDataConstruct","pubicId","report","loadPublicDataThing","publicDataID","startsWith","getDbpediaDetails","getWikidataDetails","iDToFetch","load","subjRegexp","getWikidataDetailsOld","getWikidataLocation"],"sources":["../../../../src/widgets/forms/autocomplete/publicData.ts"],"sourcesContent":["/* Logic to access public data stores\n*\n* including filtering resut by natural language etc\n* See https://solidos.solidcommunity.net/public/2021/01%20Building%20Solid%20Apps%20which%20use%20Public%20Data.html\n*/\n/* eslint-disable no-console */\nimport { Literal, NamedNode, parse } from 'rdflib'\nimport { store } from 'solid-logic'\nimport * as debug from '../../../debug'\nimport * as ns from '../../../ns'\nimport { defaultPreferredLanguages, getPreferredLanguages } from './language'\n\nexport const AUTOCOMPLETE_LIMIT = 200 // How many to get from server\n// With 3000 we could exceed the wikidata timeout\n\nconst subjectRegexp = /\\$\\(subject\\)/g\n\ninterface Term {\n  type: string;\n  value: string\n}\n\nexport interface Binding {\n  subject: Term;\n  name?: Term\n  location?: Term\n  coordinates?: Term\n}\n\ntype Bindings = Binding[]\n\nexport type QueryParameters =\n{ label: string;\n  limit?: number;\n  logo?: NamedNode;\n  searchByNameQuery?: string;\n  searchByNameURI?: string;\n  insitituteDetailsQuery?: string;\n  endpoint?: string;\n  objectURIBase?: NamedNode;\n  targetClass?: NamedNode,\n}\n\n// Schema.org seems to suggest NGOs are non-profit and Corporaions are for-profit\n// but doesn't have explicit classes\nexport const wikidataClasses = {\n  Corporation: 'http://www.wikidata.org/entity/Q6881511', // Enterprise is for-profit\n  EducationalOrganization: 'http://www.wikidata.org/entity/Q178706', // insitution\n  GovernmentOrganization: 'http://www.wikidata.org/entity/Q327333', // government agency\n  MedicalOrganization: 'http://www.wikidata.org/entity/Q4287745',\n  MusicGroup: 'http://www.wikidata.org/entity/Q32178211', // music organization\n  NGO: 'http://www.wikidata.org/entity/Q163740', // nonprofit organization @@\n  Occupation: 'http://www.wikidata.org/entity/Q28640', // Profession\n  // Organization: 'http://www.wikidata.org/entity/Q43229',\n  Project: 'http://www.wikidata.org/entity/Q170584',\n  ResearchOrganization: 'http://www.wikidata.org/entity/Q31855',\n  SportsOrganization: 'http://www.wikidata.org/entity/Q4438121'\n}\n\nexport const instituteDetailsWikidataQuery = `prefix vcard: <http://www.w3.org/2006/vcard/ns#>\nCONSTRUCT\n{  wd:Q49108 vcard:fn ?itemLabel.\nwd:Q49108 rdf:type ?klass. ?klass rdfs:label ?klassLabel; rdfs:comment ?klassDescription .\nwd:Q49108 schema:logo ?logo;\n   schema:image ?image;\n   schema:logo  ?sealImage;\n   schema:subOrganization  ?subsidiary .\n      ?subsidiary rdfs:label ?subsidiaryLabel .\n ?supersidiary schema:subOrganization wd:Q49108 .\n      ?supersidiary rdfs:label ?supersidiaryLabel .\n  wd:Q49108 schema:location ?location .\n     ?location  schema:elevation  ?elevation .\n     ?location  wdt:P131  ?region .  ?region rdfs:label ?regionLabel .\n     ?location wdt:P625 ?coordinates .\n     ?location  schema:country  ?country . ?country rdfs:label ?countryLabel .\n}\nWHERE\n{  optional {wd:Q49108 rdfs:label ?itemLabel} .\n  optional {wd:Q49108 wdt:P154 ?logo .}\n  optional {wd:Q49108 wdt:P31 ?klass .}\n  optional {wd:Q49108 wdt:P158  ?sealImage .}\n  optional {wd:Q49108 wdt:P18 ?image .}\n\n  optional { wd:Q49108       wdt:P355 ?subsidiary . }\n  optional { ?supersidiary   wdt:P355 wd:Q49108. }\n\n  optional { wd:Q49108 wdt:P276 ?location .\n\n    optional { ?location  schema:eleveation  ?elevation }\n    optional { ?location  wdt:P131  ?region }\n    optional { ?location wdt:P625 ?coordinates }\n    optional {  ?location  wdt:P17  ?country }\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\". }\n}`\n\nexport const fetcherOptionsJsonPublicData = {\n  credentials: 'omit' as 'include' | 'omit' | undefined, // try to avoid CORS problems. Data is public so no auth\n  headers: new Headers({ Accept: 'application/json' })\n}\n\nexport const escoParameters:QueryParameters = {\n  label: 'ESCO',\n  logo: store.sym('https://ec.europa.eu/esco/portal/static_resource2/images/logo/logo_en.gif'),\n  searchByNameURI: 'https://ec.europa.eu/esco/api/search?language=$(language)&type=occupation&text=$(name)'\n  // endpoint: undefined\n  // returnFormat: 'ESCO',\n  // targetClass: {}\n}\n\nexport const dbpediaParameters:QueryParameters = {\n  label: 'DBPedia',\n  logo: store.sym('https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/DBpediaLogo.svg/263px-DBpediaLogo.svg.png'),\n  searchByNameQuery: `select distinct ?subject, ?name where {\n    ?subject a $(targetClass); rdfs:label ?name\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit)`,\n  endpoint: 'https://dbpedia.org/sparql/'\n}\n\nexport const dbPediaTypeMap = { AcademicInsitution: 'http://umbel.org/umbel/rc/EducationalOrganization' }\n\nexport const wikidataOutgoingClassMap = {\n  AcademicInsitution: 'http://www.wikidata.org/entity/Q4671277',\n  Enterprise: 'http://www.wikidata.org/entity/Q6881511',\n  Business: 'http://www.wikidata.org/entity/Q4830453',\n  NGO: 'http://www.wikidata.org/entity/Q79913',\n  CharitableOrganization: 'http://www.wikidata.org/entity/Q708676',\n  Insitute: 'http://www.wikidata.org/entity/Q1664720'\n}\n\nexport const wikidataParameters = {\n  label: 'WikiData',\n  limit: 3000, // Need a high one as very many items, and many languages\n  logo: store.sym('https://www.wikimedia.org/static/images/project-logos/wikidatawiki.png'),\n  endpoint: 'https://query.wikidata.org/sparql',\n  searchByNameQuery: `SELECT ?subject ?name\n  WHERE {\n    ?klass wdt:P279* $(targetClass) .\n    ?subject wdt:P31 ?klass .\n    ?subject rdfs:label ?name.\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit) `, // was SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n\n  insitituteDetailsQuery: `CONSTRUCT\n{  wd:Q49108 schema:name ?itemLabel;\n             schema:logo ?logo;\n              schema:logo  ?sealImage;\n             schema:subOrganization  ?subsidiary .\n                 ?subsidiary schema:name ?subsidiaryLabel .\n}\nWHERE\n{\n   wd:Q49108 # rdfs:label ?itemLabel ;\n             wdt:P154 ?logo;\n              wdt:P158  ?sealImage ;\n             wdt:P355  ?subsidiary .\n          #  ?subsidiary rdfs:label ?subsidiaryLabel .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE], fr\". }\n}`\n}\n\nexport const wikidataIncomingClassMap = {\n  'http://www.wikidata.org/entity/Q15936437': ns.schema('CollegeOrUniversity'), // research university\n  'http://www.wikidata.org/entity/Q1664720': ns.schema('EducationalOrganization'), // insitute @@\n  'http://www.wikidata.org/entity/Q43229': ns.schema('Organization'), // research university\n  'http://www.wikidata.org/entity/Q3918': ns.schema('CollegeOrUniversity'), // university\n  'http://www.wikidata.org/entity/Q170584': ns.schema('Project'), // university\n  'http://www.wikidata.org/entity/Q327333': ns.schema('GovernmentOrganization'), // govt agency\n  'http://www.wikidata.org/entity/Q2221906': ns.schema('Place'), // geographic location\n  'http://www.wikidata.org/entity/Q167037': ns.schema('Corporation') // Corporation\n\n}\nexport const variableNameToPredicateMap = { // allow other mappings to be added in theory hence var\n  // wikidata:\n  targetClass: ns.rdf('type'),\n  // logo: ns.schema('logo'),\n  sealImage: ns.schema('logo'),\n  // image: ns.schema('image'),   defaults to shema\n  shortName: ns.foaf('nick'),\n  subsidiary: ns.schema('subOrganization'),\n  // dbpedia - :\n  city: ns.vcard('locality'),\n  state: ns.vcard('region'),\n  country: ns.vcard('country-name'),\n  homepage: ns.foaf('homepage'),\n  lat: ns.schema('latitude'),\n  long: ns.schema('longitude')\n}\n\nexport function bindingToTerm (item) {\n  const typ = item.type.toLowerCase()\n  if (typ === 'uri' || typ === 'iri') {\n    return store.sym(item.value)\n  } else if (typ === 'literal') {\n    if (item['xml:lang']) {\n      return new Literal(item.value, item['xml:lang'])\n    } else {\n      return new Literal(item.value)\n    }\n  } else {\n    throw new Error(`bindingToTerm: Unexpected type \"${item.type}\" in sparql binding}`)\n  }\n}\n\nexport function loadFromBindings (kb, solidSubject:NamedNode, bindings, doc, predMap = variableNameToPredicateMap) {\n  const results = {}\n  debug.log(`loadFromBindings:  subject: ${solidSubject}`)\n  debug.log(`                       doc: ${doc}`)\n  bindings.forEach(binding => {\n    for (const key in binding) {\n      const result = binding[key]\n      const combined = JSON.stringify(result) // ( result.type, result.value )\n      results[key] = results[key] || new Set()\n      results[key].add(combined) // remove duplicates\n    }\n  })\n  for (const key in results) {\n    const values = results[key]\n    debug.log(`    results ${key} -> ${values}`)\n    values.forEach(combined => {\n      const result = JSON.parse(combined)\n      const { type, value } = result\n      let obj\n      if (type === 'uri') {\n        obj = kb.sym(value)\n      } else if (type === 'literal') {\n        obj = new Literal(value, result.language, result.datatype)\n      } else {\n        throw new Error(`loadFromBindings:  unexpected type: ${type}`)\n      }\n      if (key === 'type') {\n        if (wikidataIncomingClassMap[value]) {\n          obj = wikidataIncomingClassMap[value]\n        } else {\n          debug.warn('Unmapped Wikidata Class: ' + value)\n        }\n      } else if (key === 'coordinates') {\n        // const latlong = value // Like 'Point(-71.106111111 42.375)'\n        debug.log('         @@@ hey a point: ' + value)\n        // const regexp = /.*\\(([-0-9\\.-]*) ([-0-9\\.-]*)\\)/\n        const regexp = /.*\\(([-0-9.-]*) ([-0-9.-]*)\\)/\n        const match = regexp.exec(value)\n        if (match) {\n          const float = ns.xsd('float')\n          const latitude = new Literal(match[1], null, float)\n          const longitude = new Literal(match[2], null, float)\n          kb.add(solidSubject, ns.schema('longitude'), longitude, doc)\n          kb.add(solidSubject, ns.schema('latitude'), latitude, doc)\n        } else {\n          debug.log('Bad coordinates syntax: ' + value)\n        }\n      } else {\n        const pred = predMap[key] || ns.schema(key) // fallback to just using schema.org\n        kb.add(solidSubject, pred, obj, doc) // @@ deal with non-string and objects\n        debug.log(`  public data ${pred} ${obj}.`)\n      }\n    })\n  }\n}\n\n/* ESCO sopecific\n*/\nexport function ESCOResultToBindings (json: Object): Bindings {\n  const results = (json as any)._embedded.results // Array\n  const bindings = results.map(result => {\n    const name = result.title\n    const uri = result.uri // like http://data.europa.eu/esco/occupation/57af9090-55b4-4911-b2d0-86db01c00b02\n    return { name: { value: name, type: 'literal' }, subject: { type: 'IRI', value: uri } } // simulate SPARQL bindings\n  })\n  return bindings\n}\n\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryESCODataByName (filter: string, theClass:NamedNode, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.searchByNameURI) throw new Error('Missing queryTarget.searchByNameURI on queryESCODataByName')\n  const limit = queryTarget.limit || AUTOCOMPLETE_LIMIT\n  const queryURI = queryTarget.searchByNameURI\n    .replace('$(name)', filter)\n    .replace('$(limit)', '' + limit)\n    .replace('$(targetClass)', theClass.toNT())\n  debug.log('Querying ESCO data - uri: ' + queryURI)\n\n  const response = await store.fetcher?.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n  const text = response?.responseText || ''\n  debug.log('    Query result  text' + text.slice(0, 500) + '...')\n  if (text.length === 0) throw new Error('Wot no text back from ESCO query ' + queryURI)\n  const json = JSON.parse(text)\n  // console.log('Whole JSON return object', json)\n  debug.log('    ESCO Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n  return ESCOResultToBindings(json)\n}\n\n/* Cope ithe syntax probelm in wikidata timeout responses\n*\n* Wikidata bug: https://phabricator.wikimedia.org/T283962\n* This will not be needed whn that  WDQS bug fixed.\n* This is aptured in https://github.com/solidos/solid-ui/issues/403\n*/\nfunction fixWikidataJSON (str) {\n  const syntaxProblem = str.indexOf('SPARQL-QUERY')\n  if (syntaxProblem < 0) return str\n  // console.log('@@ fixWikidataJSON FIXING')\n  debug.warn('  ### Fixing JSON with wikidata error code injection ' + str.slice(syntaxProblem, syntaxProblem + 200))\n  const goodness = str.lastIndexOf('}, {')\n  return str.slice(0, goodness) + ' } ] } } ' // Close binding, array, bindings, results, root object\n}\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryPublicDataByName (\n  filter: string,\n  theClass:NamedNode,\n  languages: Array<string>,\n  queryTarget: QueryParameters): Promise<Bindings> {\n  function substituteStrings (template: string):string {\n    const limit = queryTarget.limit || AUTOCOMPLETE_LIMIT\n    const u1 = template.replace('$(name)', filter)\n      .replace('$(limit)', '' + limit)\n      .replace('$(language)', language)\n    return u1.replace('$(targetClass)', theClass.toNT())\n  }\n\n  if (!theClass) {\n    throw new Error('queryPublicDataByName: No class provided')\n  }\n\n  const languagePrefs = await getPreferredLanguages() || defaultPreferredLanguages\n  const language = languagePrefs[0] || 'en'\n  if (queryTarget.searchByNameQuery) {\n    const sparql = substituteStrings(queryTarget.searchByNameQuery)\n    debug.log('Querying public data - sparql: ' + sparql)\n    return queryPublicDataSelect(sparql, queryTarget)\n  } else if (queryTarget.searchByNameURI) { // not sparql - random API\n    const queryURI = substituteStrings(queryTarget.searchByNameURI)\n    let response\n    try {\n      response = await store.fetcher?.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n    } catch (err) {\n      throw new Error(`Exception when trying to fetch ${queryURI} \\n ${err}`)\n    }\n    const text = response.responseText || '' // ts\n    if (response.status !== 200) {\n      throw new Error(`HTTP error status ${response.status} trying to fetch ${queryURI} `)\n    }\n    debug.log('    Query result  text' + text.slice(0, 500) + '...')\n    if (text.length === 0) throw new Error('queryPublicDataByName: No text back from public data query ' + queryURI)\n    const text2 = fixWikidataJSON(text) // Kludge: strip of interrupting error message\n    const json = JSON.parse(text2)\n    debug.log('    API Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n    if ((json as any)._embedded) {\n      debug.log('      Looks like ESCO')\n      const bindings = ESCOResultToBindings(json)\n      return bindings\n    } else {\n      alert('Code me: unrecognized API return format')\n      throw new Error(`*** Need to add code to parse unrecognized API JSON return\\n${JSON.stringify(json, null, 4)}`)\n    }\n  } else {\n    throw new Error('Query source must have either rest API or SPARQL endpoint.')\n  }\n}\n\n/* Query a database using SPARQL SELECT\n*/\nexport async function queryPublicDataSelect (sparql: string, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataSelect')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataSelect uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'application/json')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS - as we know it is public\n    headers\n  }\n\n  const response = await store.fetcher?.webOperation('GET', queryURI, options)\n\n  const text = response?.responseText || ''\n  if (text.length === 0) throw new Error('No text back from query ' + queryURI)\n  const text2 = fixWikidataJSON(text)\n  const json = JSON.parse(text2)\n  debug.log('    Query result JSON' + JSON.stringify(json, null, 4).slice(0, 100) + '...')\n  const bindings = json.results.bindings\n  return bindings\n}\n\n/* Load from a database using SPARQL CONSTRUCT\n*/\nexport async function queryPublicDataConstruct (sparql: string, pubicId: NamedNode, queryTarget: QueryParameters): Promise<void> {\n  debug.log('queryPublicDataConstruct: sparql:', sparql)\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataConstruct')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataConstruct uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'text/turtle')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS // @tsc pain\n    headers // ({ Accept: 'text/turtle' } as Headers)\n  }\n  const response = await store.fetcher?.webOperation('GET', queryURI, options)\n  const text = response?.responseText || 'No response text?'\n  const report = text.length > 500 ? text.slice(0, 200) + ' ... ' + text.slice(-200) : text\n  debug.log('    queryPublicDataConstruct result text:' + report)\n  if (text.length === 0) throw new Error('queryPublicDataConstruct: No text back from construct query:' + queryURI)\n  parse(text, store, pubicId.uri, 'text/turtle')\n}\n\nexport async function loadPublicDataThing (kb, subject: NamedNode, publicDataID: NamedNode) {\n  if (publicDataID.uri.startsWith('https://dbpedia.org/resource/')) {\n    return getDbpediaDetails(kb, subject, publicDataID)\n  } else if (publicDataID.uri.match(/^https?:\\/\\/www\\.wikidata\\.org\\/entity\\/.*/)) {\n    // const QId = publicDataID.uri.split('/')[4]\n    // const dataURI = `http://www.wikidata.org/wiki/Special:EntityData/${QId}.ttl`\n    // In fact loading the data URI gives much too much irrelevant data, from wikidata, so we do a query.\n    await getWikidataDetails(kb, subject, publicDataID)\n    // await getWikidataLocation(kb, subject, publicDataID)  -- should get that in the details query now\n  } else {\n    const iDToFetch = publicDataID.uri.startsWith('http:')\n      ? kb.sym('https:' + publicDataID.uri.slice(5))\n      : publicDataID\n    const headers = new Headers()\n    headers.append('Accept', 'text/turtle')\n    return kb.fetcher.load(iDToFetch, {\n      credentials: 'omit' as 'include' | 'omit' | undefined,\n      headers\n    })\n  }\n}\n\nexport async function getWikidataDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const subjRegexp = /wd:Q49108/g\n  const sparql = instituteDetailsWikidataQuery.replace(subjRegexp, publicDataID.toNT())\n  await queryPublicDataConstruct(sparql, publicDataID, wikidataParameters)\n  debug.log('getWikidataDetails: loaded.', publicDataID)\n}\n\nexport async function getWikidataDetailsOld (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n  optional { $(subject)  wdt:P31  ?targetClass } # instance of\n  optional { $(subject)  wdt:P154  ?logo }\n  optional { $(subject)  wdt:P158  ?sealImage }\n# optional { $(subject)  wdt:P159  ?headquartersLocation }\n\noptional { $(subject)  wdt:P17  ?country }\noptional { $(subject)  wdt:P18  ?image }\noptional { $(subject)  wdt:P1813  ?shortName }\n\noptional { $(subject)  wdt:P355  ?subsidiary }\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`\n    .replace(subjectRegexp, publicDataID.toNT())\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // arg2 was solidSubject\n}\n\nexport async function getWikidataLocation (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n\n  $(subject) wdt:P276 ?location .\n\n  optional { ?location  wdt:P2044  ?elevation }\n  optional { ?location  wdt:P131  ?region }\n  optional { ?location wdt:P625 ?coordinates }\noptional {  ?location  wdt:P17  ?country }\n\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`.replace(subjectRegexp, publicDataID.toNT())\n  debug.log(' location query sparql:' + sparql)\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  debug.log(' location query bindings:', bindings)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // was solidSubject\n}\n\nexport async function getDbpediaDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n// Note below the string form of the named node with <> works in SPARQL\n  const sparql = `select distinct ?city, ?state, ?country, ?homepage, ?logo, ?lat, ?long,  WHERE {\n    OPTIONAL { <${publicDataID}> <http://dbpedia.org/ontology/city> ?city }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/state> ?state }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n    OPTIONAL { ${publicDataID} foaf:homepage ?homepage }\n    OPTIONAL { ${publicDataID} foaf:lat ?lat; foaf:long ?long }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n   }`\n  const bindings = await queryPublicDataSelect(sparql, dbpediaParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc())\n  debug.log('Finished getDbpediaDetails.')\n}\n"],"mappings":"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"}