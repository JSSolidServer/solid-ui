{"version":3,"file":"publicData.js","names":["AUTOCOMPLETE_LIMIT","subjectRegexp","wikidataClasses","Corporation","EducationalOrganization","GovernmentOrganization","MedicalOrganization","MusicGroup","NGO","Occupation","Project","ResearchOrganization","SportsOrganization","instituteDetailsWikidataQuery","fetcherOptionsJsonPublicData","credentials","headers","Headers","Accept","escoParameters","label","logo","store","sym","searchByNameURI","dbpediaParameters","searchByNameQuery","endpoint","dbPediaTypeMap","AcademicInsitution","wikidataOutgoingClassMap","Enterprise","Business","CharitableOrganization","Insitute","wikidataParameters","limit","insitituteDetailsQuery","wikidataIncomingClassMap","ns","schema","variableNameToPredicateMap","targetClass","rdf","sealImage","shortName","foaf","subsidiary","city","vcard","state","country","homepage","lat","bindingToTerm","item","typ","type","toLowerCase","value","Literal","Error","loadFromBindings","kb","solidSubject","bindings","doc","predMap","results","debug","log","forEach","binding","key","result","combined","JSON","stringify","Set","add","values","parse","obj","language","datatype","warn","regexp","match","exec","float","xsd","latitude","longitude","pred","ESCOResultToBindings","json","_embedded","map","name","title","uri","subject","queryESCODataByName","filter","theClass","queryTarget","queryURI","replace","toNT","fetcher","webOperation","response","text","responseText","slice","length","fixWikidataJSON","str","syntaxProblem","indexOf","goodness","lastIndexOf","queryPublicDataByName","languages","substituteStrings","template","u1","getPreferredLanguages","defaultPreferredLanguages","languagePrefs","sparql","queryPublicDataSelect","status","text2","alert","myUrlWithParams","URL","searchParams","append","href","options","queryPublicDataConstruct","pubicId","report","loadPublicDataThing","publicDataID","startsWith","getDbpediaDetails","getWikidataDetails","iDToFetch","load","subjRegexp","getWikidataDetailsOld","getWikidataLocation"],"sources":["../../../../src/widgets/forms/autocomplete/publicData.ts"],"sourcesContent":["/* Logic to access public data stores\n*\n* including filtering resut by natural language etc\n* See https://solidos.solidcommunity.net/public/2021/01%20Building%20Solid%20Apps%20which%20use%20Public%20Data.html\n*/\n/* eslint-disable no-console */\nimport { Literal, NamedNode, parse } from 'rdflib'\nimport { store } from 'solid-logic'\nimport * as debug from '../../../debug'\nimport * as ns from '../../../ns'\nimport { defaultPreferredLanguages, getPreferredLanguages } from './language'\n\nexport const AUTOCOMPLETE_LIMIT = 200 // How many to get from server\n// With 3000 we could exceed the wikidata timeout\n\nconst subjectRegexp = /\\$\\(subject\\)/g\n\ninterface Term {\n  type: string;\n  value: string\n}\n\nexport interface Binding {\n  subject: Term;\n  name?: Term\n  location?: Term\n  coordinates?: Term\n}\n\ntype Bindings = Binding[]\n\nexport type QueryParameters =\n{ label: string;\n  limit?: number;\n  logo?: NamedNode;\n  searchByNameQuery?: string;\n  searchByNameURI?: string;\n  insitituteDetailsQuery?: string;\n  endpoint?: string;\n  objectURIBase?: NamedNode;\n  targetClass?: NamedNode,\n}\n\n// Schema.org seems to suggest NGOs are non-profit and Corporaions are for-profit\n// but doesn't have explicit classes\nexport const wikidataClasses = {\n  Corporation: 'http://www.wikidata.org/entity/Q6881511', // Enterprise is for-profit\n  EducationalOrganization: 'http://www.wikidata.org/entity/Q178706', // insitution\n  GovernmentOrganization: 'http://www.wikidata.org/entity/Q327333', // government agency\n  MedicalOrganization: 'http://www.wikidata.org/entity/Q4287745',\n  MusicGroup: 'http://www.wikidata.org/entity/Q32178211', // music organization\n  NGO: 'http://www.wikidata.org/entity/Q163740', // nonprofit organization @@\n  Occupation: 'http://www.wikidata.org/entity/Q28640', // Profession\n  // Organization: 'http://www.wikidata.org/entity/Q43229',\n  Project: 'http://www.wikidata.org/entity/Q170584',\n  ResearchOrganization: 'http://www.wikidata.org/entity/Q31855',\n  SportsOrganization: 'http://www.wikidata.org/entity/Q4438121'\n}\n\nexport const instituteDetailsWikidataQuery = `prefix vcard: <http://www.w3.org/2006/vcard/ns#>\nCONSTRUCT\n{  wd:Q49108 vcard:fn ?itemLabel.\nwd:Q49108 rdf:type ?klass. ?klass rdfs:label ?klassLabel; rdfs:comment ?klassDescription .\nwd:Q49108 schema:logo ?logo;\n   schema:image ?image;\n   schema:logo  ?sealImage;\n   schema:subOrganization  ?subsidiary .\n      ?subsidiary rdfs:label ?subsidiaryLabel .\n ?supersidiary schema:subOrganization wd:Q49108 .\n      ?supersidiary rdfs:label ?supersidiaryLabel .\n  wd:Q49108 schema:location ?location .\n     ?location  schema:elevation  ?elevation .\n     ?location  wdt:P131  ?region .  ?region rdfs:label ?regionLabel .\n     ?location wdt:P625 ?coordinates .\n     ?location  schema:country  ?country . ?country rdfs:label ?countryLabel .\n}\nWHERE\n{  optional {wd:Q49108 rdfs:label ?itemLabel} .\n  optional {wd:Q49108 wdt:P154 ?logo .}\n  optional {wd:Q49108 wdt:P31 ?klass .}\n  optional {wd:Q49108 wdt:P158  ?sealImage .}\n  optional {wd:Q49108 wdt:P18 ?image .}\n\n  optional { wd:Q49108       wdt:P355 ?subsidiary . }\n  optional { ?supersidiary   wdt:P355 wd:Q49108. }\n\n  optional { wd:Q49108 wdt:P276 ?location .\n\n    optional { ?location  schema:eleveation  ?elevation }\n    optional { ?location  wdt:P131  ?region }\n    optional { ?location wdt:P625 ?coordinates }\n    optional {  ?location  wdt:P17  ?country }\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\". }\n}`\n\nexport const fetcherOptionsJsonPublicData = {\n  credentials: 'omit' as 'include' | 'omit' | undefined, // try to avoid CORS problems. Data is public so no auth\n  headers: new Headers({ Accept: 'application/json' })\n}\n\nexport const escoParameters:QueryParameters = {\n  label: 'ESCO',\n  logo: store.sym('https://ec.europa.eu/esco/portal/static_resource2/images/logo/logo_en.gif'),\n  searchByNameURI: 'https://ec.europa.eu/esco/api/search?language=$(language)&type=occupation&text=$(name)'\n  // endpoint: undefined\n  // returnFormat: 'ESCO',\n  // targetClass: {}\n}\n\nexport const dbpediaParameters:QueryParameters = {\n  label: 'DBPedia',\n  logo: store.sym('https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/DBpediaLogo.svg/263px-DBpediaLogo.svg.png'),\n  searchByNameQuery: `select distinct ?subject, ?name where {\n    ?subject a $(targetClass); rdfs:label ?name\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit)`,\n  endpoint: 'https://dbpedia.org/sparql/'\n}\n\nexport const dbPediaTypeMap = { AcademicInsitution: 'http://umbel.org/umbel/rc/EducationalOrganization' }\n\nexport const wikidataOutgoingClassMap = {\n  AcademicInsitution: 'http://www.wikidata.org/entity/Q4671277',\n  Enterprise: 'http://www.wikidata.org/entity/Q6881511',\n  Business: 'http://www.wikidata.org/entity/Q4830453',\n  NGO: 'http://www.wikidata.org/entity/Q79913',\n  CharitableOrganization: 'http://www.wikidata.org/entity/Q708676',\n  Insitute: 'http://www.wikidata.org/entity/Q1664720'\n}\n\nexport const wikidataParameters = {\n  label: 'WikiData',\n  limit: 3000, // Need a high one as very many items, and many languages\n  logo: store.sym('https://www.wikimedia.org/static/images/project-logos/wikidatawiki.png'),\n  endpoint: 'https://query.wikidata.org/sparql',\n  searchByNameQuery: `SELECT ?subject ?name\n  WHERE {\n    ?klass wdt:P279* $(targetClass) .\n    ?subject wdt:P31 ?klass .\n    ?subject rdfs:label ?name.\n    FILTER regex(?name, \"$(name)\", \"i\")\n  } LIMIT $(limit) `, // was SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n\n  insitituteDetailsQuery: `CONSTRUCT\n{  wd:Q49108 schema:name ?itemLabel;\n             schema:logo ?logo;\n              schema:logo  ?sealImage;\n             schema:subOrganization  ?subsidiary .\n                 ?subsidiary schema:name ?subsidiaryLabel .\n}\nWHERE\n{\n   wd:Q49108 # rdfs:label ?itemLabel ;\n             wdt:P154 ?logo;\n              wdt:P158  ?sealImage ;\n             wdt:P355  ?subsidiary .\n          #  ?subsidiary rdfs:label ?subsidiaryLabel .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE], fr\". }\n}`\n}\n\nexport const wikidataIncomingClassMap = {\n  'http://www.wikidata.org/entity/Q15936437': ns.schema('CollegeOrUniversity'), // research university\n  'http://www.wikidata.org/entity/Q1664720': ns.schema('EducationalOrganization'), // insitute @@\n  'http://www.wikidata.org/entity/Q43229': ns.schema('Organization'), // research university\n  'http://www.wikidata.org/entity/Q3918': ns.schema('CollegeOrUniversity'), // university\n  'http://www.wikidata.org/entity/Q170584': ns.schema('Project'), // university\n  'http://www.wikidata.org/entity/Q327333': ns.schema('GovernmentOrganization'), // govt agency\n  'http://www.wikidata.org/entity/Q2221906': ns.schema('Place'), // geographic location\n  'http://www.wikidata.org/entity/Q167037': ns.schema('Corporation') // Corporation\n\n}\nexport const variableNameToPredicateMap = { // allow other mappings to be added in theory hence var\n  // wikidata:\n  targetClass: ns.rdf('type'),\n  // logo: ns.schema('logo'),\n  sealImage: ns.schema('logo'),\n  // image: ns.schema('image'),   defaults to shema\n  shortName: ns.foaf('nick'),\n  subsidiary: ns.schema('subOrganization'),\n  // dbpedia - :\n  city: ns.vcard('locality'),\n  state: ns.vcard('region'),\n  country: ns.vcard('country-name'),\n  homepage: ns.foaf('homepage'),\n  lat: ns.schema('latitude'),\n  long: ns.schema('longitude')\n}\n\nexport function bindingToTerm (item) {\n  const typ = item.type.toLowerCase()\n  if (typ === 'uri' || typ === 'iri') {\n    return store.sym(item.value)\n  } else if (typ === 'literal') {\n    if (item['xml:lang']) {\n      return new Literal(item.value, item['xml:lang'])\n    } else {\n      return new Literal(item.value)\n    }\n  } else {\n    throw new Error(`bindingToTerm: Unexpected type \"${item.type}\" in sparql binding}`)\n  }\n}\n\nexport function loadFromBindings (kb, solidSubject:NamedNode, bindings, doc, predMap = variableNameToPredicateMap) {\n  const results = {}\n  debug.log(`loadFromBindings:  subject: ${solidSubject}`)\n  debug.log(`                       doc: ${doc}`)\n  bindings.forEach(binding => {\n    for (const key in binding) {\n      const result = binding[key]\n      const combined = JSON.stringify(result) // ( result.type, result.value )\n      results[key] = results[key] || new Set()\n      results[key].add(combined) // remove duplicates\n    }\n  })\n  for (const key in results) {\n    const values = results[key]\n    debug.log(`    results ${key} -> ${values}`)\n    values.forEach(combined => {\n      const result = JSON.parse(combined)\n      const { type, value } = result\n      let obj\n      if (type === 'uri') {\n        obj = kb.sym(value)\n      } else if (type === 'literal') {\n        obj = new Literal(value, result.language, result.datatype)\n      } else {\n        throw new Error(`loadFromBindings:  unexpected type: ${type}`)\n      }\n      if (key === 'type') {\n        if (wikidataIncomingClassMap[value]) {\n          obj = wikidataIncomingClassMap[value]\n        } else {\n          debug.warn('Unmapped Wikidata Class: ' + value)\n        }\n      } else if (key === 'coordinates') {\n        // const latlong = value // Like 'Point(-71.106111111 42.375)'\n        debug.log('         @@@ hey a point: ' + value)\n        // const regexp = /.*\\(([-0-9\\.-]*) ([-0-9\\.-]*)\\)/\n        const regexp = /.*\\(([-0-9.-]*) ([-0-9.-]*)\\)/\n        const match = regexp.exec(value)\n        if (match) {\n          const float = ns.xsd('float')\n          const latitude = new Literal(match[1], null, float)\n          const longitude = new Literal(match[2], null, float)\n          kb.add(solidSubject, ns.schema('longitude'), longitude, doc)\n          kb.add(solidSubject, ns.schema('latitude'), latitude, doc)\n        } else {\n          debug.log('Bad coordinates syntax: ' + value)\n        }\n      } else {\n        const pred = predMap[key] || ns.schema(key) // fallback to just using schema.org\n        kb.add(solidSubject, pred, obj, doc) // @@ deal with non-string and objects\n        debug.log(`  public data ${pred} ${obj}.`)\n      }\n    })\n  }\n}\n\n/* ESCO sopecific\n*/\nexport function ESCOResultToBindings (json: Object): Bindings {\n  const results = (json as any)._embedded.results // Array\n  const bindings = results.map(result => {\n    const name = result.title\n    const uri = result.uri // like http://data.europa.eu/esco/occupation/57af9090-55b4-4911-b2d0-86db01c00b02\n    return { name: { value: name, type: 'literal' }, subject: { type: 'IRI', value: uri } } // simulate SPARQL bindings\n  })\n  return bindings\n}\n\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryESCODataByName (filter: string, theClass:NamedNode, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.searchByNameURI) throw new Error('Missing queryTarget.searchByNameURI on queryESCODataByName')\n  const limit = queryTarget.limit || AUTOCOMPLETE_LIMIT\n  const queryURI = queryTarget.searchByNameURI\n    .replace('$(name)', filter)\n    .replace('$(limit)', '' + limit)\n    .replace('$(targetClass)', theClass.toNT())\n  debug.log('Querying ESCO data - uri: ' + queryURI)\n\n  const response = await store.fetcher?.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n  const text = response?.responseText || ''\n  debug.log('    Query result  text' + text.slice(0, 500) + '...')\n  if (text.length === 0) throw new Error('Wot no text back from ESCO query ' + queryURI)\n  const json = JSON.parse(text)\n  // console.log('Whole JSON return object', json)\n  debug.log('    ESCO Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n  return ESCOResultToBindings(json)\n}\n\n/* Cope ithe syntax probelm in wikidata timeout responses\n*\n* Wikidata bug: https://phabricator.wikimedia.org/T283962\n* This will not be needed whn that  WDQS bug fixed.\n* This is aptured in https://github.com/solidos/solid-ui/issues/403\n*/\nfunction fixWikidataJSON (str) {\n  const syntaxProblem = str.indexOf('SPARQL-QUERY')\n  if (syntaxProblem < 0) return str\n  // console.log('@@ fixWikidataJSON FIXING')\n  debug.warn('  ### Fixing JSON with wikidata error code injection ' + str.slice(syntaxProblem, syntaxProblem + 200))\n  const goodness = str.lastIndexOf('}, {')\n  return str.slice(0, goodness) + ' } ] } } ' // Close binding, array, bindings, results, root object\n}\n/*  Query all entities of given class and partially matching name\n*/\nexport async function queryPublicDataByName (\n  filter: string,\n  theClass:NamedNode,\n  languages: Array<string>,\n  queryTarget: QueryParameters): Promise<Bindings> {\n  function substituteStrings (template: string):string {\n    const limit = queryTarget.limit || AUTOCOMPLETE_LIMIT\n    const u1 = template.replace('$(name)', filter)\n      .replace('$(limit)', '' + limit)\n      .replace('$(language)', language)\n    return u1.replace('$(targetClass)', theClass.toNT())\n  }\n\n  if (!theClass) {\n    throw new Error('queryPublicDataByName: No class provided')\n  }\n\n  const languagePrefs = await getPreferredLanguages() || defaultPreferredLanguages\n  const language = languagePrefs[0] || 'en'\n  if (queryTarget.searchByNameQuery) {\n    const sparql = substituteStrings(queryTarget.searchByNameQuery)\n    debug.log('Querying public data - sparql: ' + sparql)\n    return queryPublicDataSelect(sparql, queryTarget)\n  } else if (queryTarget.searchByNameURI) { // not sparql - random API\n    const queryURI = substituteStrings(queryTarget.searchByNameURI)\n    let response\n    try {\n      response = await store.fetcher?.webOperation('GET', queryURI, fetcherOptionsJsonPublicData)\n    } catch (err) {\n      throw new Error(`Exception when trying to fetch ${queryURI} \\n ${err}`)\n    }\n    const text = response.responseText || '' // ts\n    if (response.status !== 200) {\n      throw new Error(`HTTP error status ${response.status} trying to fetch ${queryURI} `)\n    }\n    debug.log('    Query result  text' + text.slice(0, 500) + '...')\n    if (text.length === 0) throw new Error('queryPublicDataByName: No text back from public data query ' + queryURI)\n    const text2 = fixWikidataJSON(text) // Kludge: strip of interrupting error message\n    const json = JSON.parse(text2)\n    debug.log('    API Query result JSON' + JSON.stringify(json, null, 4).slice(0, 500) + '...')\n    if ((json as any)._embedded) {\n      debug.log('      Looks like ESCO')\n      const bindings = ESCOResultToBindings(json)\n      return bindings\n    } else {\n      alert('Code me: unrecognized API return format')\n      throw new Error(`*** Need to add code to parse unrecognized API JSON return\\n${JSON.stringify(json, null, 4)}`)\n    }\n  } else {\n    throw new Error('Query source must have either rest API or SPARQL endpoint.')\n  }\n}\n\n/* Query a database using SPARQL SELECT\n*/\nexport async function queryPublicDataSelect (sparql: string, queryTarget: QueryParameters): Promise<Bindings> {\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataSelect')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataSelect uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'application/json')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS - as we know it is public\n    headers\n  }\n\n  const response = await store.fetcher?.webOperation('GET', queryURI, options)\n\n  const text = response?.responseText || ''\n  if (text.length === 0) throw new Error('No text back from query ' + queryURI)\n  const text2 = fixWikidataJSON(text)\n  const json = JSON.parse(text2)\n  debug.log('    Query result JSON' + JSON.stringify(json, null, 4).slice(0, 100) + '...')\n  const bindings = json.results.bindings\n  return bindings\n}\n\n/* Load from a database using SPARQL CONSTRUCT\n*/\nexport async function queryPublicDataConstruct (sparql: string, pubicId: NamedNode, queryTarget: QueryParameters): Promise<void> {\n  debug.log('queryPublicDataConstruct: sparql:', sparql)\n  if (!queryTarget.endpoint) throw new Error('Missing queryTarget.endpoint required for queryPublicDataConstruct')\n  const myUrlWithParams = new URL(queryTarget.endpoint)\n  myUrlWithParams.searchParams.append('query', sparql)\n  const queryURI = myUrlWithParams.href\n  debug.log(' queryPublicDataConstruct uri: ' + queryURI)\n  const headers = new Headers()\n  headers.append('Accept', 'text/turtle')\n  const options = {\n    credentials: 'omit' as 'include' | 'omit' | undefined, // CORS // @tsc pain\n    headers // ({ Accept: 'text/turtle' } as Headers)\n  }\n  const response = await store.fetcher?.webOperation('GET', queryURI, options)\n  const text = response?.responseText || 'No response text?'\n  const report = text.length > 500 ? text.slice(0, 200) + ' ... ' + text.slice(-200) : text\n  debug.log('    queryPublicDataConstruct result text:' + report)\n  if (text.length === 0) throw new Error('queryPublicDataConstruct: No text back from construct query:' + queryURI)\n  parse(text, store, pubicId.uri, 'text/turtle')\n}\n\nexport async function loadPublicDataThing (kb, subject: NamedNode, publicDataID: NamedNode) {\n  if (publicDataID.uri.startsWith('https://dbpedia.org/resource/')) {\n    return getDbpediaDetails(kb, subject, publicDataID)\n  } else if (publicDataID.uri.match(/^https?:\\/\\/www\\.wikidata\\.org\\/entity\\/.*/)) {\n    // const QId = publicDataID.uri.split('/')[4]\n    // const dataURI = `http://www.wikidata.org/wiki/Special:EntityData/${QId}.ttl`\n    // In fact loading the data URI gives much too much irrelevant data, from wikidata, so we do a query.\n    await getWikidataDetails(kb, subject, publicDataID)\n    // await getWikidataLocation(kb, subject, publicDataID)  -- should get that in the details query now\n  } else {\n    const iDToFetch = publicDataID.uri.startsWith('http:')\n      ? kb.sym('https:' + publicDataID.uri.slice(5))\n      : publicDataID\n    const headers = new Headers()\n    headers.append('Accept', 'text/turtle')\n    return kb.fetcher.load(iDToFetch, {\n      credentials: 'omit' as 'include' | 'omit' | undefined,\n      headers\n    })\n  }\n}\n\nexport async function getWikidataDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const subjRegexp = /wd:Q49108/g\n  const sparql = instituteDetailsWikidataQuery.replace(subjRegexp, publicDataID.toNT())\n  await queryPublicDataConstruct(sparql, publicDataID, wikidataParameters)\n  debug.log('getWikidataDetails: loaded.', publicDataID)\n}\n\nexport async function getWikidataDetailsOld (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n  optional { $(subject)  wdt:P31  ?targetClass } # instance of\n  optional { $(subject)  wdt:P154  ?logo }\n  optional { $(subject)  wdt:P158  ?sealImage }\n# optional { $(subject)  wdt:P159  ?headquartersLocation }\n\noptional { $(subject)  wdt:P17  ?country }\noptional { $(subject)  wdt:P18  ?image }\noptional { $(subject)  wdt:P1813  ?shortName }\n\noptional { $(subject)  wdt:P355  ?subsidiary }\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`\n    .replace(subjectRegexp, publicDataID.toNT())\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // arg2 was solidSubject\n}\n\nexport async function getWikidataLocation (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n  const sparql = `select distinct *  where {\n\n  $(subject) wdt:P276 ?location .\n\n  optional { ?location  wdt:P2044  ?elevation }\n  optional { ?location  wdt:P131  ?region }\n  optional { ?location wdt:P625 ?coordinates }\noptional {  ?location  wdt:P17  ?country }\n\n# SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr,en,de,it\" }\n}`.replace(subjectRegexp, publicDataID.toNT())\n  debug.log(' location query sparql:' + sparql)\n  const bindings = await queryPublicDataSelect(sparql, wikidataParameters)\n  debug.log(' location query bindings:', bindings)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc()) // was solidSubject\n}\n\nexport async function getDbpediaDetails (kb, solidSubject:NamedNode, publicDataID:NamedNode) {\n// Note below the string form of the named node with <> works in SPARQL\n  const sparql = `select distinct ?city, ?state, ?country, ?homepage, ?logo, ?lat, ?long,  WHERE {\n    OPTIONAL { <${publicDataID}> <http://dbpedia.org/ontology/city> ?city }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/state> ?state }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n    OPTIONAL { ${publicDataID} foaf:homepage ?homepage }\n    OPTIONAL { ${publicDataID} foaf:lat ?lat; foaf:long ?long }\n    OPTIONAL { ${publicDataID} <http://dbpedia.org/ontology/country> ?country }\n   }`\n  const bindings = await queryPublicDataSelect(sparql, dbpediaParameters)\n  loadFromBindings(kb, publicDataID, bindings, publicDataID.doc())\n  debug.log('Finished getDbpediaDetails.')\n}\n"],"mappings":"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"}