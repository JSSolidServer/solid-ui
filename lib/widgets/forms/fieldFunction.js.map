{"version":3,"file":"fieldFunction.js","names":["store","solidLogicSingleton","field","mostSpecificClassURI","x","kb","ft","findTypeURIs","bot","bottomTypeURIs","bots","b","push","fieldFunction","dom","fieldInQuestion","uri","fun","debug","dom2","container","box","errorMessageBlock","appendChild"],"sources":["../../../src/widgets/forms/fieldFunction.ts"],"sourcesContent":["import { Node } from 'rdflib'\nimport { solidLogicSingleton } from 'solid-logic'\nimport { debug } from '../../log'\nimport { errorMessageBlock } from '../error'\n\nconst store = solidLogicSingleton.store\n\nexport type FieldFunction = (\n  dom: HTMLDocument, // the DOM\n  container: HTMLElement | undefined, // if defined, the box will be appended to it\n  already: { }, // used to avoid looping in nested forms\n  subject: Node, // the thing for which data will be loaded into the form element\n  form: Node, // the RDF declaration for what the form should have\n  doc: Node, // the online RDF document for data binding (form input values will be read/saved automatically)\n  callbackFunction: (ok: boolean, errorMessage: string) => void // this will be called when data changes (TODO: check this with unit tests)\n) => HTMLElement\n\nexport const field: { [classUri: string]: FieldFunction } = {} // Form field functions by URI of field type.\n\n/**\n * Which class of field is this? Relies on http://www.w3.org/2000/01/rdf-schema#subClassOf and\n * https://linkeddata.github.io/rdflib.js/doc/classes/formula.html#bottomtypeuris\n * to find the most specific RDF type if there are multiple.\n *\n * @param x a form field, e.g. `namedNode('https://timbl.com/timbl/Public/Test/Forms/individualForm.ttl#fullNameField')`\n * @returns the URI of the most specific known class, e.g. `http://www.w3.org/ns/ui#SingleLineTextField`\n */\nexport function mostSpecificClassURI (x: Node): string {\n  const kb = store\n  const ft = kb.findTypeURIs(x as any)\n  const bot = kb.bottomTypeURIs(ft) // most specific\n  const bots: any[] = []\n  for (const b in bot) bots.push(b)\n  // if (bots.length > 1) throw \"Didn't expect \"+x+\" to have multiple bottom types: \"+bots\n  return bots[0]\n}\n\n/**\n * Returns a function that creates a form widget\n * @param dom unused\n * @param fieldInQuestion the field for which to create a form, e.g. namedNode('https://timbl.com/timbl/Public/Test/Forms/individualForm.ttl#fullNameField')\n */\nexport function fieldFunction (dom: any /* unused */, fieldInQuestion: Node): FieldFunction {\n  const uri = mostSpecificClassURI(fieldInQuestion) // What type\n  // const uri = field.uri\n  const fun = field[uri]\n  debug(\n    'paneUtils: Going to implement field ' + fieldInQuestion + ' of type ' + uri\n  )\n  if (!fun) {\n    return function (dom2: HTMLDocument, container?: HTMLElement): HTMLElement {\n      const box = errorMessageBlock(\n        dom2,\n        'No handler for field ' + fieldInQuestion + ' of type ' + uri\n      )\n      if (container) container.appendChild(box)\n\n      return box\n    }\n  }\n  return fun\n}\n"],"mappings":";;;;;;;;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,+BAAmB,CAACD,KAAK;AAYhC,IAAME,KAA4C,GAAG,CAAC,CAAC,EAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQO,SAASC,oBAAoB,CAAEC,CAAO,EAAU;EACrD,IAAMC,EAAE,GAAGL,KAAK;EAChB,IAAMM,EAAE,GAAGD,EAAE,CAACE,YAAY,CAACH,CAAC,CAAQ;EACpC,IAAMI,GAAG,GAAGH,EAAE,CAACI,cAAc,CAACH,EAAE,CAAC,EAAC;EAClC,IAAMI,IAAW,GAAG,EAAE;EACtB,KAAK,IAAMC,CAAC,IAAIH,GAAG;IAAEE,IAAI,CAACE,IAAI,CAACD,CAAC,CAAC;EAAA;EACjC;EACA,OAAOD,IAAI,CAAC,CAAC,CAAC;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASG,aAAa,CAAEC,GAAQ,EAAeC,eAAqB,EAAiB;EAC1F,IAAMC,GAAG,GAAGb,oBAAoB,CAACY,eAAe,CAAC,EAAC;EAClD;EACA,IAAME,GAAG,GAAGf,KAAK,CAACc,GAAG,CAAC;EACtB,IAAAE,UAAK,EACH,sCAAsC,GAAGH,eAAe,GAAG,WAAW,GAAGC,GAAG,CAC7E;EACD,IAAI,CAACC,GAAG,EAAE;IACR,OAAO,UAAUE,IAAkB,EAAEC,SAAuB,EAAe;MACzE,IAAMC,GAAG,GAAG,IAAAC,wBAAiB,EAC3BH,IAAI,EACJ,uBAAuB,GAAGJ,eAAe,GAAG,WAAW,GAAGC,GAAG,CAC9D;MACD,IAAII,SAAS,EAAEA,SAAS,CAACG,WAAW,CAACF,GAAG,CAAC;MAEzC,OAAOA,GAAG;IACZ,CAAC;EACH;EACA,OAAOJ,GAAG;AACZ"}