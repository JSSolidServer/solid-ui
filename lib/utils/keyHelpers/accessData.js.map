{"version":3,"file":"accessData.js","names":["debug","_interopRequireWildcard","require","_solidLogic","ns","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","pubKeyUrl","_ref","_asyncToGenerator2","_regenerator","mark","_callee","webId","_store$any","_parentSettings","parentSettings","wrap","_callee$","_context","prev","next","store","any","space","doc","value","split","slice","join","Error","concat","abrupt","stop","_x","apply","arguments","exports","getExistingPublicKey","_x2","_x3","_getExistingPublicKey","_callee3","publicKeyUrl","_callee3$","_context3","getKeyIfExists","sent","privKeyUrl","_ref2","_callee2","_store$any2","_settings","settings","_callee2$","_context2","_x4","getExistingPrivateKey","_x5","_x6","_getExistingPrivateKey","_callee4","privateKeyUrl","_callee4$","_context4","_x7","_x8","_x9","_getKeyIfExists","_callee5","keyUrl","keyType","_callee5$","_context5","fetcher","load","solid","t0","response","status","log","webOperation","data","contentType","t1","requested","undefined"],"sources":["../../../src/utils/keyHelpers/accessData.ts"],"sourcesContent":["import * as debug from '../../debug'\nimport { store } from 'solid-logic'\nimport * as ns from '../../ns'\nimport { NamedNode } from 'rdflib'\n\n/* export const getPodRoot = async (webId: NamedNode) => {\n  const webIdURL = new URL(webId.uri)\n  // find storages in webId document\n  await store.fetcher.load(webId.uri)\n  const storages = store.each(webId, ns.space('storage'), null, webId.doc())\n  var podRoot: NamedNode | undefined\n  if (!storages?.length) {\n    // find storage recursively in webId URL\n    let path = webIdURL.pathname\n    while (path.length) {\n      path = path.substring(0, path.lastIndexOf('/'))\n      podRoot = store.sym(webIdURL.origin + path + '/')\n      const res = await store.fetcher.webOperation('HEAD', podRoot.uri)\n      if (res.headers.get('link')?.includes(ns.space('Storage').value)) break\n      if (!path) debug.warn(`Current user storage not found for\\n${webId}`)\n    }\n  } else {\n    // give preference to storage in webId root\n    podRoot = storages.find((storage) => webIdURL.origin === new URL(storage.value).origin) as NamedNode\n    if (!podRoot) podRoot = storages[0] as NamedNode\n  }\n\n  return podRoot as NamedNode\n} */\n\nexport const pubKeyUrl = async (webId: NamedNode) => {\n  let parentSettings = store.any(webId, ns.space('preferencesFile'), null, webId.doc())?.value\n  parentSettings = parentSettings?.split('/').slice(0, -2).join('/')\n  if (!parentSettings) throw new Error(`prefererencesFile is expected to exist in ${webId.doc}`)\n  return `${parentSettings}/profile/keys/publicKey.ttl`\n  /* try {\n    return (await getPodRoot(webId)).value + 'profile/keys/publicKey.ttl'\n  } catch (err) { throw new Error(err) } */\n}\n\nexport async function getExistingPublicKey (webId: NamedNode, publicKeyUrl: string) {\n  // find publickey\n  return await getKeyIfExists(webId, publicKeyUrl, 'publicKey')\n}\n\nexport const privKeyUrl = async (webId: NamedNode) => {\n  let settings = store.any(webId, ns.space('preferencesFile'), null, webId.doc())?.value\n  settings = settings?.split('/').slice(0, -1).join('/')\n  if (!settings) throw new Error(`prefererencesFile is expected to exist in ${webId.doc}`)\n  return `${settings}/keys/privateKey.ttl`\n  /* try {\n    const podRoot = await getPodRoot(webId)\n    if (!settings?.startsWith(podRoot.value)) throw new Error(`/settings/ is expected to be in ${podRoot.value}`)\n    return `${settings}/keys/privateKey.ttl`\n  } catch (err) { throw new Error(err) } */\n}\n\nexport async function getExistingPrivateKey (webId: NamedNode, privateKeyUrl: string) {\n  // find privateKey\n  return await getKeyIfExists(webId, privateKeyUrl, 'privateKey')\n}\n\ntype KeyType = 'publicKey' | 'privateKey'\n\nexport async function getKeyIfExists (webId: NamedNode, keyUrl: string, keyType: KeyType) {\n  try {\n    await store.fetcher.load(keyUrl)\n    const key = store.any(webId, ns.solid(keyType)) // store.sym(CERT + keyType))\n    return key?.value // as NamedNode\n  } catch (err) {\n    if (err.response.status === 404) {\n      debug.log(\n        'createIfNotExists: doc does NOT exist, will create... ' + keyUrl\n      )\n      try {\n        await store.fetcher.webOperation('PUT', keyUrl, {\n          data: '',\n          contentType: 'text/turtle'\n        })\n      } catch (err) {\n        debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n        throw err\n      }\n      delete store.fetcher.requested[keyUrl] // delete cached 404 error\n      // debug.log('createIfNotExists doc created ok ' + doc)\n      return undefined // response\n    } else {\n      debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n      throw err\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,EAAA,GAAAH,uBAAA,CAAAC,OAAA;AAA8B,SAAAG,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAL,wBAAAS,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,aAAAE,OAAA,CAAAF,GAAA,yBAAAA,GAAA,uCAAAA,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,cAAAN,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,IAAMW,SAAS;EAAA,IAAAC,IAAA,OAAAC,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAC,QAAOC,KAAgB;IAAA,IAAAC,UAAA,EAAAC,eAAA;IAAA,IAAAC,cAAA;IAAA,OAAAN,YAAA,YAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC1CL,cAAc,IAAAF,UAAA,GAAGQ,iBAAK,CAACC,GAAG,CAACV,KAAK,EAAE7B,EAAE,CAACwC,KAAK,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAEX,KAAK,CAACY,GAAG,EAAE,CAAC,cAAAX,UAAA,uBAAhEA,UAAA,CAAkEY,KAAK;UAC5FV,cAAc,IAAAD,eAAA,GAAGC,cAAc,cAAAD,eAAA,uBAAdA,eAAA,CAAgBY,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;UAAA,IAC7Db,cAAc;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAAQ,IAAIS,KAAK,8CAAAC,MAAA,CAA8ClB,KAAK,CAACY,GAAG,EAAG;QAAA;UAAA,OAAAN,QAAA,CAAAa,MAAA,cAAAD,MAAA,CACpFf,cAAc;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAc,IAAA;MAAA;IAAA,GAAArB,OAAA;EAAA,CAIzB;EAAA,gBARYL,SAASA,CAAA2B,EAAA;IAAA,OAAA1B,IAAA,CAAA2B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAQrB;AAAAC,OAAA,CAAA9B,SAAA,GAAAA,SAAA;AAAA,SAEqB+B,oBAAoBA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,qBAAA,CAAAN,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAK,sBAAA;EAAAA,qBAAA,OAAAhC,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAAnC,SAAA+B,SAAqC7B,KAAgB,EAAE8B,YAAoB;IAAA,OAAAjC,YAAA,YAAAO,IAAA,UAAA2B,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAzB,IAAA,GAAAyB,SAAA,CAAAxB,IAAA;QAAA;UAAAwB,SAAA,CAAAxB,IAAA;UAAA,OAEnEyB,cAAc,CAACjC,KAAK,EAAE8B,YAAY,EAAE,WAAW,CAAC;QAAA;UAAA,OAAAE,SAAA,CAAAb,MAAA,WAAAa,SAAA,CAAAE,IAAA;QAAA;QAAA;UAAA,OAAAF,SAAA,CAAAZ,IAAA;MAAA;IAAA,GAAAS,QAAA;EAAA,CAC9D;EAAA,OAAAD,qBAAA,CAAAN,KAAA,OAAAC,SAAA;AAAA;AAEM,IAAMY,UAAU;EAAA,IAAAC,KAAA,OAAAxC,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAuC,SAAOrC,KAAgB;IAAA,IAAAsC,WAAA,EAAAC,SAAA;IAAA,IAAAC,QAAA;IAAA,OAAA3C,YAAA,YAAAO,IAAA,UAAAqC,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAnC,IAAA,GAAAmC,SAAA,CAAAlC,IAAA;QAAA;UAC3CgC,QAAQ,IAAAF,WAAA,GAAG7B,iBAAK,CAACC,GAAG,CAACV,KAAK,EAAE7B,EAAE,CAACwC,KAAK,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAEX,KAAK,CAACY,GAAG,EAAE,CAAC,cAAA0B,WAAA,uBAAhEA,WAAA,CAAkEzB,KAAK;UACtF2B,QAAQ,IAAAD,SAAA,GAAGC,QAAQ,cAAAD,SAAA,uBAARA,SAAA,CAAUzB,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;UAAA,IACjDwB,QAAQ;YAAAE,SAAA,CAAAlC,IAAA;YAAA;UAAA;UAAA,MAAQ,IAAIS,KAAK,8CAAAC,MAAA,CAA8ClB,KAAK,CAACY,GAAG,EAAG;QAAA;UAAA,OAAA8B,SAAA,CAAAvB,MAAA,cAAAD,MAAA,CAC9EsB,QAAQ;QAAA;QAAA;UAAA,OAAAE,SAAA,CAAAtB,IAAA;MAAA;IAAA,GAAAiB,QAAA;EAAA,CAMnB;EAAA,gBAVYF,UAAUA,CAAAQ,GAAA;IAAA,OAAAP,KAAA,CAAAd,KAAA,OAAAC,SAAA;EAAA;AAAA,GAUtB;AAAAC,OAAA,CAAAW,UAAA,GAAAA,UAAA;AAAA,SAEqBS,qBAAqBA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,sBAAA,CAAAzB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAwB,uBAAA;EAAAA,sBAAA,OAAAnD,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAApC,SAAAkD,SAAsChD,KAAgB,EAAEiD,aAAqB;IAAA,OAAApD,YAAA,YAAAO,IAAA,UAAA8C,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAA5C,IAAA,GAAA4C,SAAA,CAAA3C,IAAA;QAAA;UAAA2C,SAAA,CAAA3C,IAAA;UAAA,OAErEyB,cAAc,CAACjC,KAAK,EAAEiD,aAAa,EAAE,YAAY,CAAC;QAAA;UAAA,OAAAE,SAAA,CAAAhC,MAAA,WAAAgC,SAAA,CAAAjB,IAAA;QAAA;QAAA;UAAA,OAAAiB,SAAA,CAAA/B,IAAA;MAAA;IAAA,GAAA4B,QAAA;EAAA,CAChE;EAAA,OAAAD,sBAAA,CAAAzB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAIqBU,cAAcA,CAAAmB,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAjC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAgC,gBAAA;EAAAA,eAAA,OAAA3D,kBAAA,2BAAAC,YAAA,YAAAC,IAAA,CAA7B,SAAA0D,SAA+BxD,KAAgB,EAAEyD,MAAc,EAAEC,OAAgB;IAAA,IAAAtE,GAAA;IAAA,OAAAS,YAAA,YAAAO,IAAA,UAAAuD,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAArD,IAAA,GAAAqD,SAAA,CAAApD,IAAA;QAAA;UAAAoD,SAAA,CAAArD,IAAA;UAAAqD,SAAA,CAAApD,IAAA;UAAA,OAE9EC,iBAAK,CAACoD,OAAO,CAACC,IAAI,CAACL,MAAM,CAAC;QAAA;UAC1BrE,GAAG,GAAGqB,iBAAK,CAACC,GAAG,CAACV,KAAK,EAAE7B,EAAE,CAAC4F,KAAK,CAACL,OAAO,CAAC,CAAC,EAAC;UAAA,OAAAE,SAAA,CAAAzC,MAAA,WACzC/B,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEyB,KAAK;QAAA;UAAA+C,SAAA,CAAArD,IAAA;UAAAqD,SAAA,CAAAI,EAAA,GAAAJ,SAAA;UAAA,MAEbA,SAAA,CAAAI,EAAA,CAAIC,QAAQ,CAACC,MAAM,KAAK,GAAG;YAAAN,SAAA,CAAApD,IAAA;YAAA;UAAA;UAC7BzC,KAAK,CAACoG,GAAG,CACP,wDAAwD,GAAGV,MAAM,CAClE;UAAAG,SAAA,CAAArD,IAAA;UAAAqD,SAAA,CAAApD,IAAA;UAAA,OAEOC,iBAAK,CAACoD,OAAO,CAACO,YAAY,CAAC,KAAK,EAAEX,MAAM,EAAE;YAC9CY,IAAI,EAAE,EAAE;YACRC,WAAW,EAAE;UACf,CAAC,CAAC;QAAA;UAAAV,SAAA,CAAApD,IAAA;UAAA;QAAA;UAAAoD,SAAA,CAAArD,IAAA;UAAAqD,SAAA,CAAAW,EAAA,GAAAX,SAAA;UAEF7F,KAAK,CAACoG,GAAG,CAAC,gCAAgC,GAAGV,MAAM,GAAG,IAAI,GAAAG,SAAA,CAAAW,EAAM,CAAC;UAAA,MAAAX,SAAA,CAAAW,EAAA;QAAA;UAGnE,OAAO9D,iBAAK,CAACoD,OAAO,CAACW,SAAS,CAACf,MAAM,CAAC,EAAC;UACvC;UAAA,OAAAG,SAAA,CAAAzC,MAAA,WACOsD,SAAS;QAAA;UAEhB1G,KAAK,CAACoG,GAAG,CAAC,gCAAgC,GAAGV,MAAM,GAAG,IAAI,GAAAG,SAAA,CAAAI,EAAM,CAAC;UAAA,MAAAJ,SAAA,CAAAI,EAAA;QAAA;QAAA;UAAA,OAAAJ,SAAA,CAAAxC,IAAA;MAAA;IAAA,GAAAoC,QAAA;EAAA,CAItE;EAAA,OAAAD,eAAA,CAAAjC,KAAA,OAAAC,SAAA;AAAA"}