{"version":3,"file":"accessData.js","names":["debug","_interopRequireWildcard","require","_solidLogic","ns","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","pubKeyUrl","exports","_ref","_asyncToGenerator2","_regenerator","mark","_callee","webId","_store$any","_parentSettings","parentSettings","wrap","_callee$","_context","prev","next","store","any","space","doc","value","split","slice","join","Error","concat","abrupt","stop","_x","apply","arguments","getExistingPublicKey","_x2","_x3","_getExistingPublicKey","_callee3","publicKeyUrl","_callee3$","_context3","getKeyIfExists","sent","privKeyUrl","_ref2","_callee2","_store$any2","_settings","settings","_callee2$","_context2","_x4","getExistingPrivateKey","_x5","_x6","_getExistingPrivateKey","_callee4","privateKeyUrl","_callee4$","_context4","_x7","_x8","_x9","_getKeyIfExists","_callee5","keyUrl","keyType","key","_callee5$","_context5","fetcher","load","solid","t0","response","status","log","webOperation","data","contentType","t1","requested","undefined"],"sources":["../../../src/utils/keyHelpers/accessData.ts"],"sourcesContent":["import * as debug from '../../debug'\nimport { store } from 'solid-logic'\nimport * as ns from '../../ns'\nimport { NamedNode } from 'rdflib'\n\n/* export const getPodRoot = async (webId: NamedNode) => {\n  const webIdURL = new URL(webId.uri)\n  // find storages in webId document\n  await store.fetcher.load(webId.uri)\n  const storages = store.each(webId, ns.space('storage'), null, webId.doc())\n  var podRoot: NamedNode | undefined\n  if (!storages?.length) {\n    // find storage recursively in webId URL\n    let path = webIdURL.pathname\n    while (path.length) {\n      path = path.substring(0, path.lastIndexOf('/'))\n      podRoot = store.sym(webIdURL.origin + path + '/')\n      const res = await store.fetcher.webOperation('HEAD', podRoot.uri)\n      if (res.headers.get('link')?.includes(ns.space('Storage').value)) break\n      if (!path) debug.warn(`Current user storage not found for\\n${webId}`)\n    }\n  } else {\n    // give preference to storage in webId root\n    podRoot = storages.find((storage) => webIdURL.origin === new URL(storage.value).origin) as NamedNode\n    if (!podRoot) podRoot = storages[0] as NamedNode\n  }\n\n  return podRoot as NamedNode\n} */\n\nexport const pubKeyUrl = async (webId: NamedNode) => {\n  let parentSettings = store.any(webId, ns.space('preferencesFile'), null, webId.doc())?.value\n  parentSettings = parentSettings?.split('/').slice(0, -2).join('/')\n  if (!parentSettings) throw new Error(`prefererencesFile is expected to exist in ${webId.doc}`)\n  return `${parentSettings}/profile/keys/publicKey.ttl`\n  /* try {\n    return (await getPodRoot(webId)).value + 'profile/keys/publicKey.ttl'\n  } catch (err) { throw new Error(err) } */\n}\n\nexport async function getExistingPublicKey (webId: NamedNode, publicKeyUrl: string) {\n  // find publickey\n  return await getKeyIfExists(webId, publicKeyUrl, 'publicKey')\n}\n\nexport const privKeyUrl = async (webId: NamedNode) => {\n  let settings = store.any(webId, ns.space('preferencesFile'), null, webId.doc())?.value\n  settings = settings?.split('/').slice(0, -1).join('/')\n  if (!settings) throw new Error(`prefererencesFile is expected to exist in ${webId.doc}`)\n  return `${settings}/keys/privateKey.ttl`\n  /* try {\n    const podRoot = await getPodRoot(webId)\n    if (!settings?.startsWith(podRoot.value)) throw new Error(`/settings/ is expected to be in ${podRoot.value}`)\n    return `${settings}/keys/privateKey.ttl`\n  } catch (err) { throw new Error(err) } */\n}\n\nexport async function getExistingPrivateKey (webId: NamedNode, privateKeyUrl: string) {\n  // find privateKey\n  return await getKeyIfExists(webId, privateKeyUrl, 'privateKey')\n}\n\ntype KeyType = 'publicKey' | 'privateKey'\n\nexport async function getKeyIfExists (webId: NamedNode, keyUrl: string, keyType: KeyType) {\n  try {\n    await store.fetcher.load(keyUrl)\n    const key = store.any(webId, ns.solid(keyType)) // store.sym(CERT + keyType))\n    return key?.value // as NamedNode\n  } catch (err) {\n    if (err.response.status === 404) {\n      debug.log(\n        'createIfNotExists: doc does NOT exist, will create... ' + keyUrl\n      )\n      try {\n        await store.fetcher.webOperation('PUT', keyUrl, {\n          data: '',\n          contentType: 'text/turtle'\n        })\n      } catch (err) {\n        debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n        throw err\n      }\n      delete store.fetcher.requested[keyUrl] // delete cached 404 error\n      // debug.log('createIfNotExists doc created ok ' + doc)\n      return undefined // response\n    } else {\n      debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n      throw err\n    }\n  }\n}\n"],"mappings":"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"}