{"version":3,"file":"accessData.js","names":["debug","_interopRequireWildcard","require","_solidLogic","ns","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getPodRoot","_ref","_asyncToGenerator2","_regenerator","mark","_callee","webId","webIdURL","storages","podRoot","path","_res$headers$get","res","wrap","_callee$","_context","prev","next","URL","uri","store","fetcher","load","each","space","doc","length","pathname","substring","lastIndexOf","sym","origin","webOperation","sent","headers","includes","value","abrupt","warn","concat","find","storage","stop","_x","apply","arguments","exports","pubKeyUrl","_ref2","_callee2","_callee2$","_context2","t0","t1","Error","_x2","getExistingPublicKey","_x3","_x4","_getExistingPublicKey","_callee4","publicKeyUrl","_callee4$","_context4","getKeyIfExists","privKeyUrl","_ref3","_callee3","_store$any","_settings","settings","_settings2","_callee3$","_context3","any","split","slice","join","startsWith","_x5","getExistingPrivateKey","_x6","_x7","_getExistingPrivateKey","_callee5","privateKeyUrl","_callee5$","_context5","_x8","_x9","_x10","_getKeyIfExists","_callee6","keyUrl","keyType","_callee6$","_context6","solid","response","status","log","data","contentType","requested","undefined"],"sources":["../../../src/utils/keyHelpers/accessData.ts"],"sourcesContent":["import * as debug from '../../debug'\nimport { store } from 'solid-logic'\nimport * as ns from '../../ns'\nimport { NamedNode } from 'rdflib'\n\nexport const getPodRoot = async (webId: NamedNode) => {\n  const webIdURL = new URL(webId.uri)\n  // find storages in webId document\n  await store.fetcher.load(webId.uri)\n  const storages = store.each(webId, ns.space('storage'), null, webId.doc())\n  var podRoot: NamedNode | undefined\n  if (!storages?.length) {\n    // find storage recursively in webId URL\n    let path = webIdURL.pathname\n    while (path.length) {\n      path = path.substring(0, path.lastIndexOf('/'))\n      podRoot = store.sym(webIdURL.origin + path + '/')\n      const res = await store.fetcher.webOperation('HEAD', podRoot.uri)\n      if (res.headers.get('link')?.includes(ns.space('Storage').value)) break\n      if (!path) debug.warn(`Current user storage not found for\\n${webId}`)\n    }\n  } else {\n    // give preference to storage in webId root\n    podRoot = storages.find((storage) => webIdURL.origin === new URL(storage.value).origin) as NamedNode\n    if (!podRoot) podRoot = storages[0] as NamedNode\n  }\n  return podRoot as NamedNode\n}\n\nexport const pubKeyUrl = async (webId: NamedNode) => {\n  try {\n    return (await getPodRoot(webId)).value + 'profile/keys/publicKey.ttl'\n  } catch (err) { throw new Error(err) }\n}\n\nexport async function getExistingPublicKey (webId: NamedNode, publicKeyUrl: string) {\n  // find publickey\n  return await getKeyIfExists(webId, publicKeyUrl, 'publicKey')\n}\n\nexport const privKeyUrl = async (webId: NamedNode) => {\n  let settings = store.any(webId, ns.space('preferencesFile'), null, webId.doc())?.value\n  settings = settings?.split('/').slice(0, -1).join('/')\n  try {\n    const podRoot = await getPodRoot(webId)\n    if (!settings?.startsWith(podRoot.value)) throw new Error(`/settings/ is expected to be in ${podRoot.value}`)\n    return `${settings}/keys/privateKey.ttl`\n  } catch (err) { throw new Error(err) }\n}\n\nexport async function getExistingPrivateKey (webId: NamedNode, privateKeyUrl: string) {\n  // find privateKey\n  return await getKeyIfExists(webId, privateKeyUrl, 'privateKey')\n}\n\ntype KeyType = 'publicKey' | 'privateKey'\n\nexport async function getKeyIfExists (webId: NamedNode, keyUrl: string, keyType: KeyType) {\n  try {\n    await store.fetcher.load(keyUrl)\n    const key = store.any(webId, ns.solid(keyType)) // store.sym(CERT + keyType))\n    return key?.value // as NamedNode\n  } catch (err) {\n    if (err.response.status === 404) {\n      debug.log(\n        'createIfNotExists: doc does NOT exist, will create... ' + keyUrl\n      )\n      try {\n        await store.fetcher.webOperation('PUT', keyUrl, {\n          data: '',\n          contentType: 'text/turtle'\n        })\n      } catch (err) {\n        debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n        throw err\n      }\n      delete store.fetcher.requested[keyUrl] // delete cached 404 error\n      // debug.log('createIfNotExists doc created ok ' + doc)\n      return undefined // response\n    } else {\n      debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n      throw err\n    }\n  }\n}\n"],"mappings":"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"}