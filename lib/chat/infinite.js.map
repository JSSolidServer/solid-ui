{"version":3,"file":"infinite.js","names":["desktopNotification","str","window","debug","warn","Notification","permission","requestPermission","then","insertMessageIntoTable","channelObject","messageTable","message","fresh","options","userContext","messageRow","renderMessageRow","selectedMessage","sameTerm","style","backgroundColor","selectedElement","done","ele","firstChild","nextSibling","newestFirst","newestfirst","dateString","AJAR_date","insertBefore","appendChild","infiniteMessageArea","dom","wasStore","chatChannel","syncMessages","addMessage","insertPreviousMessages","removePreviousMessages","createMessageTable","renderMessageTable","addNewChatDocumentIfNewDay","appendCurrentMessages","loadMoreWhereNeeded","loadInitialContent","yank","fixScroll","scrollIntoView","block","liveMessageTable","inputRow","selectedMessageTable","selectedDocument","doc","now","Date","todayDocument","dateFolder","leafDocumentFromDate","live","selectedDate","dateFromLeafDocument","div","earliest","latest","setTimeout","addEventListener","solo","document","body","event","lock","freeze","magicZone","scrollTop","initial","extendBackwards","scrollHeight","scrollBottom","log","clientHeight","extendForwards","chatDocument","refresh","store","updater","addDownstreamChangeListener","newChatDocument","removeChild","oldChatDocument","holds","ns","rdfs","sts","$rdf","st","update","err","alert","date","scrollBackbutton","scrollForwardButton","setAttribute","icons","iconBase","disabled","extendedBack","setScrollBackbuttonIcon","sense","scrollBackIcon","getScrollbackIcon","scrollBackbuttonHandler","_event","extendedForwards","setScrollForwardButtonIcon","scrollForwardIcon","getScrollForwardButtonIcon","scrollForwardButtonHandler","createElement","tr","renderMessageEditor","infinite","scrollBackbuttonTR","scrollBackbuttonCell","widgets","button","dateCell","textContent","shortDate","toISOString","scrollForwardButtonCell","extendedForward","statementsMatching","wf","length","forEach","object","fetcher","load","statusTR","response","status","errorMessageBlock","backwards","previousSibling","extr","extremity","loadPrevious","todayDoc","newMessageTable","mostRecentVersion","isDeleted","showDeletedMessages","about","displayed","ele2","AJAR_subject","uri","messages","map","stored","m","refreshTree","authorDateOnLeft","ChatChannel","statusArea"],"sources":["../../src/chat/infinite.js"],"sourcesContent":["/**\n * Contains the [[infiniteMessageArea]] class\n * @packageDocumentation\n */\n// import { findBookmarkDocument } from './bookmarks'\nimport * as $rdf from 'rdflib' // pull in first avoid cross-refs\nimport { store } from 'solid-logic'\nimport * as debug from '../debug'\nimport { icons } from '../iconBase'\nimport * as ns from '../ns'\n// import * as style from '../style'\n// import * as utils from '../utils'\nimport * as widgets from '../widgets'\n// import * as pad from '../pad'\n// import { DateFolder } from './dateFolder'\nimport { ChatChannel, isDeleted, mostRecentVersion } from './chatLogic'\nimport { renderMessageEditor, renderMessageRow } from './message'\n\n// const UI = { authn, icons, ns, media, pad, $rdf, store, style, utils, widgets }\n\nexport function desktopNotification (str) {\n  // Let's check if the browser supports notifications\n  if (!('Notification' in window)) {\n    debug.warn('This browser does no t support desktop notification')\n  } else if (Notification.permission === 'granted') {\n    // Let's check whether notificatio n permissions have already been granted\n    // eslint-disable-next-line no-new\n    new Notification(str)\n  } else if (Notification.permission !== 'denied') {\n    // Otherwise, we need to ask the user for permission\n    Notification.requestPermission().then(function (permission) {\n      // If the user accepts, let's create a notification\n      if (permission === 'granted') {\n        // eslint-disable-next-line no-new\n        new Notification(str)\n      }\n    })\n  }\n  // At last, if the user has denied notifications, and you\n  // want to be respectful there is no need to bother them any more.\n}\n\n/**\n * Renders a chat message inside a `messageTable`\n */\nexport function insertMessageIntoTable (channelObject, messageTable, message, fresh, options, userContext) {\n  const messageRow = renderMessageRow(channelObject,\n    message,\n    fresh,\n    options,\n    userContext\n  )\n\n  // const message = messageRow.AJAR_subject\n  if (options.selectedMessage && options.selectedMessage.sameTerm(message)) {\n    messageRow.style.backgroundColor = 'yellow'\n    options.selectedElement = messageRow\n    messageTable.selectedElement = messageRow\n  }\n\n  let done = false\n  for (let ele = messageTable.firstChild; ; ele = ele.nextSibling) {\n    if (!ele) {\n      // empty\n      break\n    }\n    const newestFirst = options.newestfirst === true\n    const dateString = messageRow.AJAR_date\n    if (\n      (dateString > ele.AJAR_date && newestFirst) ||\n      (dateString < ele.AJAR_date && !newestFirst)\n    ) {\n      messageTable.insertBefore(messageRow, ele)\n      done = true\n      break\n    }\n  }\n  if (!done) {\n    messageTable.appendChild(messageRow)\n  }\n}\n\n/**\n * Common code for a chat (discussion area of messages about something)\n * This version runs over a series of files for different time periods\n *\n * Parameters for the whole chat like its title are stored on\n * index.ttl#this and the chats messages are stored in YYYY/MM/DD/chat.ttl\n *\n * Use to import store as param 2, now ignores it and uses the UI main store\n *\n * Options include:\n\n - shiftEnterSendsMessage: Use shift/enter to send message, Enter to add newline, instead of the reverse.\n - authorDateOnLeft:  Display the author's anme and date of the message in the left column instead of first above the content\n - selectedMessage: Display one message highlighted with the chat around it\n - solo: By itelf on a webpage, so user scroll anywhere in the web page scan scroll the chat.\n - newestFirst: Arrange the chat messages chronologically newest at the top insted of at the bottom\n - infinite:  Use infinite scroll\n - showDeletedMessages: Show messages which have been delted as \"deleted message\". Otherwise hide them.\n - expandImagesInline: If a URI by itself in a message looks like an image URI, replace it with the image\n - inlineImageHeightEms: The height (in ems) of images expaned from their URIs in the chat.\n\n */\nexport async function infiniteMessageArea (dom, wasStore, chatChannel, options) {\n  // ///////////////////////////////////////////////////////////////////////\n\n  function syncMessages (about, messageTable) {\n    const displayed = {}\n    let ele, ele2\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        displayed[ele.AJAR_subject.uri] = true\n      }\n    }\n\n    const messages = store\n      .statementsMatching(\n        about,\n        ns.wf('message'),\n        null,\n        messageTable.chatDocument\n      )\n      .map(st => {\n        return st.object\n      })\n    const stored = {}\n    messages.forEach(function (m) {\n      stored[m.uri] = true\n      if (!displayed[m.uri]) {\n        addMessage(m, messageTable)\n      }\n    })\n\n    // eslint-disable-next-line space-in-parens\n    for (ele = messageTable.firstChild; ele;) {\n      ele2 = ele.nextSibling\n      if (ele.AJAR_subject && !stored[ele.AJAR_subject.uri]) {\n        messageTable.removeChild(ele)\n      }\n      ele = ele2\n    }\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        // Refresh thumbs up etc\n        widgets.refreshTree(ele) // Things inside may have changed too\n      }\n    }\n  } // syncMessages\n\n  // Called once per original message displayed\n  function addMessage (message, messageTable) {\n    const latest = mostRecentVersion(message)\n    // const content = store.any(latest, ns.sioc('content'))\n    if (isDeleted(latest) && !options.showDeletedMessages) {\n      return // ignore deleted messaged -- @@ could also leave a placeholder\n    }\n    insertMessageIntoTable(channelObject,\n      messageTable,\n      message,\n      messageTable.fresh,\n      options,\n      userContext\n    ) // fresh from elsewhere\n  }\n\n  /* Add a new messageTable at the top/bottom\n   */\n  async function insertPreviousMessages (backwards) {\n    const extremity = backwards ? earliest : latest\n    let date = extremity.messageTable.date // day in mssecs\n\n    date = await dateFolder.loadPrevious(date, backwards) // backwards\n    debug.log(\n      `insertPreviousMessages: from ${\n        backwards ? 'backwards' : 'forwards'\n      } loadPrevious: ${date}`\n    )\n    if (!date && !backwards && !liveMessageTable) {\n      await appendCurrentMessages() // If necessary skip to today and add that\n    }\n    if (!date) return true // done\n    let live = false\n    if (!backwards) {\n      const todayDoc = dateFolder.leafDocumentFromDate(new Date())\n      const doc = dateFolder.leafDocumentFromDate(date)\n      live = doc.sameTerm(todayDoc) // Is this todays?\n    }\n    const newMessageTable = await createMessageTable(date, live)\n    extremity.messageTable = newMessageTable // move pointer to earliest\n    if (backwards ? newestFirst : !newestFirst) {\n      // put on bottom or top\n      div.appendChild(newMessageTable)\n    } else {\n      // put on top as we scroll back\n      div.insertBefore(newMessageTable, div.firstChild)\n    }\n    return live // not done\n  }\n\n  /* Remove message tables earlier than this one\n   */\n  function removePreviousMessages (backwards, messageTable) {\n    if (backwards ? newestFirst : !newestFirst) {\n      // it was put on bottom\n      while (messageTable.nextSibling) {\n        div.removeChild(messageTable.nextSibling)\n      }\n    } else {\n      // it was put on top as we scroll back\n      while (messageTable.previousSibling) {\n        div.removeChild(messageTable.previousSibling)\n      }\n    }\n    const extr = backwards ? earliest : latest\n    extr.messageTable = messageTable\n  }\n\n  /* Load and render message table\n   ** @returns DOM element generates\n   */\n  async function createMessageTable (date, live) {\n    debug.log('   createMessageTable for  ' + date)\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    try {\n      await store.fetcher.load(chatDocument)\n    } catch (err) {\n      const messageTable = dom.createElement('table')\n      const statusTR = messageTable.appendChild(dom.createElement('tr')) // ### find status in exception\n      if (err.response && err.response.status && err.response.status === 404) {\n        debug.log('Error 404 for chat file ' + chatDocument)\n        return renderMessageTable(date, live) // no mssage file is fine.. will be craeted later\n        // statusTR.appendChild(widgets.errorMessageBlock(dom, 'no message file', 'white'))\n      } else {\n        debug.log('*** Error NON 404 for chat file ' + chatDocument)\n        statusTR.appendChild(widgets.errorMessageBlock(dom, err, 'pink'))\n      }\n      return statusTR\n    }\n    return renderMessageTable(date, live)\n  }\n\n  function renderMessageTable (date, live) {\n    let scrollBackbutton\n    let scrollForwardButton\n\n    /// /////////////////   Scroll down adding more above\n\n    async function extendBackwards () {\n      const done = await insertPreviousMessages(true)\n      if (done) {\n        if (scrollBackbutton) {\n          scrollBackbutton.firstChild.setAttribute(\n            'src',\n            icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n          ) // T\n          scrollBackbutton.disabled = true\n        }\n        messageTable.initial = true\n      } else {\n        messageTable.extendedBack = true\n      }\n      setScrollBackbuttonIcon()\n      return done\n    }\n\n    function setScrollBackbuttonIcon () {\n      if (!scrollBackbutton) {\n        return\n      }\n      const sense = messageTable.extendedBack ? !newestFirst : newestFirst\n      const scrollBackIcon = messageTable.initial\n        ? 'noun_T-Block_1114655_000000.svg'\n        : getScrollbackIcon(sense)\n      scrollBackbutton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollBackIcon\n      )\n\n      function getScrollbackIcon (sense) {\n        return sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    async function scrollBackbuttonHandler (_event) {\n      if (messageTable.extendedBack) {\n        removePreviousMessages(true, messageTable)\n        messageTable.extendedBack = false\n        setScrollBackbuttonIcon()\n      } else {\n        await extendBackwards()\n      }\n    }\n\n    /// ////////////// Scroll up adding more below\n\n    async function extendForwards () {\n      const done = await insertPreviousMessages(false)\n      if (done) {\n        scrollForwardButton.firstChild.setAttribute(\n          'src',\n          icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n        )\n        scrollForwardButton.disabled = true\n        messageTable.final = true\n      } else {\n        messageTable.extendedForwards = true\n      }\n      setScrollForwardButtonIcon()\n      return done\n    }\n\n    function setScrollForwardButtonIcon () {\n      const sense = messageTable.extendedForwards ? !newestFirst : newestFirst // noun_T-Block_1114657_000000.svg\n      const scrollForwardIcon = messageTable.final\n        ? 'noun_T-Block_1114657_000000.svg'\n        : getScrollForwardButtonIcon(sense)\n      scrollForwardButton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollForwardIcon\n      )\n\n      function getScrollForwardButtonIcon (sense) {\n        return !sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    async function scrollForwardButtonHandler (_event) {\n      if (messageTable.extendedForwards) {\n        removePreviousMessages(false, messageTable)\n        messageTable.extendedForwards = false\n        setScrollForwardButtonIcon()\n      } else {\n        await extendForwards() // async\n        latest.messageTable.scrollIntoView(newestFirst)\n      }\n    }\n\n    /// ///////////////////////\n    /*\n    options = options || {}\n    options.authorDateOnLeft = true\n    const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n    const channelObject = new ChatChannel(chatChannel, options)\n    const dateFolder = channelObject.dateFolder\n\n    const div = dom.createElement('div')\n    const statusArea = div.appendChild(dom.createElement('div'))\n    const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n*/\n    const messageTable = dom.createElement('table')\n\n    messageTable.extendBackwards = extendBackwards // Make function available to scroll stuff\n    messageTable.extendForwards = extendForwards // Make function available to scroll stuff\n\n    messageTable.date = date\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    messageTable.chatDocument = chatDocument\n\n    messageTable.fresh = false\n    messageTable.setAttribute('style', 'width: 100%;') // fill that div!\n    if (live) {\n      messageTable.final = true\n      liveMessageTable = messageTable\n      latest.messageTable = messageTable\n      const tr = renderMessageEditor(channelObject, messageTable, userContext, options)\n      if (newestFirst) {\n        messageTable.insertBefore(tr, messageTable.firstChild) // If newestFirst\n      } else {\n        messageTable.appendChild(tr) // not newestFirst\n      }\n      messageTable.inputRow = tr\n    }\n\n    /// ///// Infinite scroll\n    //\n    // @@ listen for swipe past end event not just button\n    if (options.infinite) {\n      const scrollBackbuttonTR = dom.createElement('tr')\n      const scrollBackbuttonCell = scrollBackbuttonTR.appendChild(\n        dom.createElement('td')\n      )\n      // up traingles: noun_1369237.svg\n      // down triangles: noun_1369241.svg\n      const scrollBackIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollBackbutton = widgets.button(\n        dom,\n        icons.iconBase + scrollBackIcon,\n        'Previous messages ...'\n      )\n      scrollBackbuttonCell.style = 'width:3em; height:3em;'\n      scrollBackbutton.addEventListener('click', scrollBackbuttonHandler, false)\n      messageTable.extendedBack = false\n      scrollBackbuttonCell.appendChild(scrollBackbutton)\n      setScrollBackbuttonIcon()\n\n      const dateCell = scrollBackbuttonTR.appendChild(dom.createElement('td'))\n      dateCell.style =\n        'text-align: center; vertical-align: middle; color: #888; font-style: italic;'\n      dateCell.textContent = widgets.shortDate(date.toISOString(), true) // no time, only date\n\n      // @@@@@@@@@@@ todo move this button to other end of  message cell, o\n      const scrollForwardButtonCell = scrollBackbuttonTR.appendChild(\n        dom.createElement('td')\n      )\n      const scrollForwardIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollForwardButton = widgets.button(\n        dom,\n        icons.iconBase + scrollForwardIcon,\n        'Later messages ...'\n      )\n      scrollForwardButtonCell.appendChild(scrollForwardButton)\n      scrollForwardButtonCell.style = 'width:3em; height:3em;'\n      scrollForwardButton.addEventListener(\n        'click',\n        scrollForwardButtonHandler,\n        false\n      )\n      messageTable.extendedForward = false\n      setScrollForwardButtonIcon()\n\n      messageTable.extendedForwards = false\n\n      if (!newestFirst) {\n        // opposite end from the entry field\n        messageTable.insertBefore(scrollBackbuttonTR, messageTable.firstChild) // If not newestFirst\n      } else {\n        messageTable.appendChild(scrollBackbuttonTR) //  newestFirst\n      }\n    }\n\n    const sts = store.statementsMatching(null, ns.wf('message'), null, chatDocument)\n    if (!live && sts.length === 0) {\n      // not todays\n      // no need buttomns at the moment\n      // messageTable.style.visibility = 'collapse' // Hide files with no messages\n    }\n    sts.forEach(st => {\n      addMessage(st.object, messageTable)\n    })\n    messageTable.fresh = true\n\n    // loadMessageTable(messageTable, chatDocument)\n    messageTable.fresh = false\n    return messageTable\n  } // renderMessageTable\n\n  async function addNewChatDocumentIfNewDay () {\n    // @@ Remove listener from previous table as it is now static\n    const newChatDocument = dateFolder.leafDocumentFromDate(new Date())\n    if (!newChatDocument.sameTerm(latest.messageTable.chatDocument)) {\n      // It is a new day\n      if (liveMessageTable.inputRow) {\n        liveMessageTable.removeChild(liveMessageTable.inputRow)\n        delete liveMessageTable.inputRow\n      }\n      const oldChatDocument = latest.messageTable.chatDocument\n      await appendCurrentMessages()\n      // Adding a link in the document will ping listeners to add the new block too\n      if (\n        !store.holds(\n          oldChatDocument,\n          ns.rdfs('seeAlso'),\n          newChatDocument,\n          oldChatDocument\n        )\n      ) {\n        const sts = [\n          $rdf.st(\n            oldChatDocument,\n            ns.rdfs('seeAlso'),\n            newChatDocument,\n            oldChatDocument\n          )\n        ]\n        try {\n          store.updater.update([], sts)\n        } catch (err) {\n          alert('Unable to link old chat file to new one:' + err)\n        }\n      }\n    }\n  }\n\n  /*\n  function messageCount () {\n    var n = 0\n    const tables = div.children\n    for (let i = 0; i < tables.length; i++) {\n      n += tables[i].children.length - 1\n      // debug.log('    table length:' + tables[i].children.length)\n    }\n    return n\n  }\n*/\n\n  /* Add the live message block with entry field for today\n   */\n  async function appendCurrentMessages () {\n    const now = new Date()\n    const chatDocument = dateFolder.leafDocumentFromDate(now)\n\n    /// ///////////////////////////////////////////////////////////\n    const messageTable = await createMessageTable(now, true)\n    div.appendChild(messageTable)\n    div.refresh = async function () {\n      // only the last messageTable is live\n      await addNewChatDocumentIfNewDay(new Date())\n      syncMessages(chatChannel, messageTable) // @@ livemessagetable??\n      desktopNotification(chatChannel)\n    } // The short chat version the live update listening is done in the pane but we do it in the widget @@\n    store.updater.addDownstreamChangeListener(chatDocument, div.refresh) // Live update\n    liveMessageTable = messageTable\n    latest.messageTable = liveMessageTable\n    return messageTable\n  }\n\n  async function loadMoreWhereNeeded (event, fixScroll) {\n    if (lock) return\n    lock = true\n    const freeze = !fixScroll\n    const magicZone = 150\n    // const top = div.scrollTop\n    // const bottom = div.scrollHeight - top - div.clientHeight\n    let done\n\n    while (\n      div.scrollTop < magicZone &&\n      earliest.messageTable &&\n      !earliest.messageTable.initial &&\n      earliest.messageTable.extendBackwards\n    ) {\n      // If this has been called before the element is actually in the\n      // user's DOM tree, then this scrollTop check won't work -> loop forever\n      // https://github.com/solidos/solid-ui/issues/366\n      if (div.scrollHeight === 0) {\n        // console.log('    chat/loadMoreWhereNeeded: trying later...')\n        setTimeout(loadMoreWhereNeeded, 2000) // couple be less\n        lock = false\n        return // abandon now, do later\n      }\n      // console.log('    chat/loadMoreWhereNeeded: Going now')\n      const scrollBottom = div.scrollHeight - div.scrollTop\n      debug.log('infinite scroll: adding above: top ' + div.scrollTop)\n      done = await earliest.messageTable.extendBackwards()\n      if (freeze) {\n        div.scrollTop = div.scrollHeight - scrollBottom\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    while (\n      options.selectedMessage && // we started in the middle not at the bottom\n      div.scrollHeight - div.scrollTop - div.clientHeight < magicZone && // we are scrolled right to the bottom\n      latest.messageTable &&\n      !latest.messageTable.final && // there is more data to come\n      latest.messageTable.extendForwards\n    ) {\n      const scrollTop = div.scrollTop\n      debug.log(\n        'infinite scroll: adding below: bottom: ' +\n        (div.scrollHeight - div.scrollTop - div.clientHeight)\n      )\n      done = await latest.messageTable.extendForwards() // then add more data on the bottom\n      if (freeze) {\n        div.scrollTop = scrollTop // while adding below keep same things in view\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    lock = false\n  }\n\n  async function loadInitialContent () {\n    function yank () {\n      selectedMessageTable.selectedElement.scrollIntoView({ block: 'center' })\n    }\n\n    // During initial load ONLY keep scroll to selected thing or bottom\n    function fixScroll () {\n      if (options.selectedElement) {\n        options.selectedElement.scrollIntoView({ block: 'center' }) // align tops or bottoms\n      } else {\n        if (liveMessageTable.inputRow.scrollIntoView) {\n          liveMessageTable.inputRow.scrollIntoView(newestFirst) // align tops or bottoms\n        }\n      }\n    }\n\n    let live, selectedDocument\n    if (options.selectedMessage) {\n      selectedDocument = options.selectedMessage.doc()\n      const now = new Date()\n      const todayDocument = dateFolder.leafDocumentFromDate(now)\n      live = todayDocument.sameTerm(selectedDocument)\n    }\n    let selectedMessageTable\n    if (options.selectedMessage && !live) {\n      const selectedDate = dateFolder.dateFromLeafDocument(selectedDocument)\n      selectedMessageTable = await createMessageTable(selectedDate, live)\n      div.appendChild(selectedMessageTable)\n      earliest.messageTable = selectedMessageTable\n      latest.messageTable = selectedMessageTable\n      yank()\n      setTimeout(yank, 1000) // @@ kludge - restore position distubed by other cHANGES\n    } else {\n      // Live end\n      await appendCurrentMessages()\n      earliest.messageTable = liveMessageTable\n      latest.messageTable = liveMessageTable\n    }\n\n    await loadMoreWhereNeeded(null, fixScroll)\n    div.addEventListener('scroll', loadMoreWhereNeeded)\n    if (options.solo) {\n      document.body.addEventListener('scroll', loadMoreWhereNeeded)\n    }\n  }\n\n  // Body of main function\n\n  options = options || {}\n  options.authorDateOnLeft = false // @@ make a user optiosn\n  const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n\n  const channelObject = new ChatChannel(chatChannel, options)\n  const dateFolder = channelObject.dateFolder\n\n  const div = dom.createElement('div')\n  channelObject.div = div\n\n  const statusArea = div.appendChild(dom.createElement('div'))\n  const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n  // const messageTable = dom.createElement('table') // @@ check does this go in renderMessageTable\n\n  let liveMessageTable\n  const earliest = { messageTable: null } // Stuff about each end of the loaded days\n  const latest = { messageTable: null }\n\n  let lock = false\n\n  await loadInitialContent()\n  return div\n}\n"],"mappings":"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"}