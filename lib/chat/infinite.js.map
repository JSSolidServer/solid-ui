{"version":3,"sources":["../../src/chat/infinite.js"],"names":["desktopNotification","str","window","debug","warn","Notification","permission","requestPermission","then","insertMessageIntoTable","channelObject","messageTable","message","fresh","options","userContext","messageRow","selectedMessage","sameTerm","style","backgroundColor","selectedElement","done","ele","firstChild","nextSibling","newestFirst","newestfirst","dateString","AJAR_date","insertBefore","appendChild","infiniteMessageArea","dom","wasStore","chatChannel","syncMessages","addMessage","insertPreviousMessages","removePreviousMessages","createMessageTable","renderMessageTable","addNewChatDocumentIfNewDay","appendCurrentMessages","loadMoreWhereNeeded","loadInitialContent","yank","fixScroll","scrollIntoView","block","liveMessageTable","inputRow","selectedMessageTable","selectedDocument","doc","now","Date","todayDocument","dateFolder","leafDocumentFromDate","live","selectedDate","dateFromLeafDocument","div","earliest","latest","setTimeout","addEventListener","solo","document","body","event","lock","freeze","magicZone","scrollTop","initial","extendBackwards","scrollHeight","scrollBottom","log","clientHeight","extendForwards","chatDocument","refresh","store","updater","addDownstreamChangeListener","newChatDocument","removeChild","oldChatDocument","holds","ns","rdfs","sts","$rdf","st","update","err","alert","date","scrollBackbutton","scrollForwardButton","setAttribute","icons","iconBase","disabled","extendedBack","setScrollBackbuttonIcon","sense","scrollBackIcon","getScrollbackIcon","scrollBackbuttonHandler","_event","extendedForwards","setScrollForwardButtonIcon","scrollForwardIcon","getScrollForwardButtonIcon","scrollForwardButtonHandler","createElement","tr","infinite","scrollBackbuttonTR","scrollBackbuttonCell","widgets","button","dateCell","textContent","shortDate","toISOString","scrollForwardButtonCell","extendedForward","statementsMatching","wf","length","forEach","object","fetcher","load","statusTR","response","status","errorMessageBlock","backwards","previousSibling","extr","extremity","loadPrevious","todayDoc","newMessageTable","showDeletedMessages","about","displayed","ele2","AJAR_subject","uri","messages","map","stored","m","refreshTree","authorDateOnLeft","ChatChannel","statusArea"],"mappings":";;;;;;;;;;;;;;;;;AAKA;;AACA;;AACA;;AAEA;;AAGA;;AACA;;AAGA;;AAGA;;;;;;AAnBA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AAE+B;AAC/B;AACA;AAGA;AAEO,SAASA,mBAAT,CAA8BC,GAA9B,EAAmC;AACxC;AACA,MAAI,EAAE,kBAAkBC,MAApB,CAAJ,EAAiC;AAC/BC,IAAAA,KAAK,CAACC,IAAN,CAAW,qDAAX;AACD,GAFD,MAEO,IAAIC,YAAY,CAACC,UAAb,KAA4B,SAAhC,EAA2C;AAChD;AACA;AACA,QAAID,YAAJ,CAAiBJ,GAAjB;AACD,GAJM,MAIA,IAAII,YAAY,CAACC,UAAb,KAA4B,QAAhC,EAA0C;AAC/C;AACAD,IAAAA,YAAY,CAACE,iBAAb,GAAiCC,IAAjC,CAAsC,UAAUF,UAAV,EAAsB;AAC1D;AACA,UAAIA,UAAU,KAAK,SAAnB,EAA8B;AAC5B;AACA,YAAID,YAAJ,CAAiBJ,GAAjB;AACD;AACF,KAND;AAOD,GAjBuC,CAkBxC;AACA;;AACD;AAED;AACA;AACA;;;AACO,SAASQ,sBAAT,CAAiCC,aAAjC,EAAgDC,YAAhD,EAA8DC,OAA9D,EAAuEC,KAAvE,EAA8EC,OAA9E,EAAuFC,WAAvF,EAAoG;AACzG,MAAMC,UAAU,GAAG,+BAAiBN,aAAjB,EACjBE,OADiB,EAEjBC,KAFiB,EAGjBC,OAHiB,EAIjBC,WAJiB,CAAnB,CADyG,CAQzG;;AACA,MAAID,OAAO,CAACG,eAAR,IAA2BH,OAAO,CAACG,eAAR,CAAwBC,QAAxB,CAAiCN,OAAjC,CAA/B,EAA0E;AACxEI,IAAAA,UAAU,CAACG,KAAX,CAAiBC,eAAjB,GAAmC,QAAnC;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0BL,UAA1B;AACAL,IAAAA,YAAY,CAACU,eAAb,GAA+BL,UAA/B;AACD;;AAED,MAAIM,IAAI,GAAG,KAAX;;AACA,OAAK,IAAIC,GAAG,GAAGZ,YAAY,CAACa,UAA5B,GAA0CD,GAAG,GAAGA,GAAG,CAACE,WAApD,EAAiE;AAC/D,QAAI,CAACF,GAAL,EAAU;AACR;AACA;AACD;;AACD,QAAMG,WAAW,GAAGZ,OAAO,CAACa,WAAR,KAAwB,IAA5C;AACA,QAAMC,UAAU,GAAGZ,UAAU,CAACa,SAA9B;;AACA,QACGD,UAAU,GAAGL,GAAG,CAACM,SAAjB,IAA8BH,WAA/B,IACCE,UAAU,GAAGL,GAAG,CAACM,SAAjB,IAA8B,CAACH,WAFlC,EAGE;AACAf,MAAAA,YAAY,CAACmB,YAAb,CAA0Bd,UAA1B,EAAsCO,GAAtC;AACAD,MAAAA,IAAI,GAAG,IAAP;AACA;AACD;AACF;;AACD,MAAI,CAACA,IAAL,EAAW;AACTX,IAAAA,YAAY,CAACoB,WAAb,CAAyBf,UAAzB;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACsBgB,mB;;;;;uGAAf,mBAAoCC,GAApC,EAAyCC,QAAzC,EAAmDC,WAAnD,EAAgErB,OAAhE;AAAA,QAGIsB,YAHJ,EA+CIC,UA/CJ,EAgEUC,sBAhEV,2BAkGIC,sBAlGJ,EAqHUC,kBArHV,uBA0IIC,kBA1IJ,EA4VUC,0BA5VV,+BA+YUC,qBA/YV,0BAkaUC,mBAlaV,wBA0dUC,kBA1dV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kHA0dL;AAAA,oBACWC,IADX,EAMWC,SANX;AAAA;AAAA;AAAA;AAAA;AAMWA,wBAAAA,SANX,yBAMwB;AACpB,8BAAIjC,OAAO,CAACO,eAAZ,EAA6B;AAC3BP,4BAAAA,OAAO,CAACO,eAAR,CAAwB2B,cAAxB,CAAuC;AAAEC,8BAAAA,KAAK,EAAE;AAAT,6BAAvC,EAD2B,CACiC;AAC7D,2BAFD,MAEO;AACL,gCAAIC,gBAAgB,CAACC,QAAjB,CAA0BH,cAA9B,EAA8C;AAC5CE,8BAAAA,gBAAgB,CAACC,QAAjB,CAA0BH,cAA1B,CAAyCtB,WAAzC,EAD4C,CACU;AACvD;AACF;AACF,yBAdH;;AACWoB,wBAAAA,IADX,oBACmB;AACfM,0BAAAA,oBAAoB,CAAC/B,eAArB,CAAqC2B,cAArC,CAAoD;AAAEC,4BAAAA,KAAK,EAAE;AAAT,2BAApD;AACD,yBAHH;;AAiBE,4BAAInC,OAAO,CAACG,eAAZ,EAA6B;AAC3BoC,0BAAAA,gBAAgB,GAAGvC,OAAO,CAACG,eAAR,CAAwBqC,GAAxB,EAAnB;AACMC,0BAAAA,GAFqB,GAEf,IAAIC,IAAJ,EAFe;AAGrBC,0BAAAA,aAHqB,GAGLC,UAAU,CAACC,oBAAX,CAAgCJ,GAAhC,CAHK;AAI3BK,0BAAAA,IAAI,GAAGH,aAAa,CAACvC,QAAd,CAAuBmC,gBAAvB,CAAP;AACD;;AAtBH,8BAwBMvC,OAAO,CAACG,eAAR,IAA2B,CAAC2C,IAxBlC;AAAA;AAAA;AAAA;;AAyBUC,wBAAAA,YAzBV,GAyByBH,UAAU,CAACI,oBAAX,CAAgCT,gBAAhC,CAzBzB;AAAA;AAAA,+BA0BiCb,kBAAkB,CAACqB,YAAD,EAAeD,IAAf,CA1BnD;;AAAA;AA0BIR,wBAAAA,oBA1BJ;AA2BIW,wBAAAA,GAAG,CAAChC,WAAJ,CAAgBqB,oBAAhB;AACAY,wBAAAA,QAAQ,CAACrD,YAAT,GAAwByC,oBAAxB;AACAa,wBAAAA,MAAM,CAACtD,YAAP,GAAsByC,oBAAtB;AACAN,wBAAAA,IAAI;AACJoB,wBAAAA,UAAU,CAACpB,IAAD,EAAO,IAAP,CAAV,CA/BJ,CA+B2B;;AA/B3B;AAAA;;AAAA;AAAA;AAAA,+BAkCUH,qBAAqB,EAlC/B;;AAAA;AAmCIqB,wBAAAA,QAAQ,CAACrD,YAAT,GAAwBuC,gBAAxB;AACAe,wBAAAA,MAAM,CAACtD,YAAP,GAAsBuC,gBAAtB;;AApCJ;AAAA;AAAA,+BAuCQN,mBAAmB,CAAC,IAAD,EAAOG,SAAP,CAvC3B;;AAAA;AAwCEgB,wBAAAA,GAAG,CAACI,gBAAJ,CAAqB,QAArB,EAA+BvB,mBAA/B;;AACA,4BAAI9B,OAAO,CAACsD,IAAZ,EAAkB;AAChBC,0BAAAA,QAAQ,CAACC,IAAT,CAAcH,gBAAd,CAA+B,QAA/B,EAAyCvB,mBAAzC;AACD;;AA3CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA1dK;AAAA;AAAA;;AA0dUC,YAAAA,kBA1dV;AAAA;AAAA;;AAAA;AAAA,mHAkaL,mBAAoC0B,KAApC,EAA2CxB,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACMyB,IADN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEEA,wBAAAA,IAAI,GAAG,IAAP;AACMC,wBAAAA,MAHR,GAGiB,CAAC1B,SAHlB;AAIQ2B,wBAAAA,SAJR,GAIoB,GAJpB,EAKE;AACA;;AANF;AAAA,8BAUIX,GAAG,CAACY,SAAJ,GAAgBD,SAAhB,IACAV,QAAQ,CAACrD,YADT,IAEA,CAACqD,QAAQ,CAACrD,YAAT,CAAsBiE,OAFvB,IAGAZ,QAAQ,CAACrD,YAAT,CAAsBkE,eAb1B;AAAA;AAAA;AAAA;;AAAA,8BAkBQd,GAAG,CAACe,YAAJ,KAAqB,CAlB7B;AAAA;AAAA;AAAA;;AAmBM;AACAZ,wBAAAA,UAAU,CAACtB,mBAAD,EAAsB,IAAtB,CAAV,CApBN,CAoB4C;;AACtC4B,wBAAAA,IAAI,GAAG,KAAP;AArBN;;AAAA;AAwBI;AACMO,wBAAAA,YAzBV,GAyByBhB,GAAG,CAACe,YAAJ,GAAmBf,GAAG,CAACY,SAzBhD;AA0BIxE,wBAAAA,KAAK,CAAC6E,GAAN,CAAU,wCAAwCjB,GAAG,CAACY,SAAtD;AA1BJ;AAAA,+BA2BiBX,QAAQ,CAACrD,YAAT,CAAsBkE,eAAtB,EA3BjB;;AAAA;AA2BIvD,wBAAAA,IA3BJ;;AA4BI,4BAAImD,MAAJ,EAAY;AACVV,0BAAAA,GAAG,CAACY,SAAJ,GAAgBZ,GAAG,CAACe,YAAJ,GAAmBC,YAAnC;AACD;;AACD,4BAAIhC,SAAJ,EAAeA,SAAS;;AA/B5B,6BAgCQzB,IAhCR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,8BAmCIR,OAAO,CAACG,eAAR,IAA2B;AAC3B8C,wBAAAA,GAAG,CAACe,YAAJ,GAAmBf,GAAG,CAACY,SAAvB,GAAmCZ,GAAG,CAACkB,YAAvC,GAAsDP,SADtD,IACmE;AACnET,wBAAAA,MAAM,CAACtD,YAFP,IAGA,CAACsD,MAAM,CAACtD,YAAP,SAHD,IAG8B;AAC9BsD,wBAAAA,MAAM,CAACtD,YAAP,CAAoBuE,cAvCxB;AAAA;AAAA;AAAA;;AAyCUP,wBAAAA,SAzCV,GAyCsBZ,GAAG,CAACY,SAzC1B;AA0CIxE,wBAAAA,KAAK,CAAC6E,GAAN,CACE,6CACCjB,GAAG,CAACe,YAAJ,GAAmBf,GAAG,CAACY,SAAvB,GAAmCZ,GAAG,CAACkB,YADxC,CADF;AA1CJ;AAAA,+BA8CiBhB,MAAM,CAACtD,YAAP,CAAoBuE,cAApB,EA9CjB;;AAAA;AA8CI5D,wBAAAA,IA9CJ;;AA8CsD;AAClD,4BAAImD,MAAJ,EAAY;AACVV,0BAAAA,GAAG,CAACY,SAAJ,GAAgBA,SAAhB,CADU,CACgB;AAC3B;;AACD,4BAAI5B,SAAJ,EAAeA,SAAS;;AAlD5B,6BAmDQzB,IAnDR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAqDEkD,wBAAAA,IAAI,GAAG,KAAP;;AArDF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAlaK;AAAA;AAAA;;AAkaU5B,YAAAA,mBAlaV;AAAA;AAAA;;AAAA;AAAA,qHA+YL;AAAA;AAAA;AAAA;AAAA;AAAA;AACQW,wBAAAA,GADR,GACc,IAAIC,IAAJ,EADd;AAEQ2B,wBAAAA,YAFR,GAEuBzB,UAAU,CAACC,oBAAX,CAAgCJ,GAAhC,CAFvB,EAIE;;AAJF;AAAA,+BAK6Bf,kBAAkB,CAACe,GAAD,EAAM,IAAN,CAL/C;;AAAA;AAKQ5C,wBAAAA,YALR;AAMEoD,wBAAAA,GAAG,CAAChC,WAAJ,CAAgBpB,YAAhB;AACAoD,wBAAAA,GAAG,CAACqB,OAAJ,8FAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAEN1C,0BAA0B,CAAC,IAAIc,IAAJ,EAAD,CAFpB;;AAAA;AAGZpB,kCAAAA,YAAY,CAACD,WAAD,EAAcxB,YAAd,CAAZ,CAHY,CAG4B;;AACxCX,kCAAAA,mBAAmB,CAACmC,WAAD,CAAnB;;AAJY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAd,GAPF,CAYI;;AACFkD,qCAAMC,OAAN,CAAcC,2BAAd,CAA0CJ,YAA1C,EAAwDpB,GAAG,CAACqB,OAA5D,EAbF,CAauE;;;AACrElC,wBAAAA,gBAAgB,GAAGvC,YAAnB;AACAsD,wBAAAA,MAAM,CAACtD,YAAP,GAAsBuC,gBAAtB;AAfF,0DAgBSvC,YAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA/YK;AAAA;AAAA;;AA+YUgC,YAAAA,qBA/YV;AAAA;AAAA;;AAAA;AAAA,0HA4VL;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AACM6C,wBAAAA,eAFR,GAE0B9B,UAAU,CAACC,oBAAX,CAAgC,IAAIH,IAAJ,EAAhC,CAF1B;;AAAA,4BAGOgC,eAAe,CAACtE,QAAhB,CAAyB+C,MAAM,CAACtD,YAAP,CAAoBwE,YAA7C,CAHP;AAAA;AAAA;AAAA;;AAII;AACA,4BAAIjC,gBAAgB,CAACC,QAArB,EAA+B;AAC7BD,0BAAAA,gBAAgB,CAACuC,WAAjB,CAA6BvC,gBAAgB,CAACC,QAA9C;AACA,iCAAOD,gBAAgB,CAACC,QAAxB;AACD;;AACKuC,wBAAAA,eATV,GAS4BzB,MAAM,CAACtD,YAAP,CAAoBwE,YAThD;AAAA;AAAA,+BAUUxC,qBAAqB,EAV/B;;AAAA;AAWI;AACA,4BACE,CAAC0C,aAAMM,KAAN,CACCD,eADD,EAECE,EAAE,CAACC,IAAH,CAAQ,SAAR,CAFD,EAGCL,eAHD,EAICE,eAJD,CADH,EAOE;AACMI,0BAAAA,GADN,GACY,CACVC,IAAI,CAACC,EAAL,CACEN,eADF,EAEEE,EAAE,CAACC,IAAH,CAAQ,SAAR,CAFF,EAGEL,eAHF,EAIEE,eAJF,CADU,CADZ;;AASA,8BAAI;AACFL,yCAAMC,OAAN,CAAcW,MAAd,CAAqB,EAArB,EAAyBH,GAAzB;AACD,2BAFD,CAEE,OAAOI,GAAP,EAAY;AACZC,4BAAAA,KAAK,CAAC,6CAA6CD,GAA9C,CAAL;AACD;AACF;;AAjCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA5VK;AAAA;AAAA;;AA4VUxD,YAAAA,0BA5VV;AAAA;AAAA;;AA0IID,YAAAA,kBA1IJ,gCA0IwB2D,IA1IxB,EA0I8BxC,IA1I9B,EA0IoC;AACvC,kBAAIyC,gBAAJ;AACA,kBAAIC,mBAAJ,CAFuC,CAIvC;;AAJuC,uBAMxBzB,eANwB;AAAA;AAAA;;AAAA;AAAA,iHAMvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACqBvC,sBAAsB,CAAC,IAAD,CAD3C;;AAAA;AACQhB,0BAAAA,IADR;;AAEE,8BAAIA,IAAJ,EAAU;AACR,gCAAI+E,gBAAJ,EAAsB;AACpBA,8BAAAA,gBAAgB,CAAC7E,UAAjB,CAA4B+E,YAA5B,CACE,KADF,EAEEC,gBAAMC,QAAN,GAAiB,iCAFnB,EADoB,CAIlB;;AACFJ,8BAAAA,gBAAgB,CAACK,QAAjB,GAA4B,IAA5B;AACD;;AACD/F,4BAAAA,YAAY,CAACiE,OAAb,GAAuB,IAAvB;AACD,2BATD,MASO;AACLjE,4BAAAA,YAAY,CAACgG,YAAb,GAA4B,IAA5B;AACD;;AACDC,0BAAAA,uBAAuB;AAdzB,2DAeStF,IAfT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANuC;AAAA;AAAA;;AAwBvC,uBAASsF,uBAAT,GAAoC;AAClC,oBAAI,CAACP,gBAAL,EAAuB;AACrB;AACD;;AACD,oBAAMQ,KAAK,GAAGlG,YAAY,CAACgG,YAAb,GAA4B,CAACjF,WAA7B,GAA2CA,WAAzD;AACA,oBAAMoF,cAAc,GAAGnG,YAAY,CAACiE,OAAb,GACnB,iCADmB,GAEnBmC,iBAAiB,CAACF,KAAD,CAFrB;AAGAR,gBAAAA,gBAAgB,CAAC7E,UAAjB,CAA4B+E,YAA5B,CACE,KADF,EAEEC,gBAAMC,QAAN,GAAiBK,cAFnB;;AAKA,yBAASC,iBAAT,CAA4BF,KAA5B,EAAmC;AACjC,yBAAOA,KAAK,GAAG,kBAAH,GAAwB,kBAApC;AACD;AACF;;AAxCsC,uBA0CxBG,uBA1CwB;AAAA;AAAA,gBAoDvC;;;AApDuC;AAAA,yHA0CvC,kBAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,+BACMtG,YAAY,CAACgG,YADnB;AAAA;AAAA;AAAA;;AAEIpE,0BAAAA,sBAAsB,CAAC,IAAD,EAAO5B,YAAP,CAAtB;AACAA,0BAAAA,YAAY,CAACgG,YAAb,GAA4B,KAA5B;AACAC,0BAAAA,uBAAuB;AAJ3B;AAAA;;AAAA;AAAA;AAAA,iCAMU/B,eAAe,EANzB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA1CuC;AAAA;AAAA;;AAAA,uBAsDxBK,cAtDwB;AAAA;AAAA;;AAAA;AAAA,gHAsDvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACqB5C,sBAAsB,CAAC,KAAD,CAD3C;;AAAA;AACQhB,0BAAAA,IADR;;AAEE,8BAAIA,IAAJ,EAAU;AACRgF,4BAAAA,mBAAmB,CAAC9E,UAApB,CAA+B+E,YAA/B,CACE,KADF,EAEEC,gBAAMC,QAAN,GAAiB,iCAFnB;AAIAH,4BAAAA,mBAAmB,CAACI,QAApB,GAA+B,IAA/B;AACA/F,4BAAAA,YAAY,SAAZ,GAAqB,IAArB;AACD,2BAPD,MAOO;AACLA,4BAAAA,YAAY,CAACuG,gBAAb,GAAgC,IAAhC;AACD;;AACDC,0BAAAA,0BAA0B;AAZ5B,4DAaS7F,IAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAtDuC;AAAA;AAAA;;AAsEvC,uBAAS6F,0BAAT,GAAuC;AACrC,oBAAMN,KAAK,GAAGlG,YAAY,CAACuG,gBAAb,GAAgC,CAACxF,WAAjC,GAA+CA,WAA7D,CADqC,CACoC;;AACzE,oBAAM0F,iBAAiB,GAAGzG,YAAY,SAAZ,GACtB,iCADsB,GAEtB0G,0BAA0B,CAACR,KAAD,CAF9B;AAGAP,gBAAAA,mBAAmB,CAAC9E,UAApB,CAA+B+E,YAA/B,CACE,KADF,EAEEC,gBAAMC,QAAN,GAAiBW,iBAFnB;;AAKA,yBAASC,0BAAT,CAAqCR,KAArC,EAA4C;AAC1C,yBAAO,CAACA,KAAD,GAAS,kBAAT,GAA8B,kBAArC;AACD;AACF;;AAnFsC,uBAqFxBS,0BArFwB;AAAA;AAAA,gBAgGvC;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA1G2C;AAAA,4HAqFvC,kBAA2CL,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,+BACMtG,YAAY,CAACuG,gBADnB;AAAA;AAAA;AAAA;;AAEI3E,0BAAAA,sBAAsB,CAAC,KAAD,EAAQ5B,YAAR,CAAtB;AACAA,0BAAAA,YAAY,CAACuG,gBAAb,GAAgC,KAAhC;AACAC,0BAAAA,0BAA0B;AAJ9B;AAAA;;AAAA;AAAA;AAAA,iCAMUjC,cAAc,EANxB;;AAAA;AAM2B;AACvBjB,0BAAAA,MAAM,CAACtD,YAAP,CAAoBqC,cAApB,CAAmCtB,WAAnC;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBArFuC;AAAA;AAAA;;AA6GvC,kBAAMf,YAAY,GAAGsB,GAAG,CAACsF,aAAJ,CAAkB,OAAlB,CAArB;AAEA5G,cAAAA,YAAY,CAACkE,eAAb,GAA+BA,eAA/B,CA/GuC,CA+GQ;;AAC/ClE,cAAAA,YAAY,CAACuE,cAAb,GAA8BA,cAA9B,CAhHuC,CAgHM;;AAE7CvE,cAAAA,YAAY,CAACyF,IAAb,GAAoBA,IAApB;AACA,kBAAMjB,YAAY,GAAGzB,UAAU,CAACC,oBAAX,CAAgCyC,IAAhC,CAArB;AACAzF,cAAAA,YAAY,CAACwE,YAAb,GAA4BA,YAA5B;AAEAxE,cAAAA,YAAY,CAACE,KAAb,GAAqB,KAArB;AACAF,cAAAA,YAAY,CAAC4F,YAAb,CAA0B,OAA1B,EAAmC,cAAnC,EAvHuC,CAuHY;;AACnD,kBAAI3C,IAAJ,EAAU;AACRjD,gBAAAA,YAAY,SAAZ,GAAqB,IAArB;AACAuC,gBAAAA,gBAAgB,GAAGvC,YAAnB;AACAsD,gBAAAA,MAAM,CAACtD,YAAP,GAAsBA,YAAtB;AACA,oBAAM6G,EAAE,GAAG,kCAAoB9G,aAApB,EAAmCC,YAAnC,EAAiDI,WAAjD,EAA8DD,OAA9D,CAAX;;AACA,oBAAIY,WAAJ,EAAiB;AACff,kBAAAA,YAAY,CAACmB,YAAb,CAA0B0F,EAA1B,EAA8B7G,YAAY,CAACa,UAA3C,EADe,CACwC;AACxD,iBAFD,MAEO;AACLb,kBAAAA,YAAY,CAACoB,WAAb,CAAyByF,EAAzB,EADK,CACwB;AAC9B;;AACD7G,gBAAAA,YAAY,CAACwC,QAAb,GAAwBqE,EAAxB;AACD,eAnIsC,CAqIvC;AACA;AACA;;;AACA,kBAAI1G,OAAO,CAAC2G,QAAZ,EAAsB;AACpB,oBAAMC,kBAAkB,GAAGzF,GAAG,CAACsF,aAAJ,CAAkB,IAAlB,CAA3B;AACA,oBAAMI,oBAAoB,GAAGD,kBAAkB,CAAC3F,WAAnB,CAC3BE,GAAG,CAACsF,aAAJ,CAAkB,IAAlB,CAD2B,CAA7B,CAFoB,CAKpB;AACA;;AACA,oBAAMT,cAAc,GAAGpF,WAAW,GAC9B,kBAD8B,GAE9B,kBAFJ,CAPoB,CASG;;AACvB2E,gBAAAA,gBAAgB,GAAGuB,OAAO,CAACC,MAAR,CACjB5F,GADiB,EAEjBuE,gBAAMC,QAAN,GAAiBK,cAFA,EAGjB,uBAHiB,CAAnB;AAKAa,gBAAAA,oBAAoB,CAACxG,KAArB,GAA6B,wBAA7B;AACAkF,gBAAAA,gBAAgB,CAAClC,gBAAjB,CAAkC,OAAlC,EAA2C6C,uBAA3C,EAAoE,KAApE;AACArG,gBAAAA,YAAY,CAACgG,YAAb,GAA4B,KAA5B;AACAgB,gBAAAA,oBAAoB,CAAC5F,WAArB,CAAiCsE,gBAAjC;AACAO,gBAAAA,uBAAuB;AAEvB,oBAAMkB,QAAQ,GAAGJ,kBAAkB,CAAC3F,WAAnB,CAA+BE,GAAG,CAACsF,aAAJ,CAAkB,IAAlB,CAA/B,CAAjB;AACAO,gBAAAA,QAAQ,CAAC3G,KAAT,GACE,8EADF;AAEA2G,gBAAAA,QAAQ,CAACC,WAAT,GAAuBH,OAAO,CAACI,SAAR,CAAkB5B,IAAI,CAAC6B,WAAL,EAAlB,EAAsC,IAAtC,CAAvB,CAxBoB,CAwB+C;AAEnE;;AACA,oBAAMC,uBAAuB,GAAGR,kBAAkB,CAAC3F,WAAnB,CAC9BE,GAAG,CAACsF,aAAJ,CAAkB,IAAlB,CAD8B,CAAhC;AAGA,oBAAMH,iBAAiB,GAAG1F,WAAW,GACjC,kBADiC,GAEjC,kBAFJ,CA9BoB,CAgCG;;AACvB4E,gBAAAA,mBAAmB,GAAGsB,OAAO,CAACC,MAAR,CACpB5F,GADoB,EAEpBuE,gBAAMC,QAAN,GAAiBW,iBAFG,EAGpB,oBAHoB,CAAtB;AAKAc,gBAAAA,uBAAuB,CAACnG,WAAxB,CAAoCuE,mBAApC;AACA4B,gBAAAA,uBAAuB,CAAC/G,KAAxB,GAAgC,wBAAhC;AACAmF,gBAAAA,mBAAmB,CAACnC,gBAApB,CACE,OADF,EAEEmD,0BAFF,EAGE,KAHF;AAKA3G,gBAAAA,YAAY,CAACwH,eAAb,GAA+B,KAA/B;AACAhB,gBAAAA,0BAA0B;AAE1BxG,gBAAAA,YAAY,CAACuG,gBAAb,GAAgC,KAAhC;;AAEA,oBAAI,CAACxF,WAAL,EAAkB;AAChB;AACAf,kBAAAA,YAAY,CAACmB,YAAb,CAA0B4F,kBAA1B,EAA8C/G,YAAY,CAACa,UAA3D,EAFgB,CAEuD;AACxE,iBAHD,MAGO;AACLb,kBAAAA,YAAY,CAACoB,WAAb,CAAyB2F,kBAAzB,EADK,CACwC;AAC9C;AACF;;AAED,kBAAM5B,GAAG,GAAGT,aAAM+C,kBAAN,CAAyB,IAAzB,EAA+BxC,EAAE,CAACyC,EAAH,CAAM,SAAN,CAA/B,EAAiD,IAAjD,EAAuDlD,YAAvD,CAAZ;;AACA,kBAAI,CAACvB,IAAD,IAASkC,GAAG,CAACwC,MAAJ,KAAe,CAA5B,EAA+B,CAC7B;AACA;AACA;AACD;;AACDxC,cAAAA,GAAG,CAACyC,OAAJ,CAAY,UAAAvC,EAAE,EAAI;AAChB3D,gBAAAA,UAAU,CAAC2D,EAAE,CAACwC,MAAJ,EAAY7H,YAAZ,CAAV;AACD,eAFD;AAGAA,cAAAA,YAAY,CAACE,KAAb,GAAqB,IAArB,CA3MuC,CA6MvC;;AACAF,cAAAA,YAAY,CAACE,KAAb,GAAqB,KAArB;AACA,qBAAOF,YAAP;AACD,aA1VI;;AAAA;AAAA,kHAqHL,kBAAmCyF,IAAnC,EAAyCxC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACEzD,wBAAAA,KAAK,CAAC6E,GAAN,CAAU,gCAAgCoB,IAA1C;AACMjB,wBAAAA,YAFR,GAEuBzB,UAAU,CAACC,oBAAX,CAAgCyC,IAAhC,CAFvB;AAAA;AAAA;AAAA,+BAIUf,aAAMoD,OAAN,CAAcC,IAAd,CAAmBvD,YAAnB,CAJV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMUxE,wBAAAA,YANV,GAMyBsB,GAAG,CAACsF,aAAJ,CAAkB,OAAlB,CANzB;AAOUoB,wBAAAA,QAPV,GAOqBhI,YAAY,CAACoB,WAAb,CAAyBE,GAAG,CAACsF,aAAJ,CAAkB,IAAlB,CAAzB,CAPrB,EAOuE;;AAPvE,8BAQQ,aAAIqB,QAAJ,IAAgB,aAAIA,QAAJ,CAAaC,MAA7B,IAAuC,aAAID,QAAJ,CAAaC,MAAb,KAAwB,GARvE;AAAA;AAAA;AAAA;;AASM1I,wBAAAA,KAAK,CAAC6E,GAAN,CAAU,6BAA6BG,YAAvC;AATN,0DAUa1C,kBAAkB,CAAC2D,IAAD,EAAOxC,IAAP,CAV/B;;AAAA;AAaMzD,wBAAAA,KAAK,CAAC6E,GAAN,CAAU,qCAAqCG,YAA/C;AACAwD,wBAAAA,QAAQ,CAAC5G,WAAT,CAAqB6F,OAAO,CAACkB,iBAAR,CAA0B7G,GAA1B,gBAAoC,MAApC,CAArB;;AAdN;AAAA,0DAgBW0G,QAhBX;;AAAA;AAAA,0DAkBSlG,kBAAkB,CAAC2D,IAAD,EAAOxC,IAAP,CAlB3B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eArHK;AAAA;AAAA;;AAqHUpB,YAAAA,kBArHV;AAAA;AAAA;;AAkGID,YAAAA,sBAlGJ,kCAkG4BwG,SAlG5B,EAkGuCpI,YAlGvC,EAkGqD;AACxD,kBAAIoI,SAAS,GAAGrH,WAAH,GAAiB,CAACA,WAA/B,EAA4C;AAC1C;AACA,uBAAOf,YAAY,CAACc,WAApB,EAAiC;AAC/BsC,kBAAAA,GAAG,CAAC0B,WAAJ,CAAgB9E,YAAY,CAACc,WAA7B;AACD;AACF,eALD,MAKO;AACL;AACA,uBAAOd,YAAY,CAACqI,eAApB,EAAqC;AACnCjF,kBAAAA,GAAG,CAAC0B,WAAJ,CAAgB9E,YAAY,CAACqI,eAA7B;AACD;AACF;;AACD,kBAAMC,IAAI,GAAGF,SAAS,GAAG/E,QAAH,GAAcC,MAApC;AACAgF,cAAAA,IAAI,CAACtI,YAAL,GAAoBA,YAApB;AACD,aAhHI;;AAAA;AAAA,sHAgEL,kBAAuCoI,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQG,wBAAAA,SADR,GACoBH,SAAS,GAAG/E,QAAH,GAAcC,MAD3C;AAEMmC,wBAAAA,IAFN,GAEa8C,SAAS,CAACvI,YAAV,CAAuByF,IAFpC,EAEyC;;AAFzC;AAAA,+BAIe1C,UAAU,CAACyF,YAAX,CAAwB/C,IAAxB,EAA8B2C,SAA9B,CAJf;;AAAA;AAIE3C,wBAAAA,IAJF;AAIwD;AACtDjG,wBAAAA,KAAK,CAAC6E,GAAN,wCAEI+D,SAAS,GAAG,WAAH,GAAiB,UAF9B,4BAGoB3C,IAHpB;;AALF,8BAUM,CAACA,IAAD,IAAS,CAAC2C,SAAV,IAAuB,CAAC7F,gBAV9B;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAWUP,qBAAqB,EAX/B;;AAAA;AAAA,4BAaOyD,IAbP;AAAA;AAAA;AAAA;;AAAA,0DAaoB,IAbpB;;AAAA;AAayB;AACnBxC,wBAAAA,IAdN,GAca,KAdb;;AAeE,4BAAI,CAACmF,SAAL,EAAgB;AACRK,0BAAAA,QADQ,GACG1F,UAAU,CAACC,oBAAX,CAAgC,IAAIH,IAAJ,EAAhC,CADH;AAERF,0BAAAA,GAFQ,GAEFI,UAAU,CAACC,oBAAX,CAAgCyC,IAAhC,CAFE;AAGdxC,0BAAAA,IAAI,GAAGN,GAAG,CAACpC,QAAJ,CAAakI,QAAb,CAAP,CAHc,CAGgB;AAC/B;;AAnBH;AAAA,+BAoBgC5G,kBAAkB,CAAC4D,IAAD,EAAOxC,IAAP,CApBlD;;AAAA;AAoBQyF,wBAAAA,eApBR;AAqBEH,wBAAAA,SAAS,CAACvI,YAAV,GAAyB0I,eAAzB,CArBF,CAqB2C;;AACzC,4BAAIN,SAAS,GAAGrH,WAAH,GAAiB,CAACA,WAA/B,EAA4C;AAC1C;AACAqC,0BAAAA,GAAG,CAAChC,WAAJ,CAAgBsH,eAAhB;AACD,yBAHD,MAGO;AACL;AACAtF,0BAAAA,GAAG,CAACjC,YAAJ,CAAiBuH,eAAjB,EAAkCtF,GAAG,CAACvC,UAAtC;AACD;;AA5BH,0DA6BSoC,IA7BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhEK;AAAA;AAAA;;AAgEUtB,YAAAA,sBAhEV;AAAA;AAAA;;AA+CID,YAAAA,UA/CJ,wBA+CgBzB,OA/ChB,EA+CyBD,YA/CzB,EA+CuC;AAC1C,kBAAMsD,MAAM,GAAG,kCAAkBrD,OAAlB,CAAf,CAD0C,CAE1C;;AACA,kBAAI,0BAAUqD,MAAV,KAAqB,CAACnD,OAAO,CAACwI,mBAAlC,EAAuD;AACrD,uBADqD,CAC9C;AACR;;AACD7I,cAAAA,sBAAsB,CAACC,aAAD,EACpBC,YADoB,EAEpBC,OAFoB,EAGpBD,YAAY,CAACE,KAHO,EAIpBC,OAJoB,EAKpBC,WALoB,CAAtB,CAN0C,CAYxC;AACH,aA5DI;;AAGIqB,YAAAA,YAHJ,0BAGkBmH,KAHlB,EAGyB5I,YAHzB,EAGuC;AAC1C,kBAAM6I,SAAS,GAAG,EAAlB;AACA,kBAAIjI,GAAJ,EAASkI,IAAT;;AACA,mBAAKlI,GAAG,GAAGZ,YAAY,CAACa,UAAxB,EAAoCD,GAApC,EAAyCA,GAAG,GAAGA,GAAG,CAACE,WAAnD,EAAgE;AAC9D,oBAAIF,GAAG,CAACmI,YAAR,EAAsB;AACpBF,kBAAAA,SAAS,CAACjI,GAAG,CAACmI,YAAJ,CAAiBC,GAAlB,CAAT,GAAkC,IAAlC;AACD;AACF;;AAED,kBAAMC,QAAQ,GAAGvE,aACd+C,kBADc,CAEbmB,KAFa,EAGb3D,EAAE,CAACyC,EAAH,CAAM,SAAN,CAHa,EAIb,IAJa,EAKb1H,YAAY,CAACwE,YALA,EAOd0E,GAPc,CAOV,UAAA7D,EAAE,EAAI;AACT,uBAAOA,EAAE,CAACwC,MAAV;AACD,eATc,CAAjB;;AAUA,kBAAMsB,MAAM,GAAG,EAAf;AACAF,cAAAA,QAAQ,CAACrB,OAAT,CAAiB,UAAUwB,CAAV,EAAa;AAC5BD,gBAAAA,MAAM,CAACC,CAAC,CAACJ,GAAH,CAAN,GAAgB,IAAhB;;AACA,oBAAI,CAACH,SAAS,CAACO,CAAC,CAACJ,GAAH,CAAd,EAAuB;AACrBtH,kBAAAA,UAAU,CAAC0H,CAAD,EAAIpJ,YAAJ,CAAV;AACD;AACF,eALD,EApB0C,CA2B1C;;AACA,mBAAKY,GAAG,GAAGZ,YAAY,CAACa,UAAxB,EAAoCD,GAApC,GAA0C;AACxCkI,gBAAAA,IAAI,GAAGlI,GAAG,CAACE,WAAX;;AACA,oBAAIF,GAAG,CAACmI,YAAJ,IAAoB,CAACI,MAAM,CAACvI,GAAG,CAACmI,YAAJ,CAAiBC,GAAlB,CAA/B,EAAuD;AACrDhJ,kBAAAA,YAAY,CAAC8E,WAAb,CAAyBlE,GAAzB;AACD;;AACDA,gBAAAA,GAAG,GAAGkI,IAAN;AACD;;AACD,mBAAKlI,GAAG,GAAGZ,YAAY,CAACa,UAAxB,EAAoCD,GAApC,EAAyCA,GAAG,GAAGA,GAAG,CAACE,WAAnD,EAAgE;AAC9D,oBAAIF,GAAG,CAACmI,YAAR,EAAsB;AACpB;AACA9B,kBAAAA,OAAO,CAACoC,WAAR,CAAoBzI,GAApB,EAFoB,CAEK;AAC1B;AACF;AACF,aA5CI;;AAwgBL;AAEAT,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,YAAAA,OAAO,CAACmJ,gBAAR,GAA2B,KAA3B,CA3gBK,CA2gB4B;;AAC3BvI,YAAAA,WA5gBD,GA4gBeZ,OAAO,CAACY,WAAR,KAAwB,GAAxB,IAA+BZ,OAAO,CAACY,WAAR,KAAwB,IA5gBtE,EA4gB2E;;AAE1EhB,YAAAA,aA9gBD,GA8gBiB,IAAIwJ,sBAAJ,CAAgB/H,WAAhB,EAA6BrB,OAA7B,CA9gBjB;AA+gBC4C,YAAAA,UA/gBD,GA+gBchD,aAAa,CAACgD,UA/gB5B;AAihBCK,YAAAA,GAjhBD,GAihBO9B,GAAG,CAACsF,aAAJ,CAAkB,KAAlB,CAjhBP;AAkhBL7G,YAAAA,aAAa,CAACqD,GAAd,GAAoBA,GAApB;AAEMoG,YAAAA,UAphBD,GAohBcpG,GAAG,CAAChC,WAAJ,CAAgBE,GAAG,CAACsF,aAAJ,CAAkB,KAAlB,CAAhB,CAphBd;AAqhBCxG,YAAAA,WArhBD,GAqhBe;AAAEkB,cAAAA,GAAG,EAAHA,GAAF;AAAOkI,cAAAA,UAAU,EAAVA,UAAP;AAAmBpG,cAAAA,GAAG,EAAEoG;AAAxB,aArhBf,EAqhBoD;AAEzD;;AAGMnG,YAAAA,QA1hBD,GA0hBY;AAAErD,cAAAA,YAAY,EAAE;AAAhB,aA1hBZ,EA0hBmC;;AAClCsD,YAAAA,MA3hBD,GA2hBU;AAAEtD,cAAAA,YAAY,EAAE;AAAhB,aA3hBV;AA6hBD6D,YAAAA,IA7hBC,GA6hBM,KA7hBN;AAAA;AAAA,mBA+hBC3B,kBAAkB,EA/hBnB;;AAAA;AAAA,+CAgiBEkB,GAhiBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * Contains the [[infiniteMessageArea]] class\n * @packageDocumentation\n */\n// import { authn } from '../authn/index'\nimport * as debug from '../debug'\nimport { icons } from '../iconBase'\nimport { store } from '../logic'\n// import { media } from '../media/index'\nimport * as ns from '../ns'\n// import * as pad from '../pad'\n// import { DateFolder } from './dateFolder'\nimport { mostRecentVersion, ChatChannel, isDeleted } from './chatLogic'\nimport { renderMessageEditor, renderMessageRow } from './message'\n// import { findBookmarkDocument } from './bookmarks'\n\nimport * as $rdf from 'rdflib' // pull in first avoid cross-refs\n// import * as style from '../style'\n// import * as utils from '../utils'\nimport * as widgets from '../widgets'\n\n// const UI = { authn, icons, ns, media, pad, $rdf, store, style, utils, widgets }\n\nexport function desktopNotification (str) {\n  // Let's check if the browser supports notifications\n  if (!('Notification' in window)) {\n    debug.warn('This browser does no t support desktop notification')\n  } else if (Notification.permission === 'granted') {\n    // Let's check whether notificatio n permissions have already been granted\n    // eslint-disable-next-line no-new\n    new Notification(str)\n  } else if (Notification.permission !== 'denied') {\n    // Otherwise, we need to ask the user for permission\n    Notification.requestPermission().then(function (permission) {\n      // If the user accepts, let's create a notification\n      if (permission === 'granted') {\n        // eslint-disable-next-line no-new\n        new Notification(str)\n      }\n    })\n  }\n  // At last, if the user has denied notifications, and you\n  // want to be respectful there is no need to bother them any more.\n}\n\n/**\n * Renders a chat message inside a `messageTable`\n */\nexport function insertMessageIntoTable (channelObject, messageTable, message, fresh, options, userContext) {\n  const messageRow = renderMessageRow(channelObject,\n    message,\n    fresh,\n    options,\n    userContext\n  )\n\n  // const message = messageRow.AJAR_subject\n  if (options.selectedMessage && options.selectedMessage.sameTerm(message)) {\n    messageRow.style.backgroundColor = 'yellow'\n    options.selectedElement = messageRow\n    messageTable.selectedElement = messageRow\n  }\n\n  let done = false\n  for (let ele = messageTable.firstChild; ; ele = ele.nextSibling) {\n    if (!ele) {\n      // empty\n      break\n    }\n    const newestFirst = options.newestfirst === true\n    const dateString = messageRow.AJAR_date\n    if (\n      (dateString > ele.AJAR_date && newestFirst) ||\n      (dateString < ele.AJAR_date && !newestFirst)\n    ) {\n      messageTable.insertBefore(messageRow, ele)\n      done = true\n      break\n    }\n  }\n  if (!done) {\n    messageTable.appendChild(messageRow)\n  }\n}\n\n/**\n * Common code for a chat (discussion area of messages about something)\n * This version runs over a series of files for different time periods\n *\n * Parameters for the whole chat like its title are stored on\n * index.ttl#this and the chats messages are stored in YYYY/MM/DD/chat.ttl\n *\n * Use to import store as param 2, now ignores it and uses the UI main store\n *\n * Options include:\n\n - shiftEnterSendsMessage: Use shift/enter to send message, Enter to add newline, instead of the reverse.\n - authorDateOnLeft:  Display the author's anme and date of the message in the left column instead of first above the content\n - selectedMessage: Display one message highlighted with the chat around it\n - solo: By itelf on a webpage, so user scroll anywhere in the web page scan scroll the chat.\n - newestFirst: Arrange the chat messages chronologically newest at the top insted of at the bottom\n - infinite:  Use infinite scroll\n - showDeletedMessages: Show messages which have been delted as \"deleted message\". Otherwise hide them.\n - expandImagesInline: If a URI by itself in a message looks like an image URI, replace it with the image\n - inlineImageHeightEms: The height (in ems) of images expaned from their URIs in the chat.\n\n */\nexport async function infiniteMessageArea (dom, wasStore, chatChannel, options) {\n  // ///////////////////////////////////////////////////////////////////////\n\n  function syncMessages (about, messageTable) {\n    const displayed = {}\n    let ele, ele2\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        displayed[ele.AJAR_subject.uri] = true\n      }\n    }\n\n    const messages = store\n      .statementsMatching(\n        about,\n        ns.wf('message'),\n        null,\n        messageTable.chatDocument\n      )\n      .map(st => {\n        return st.object\n      })\n    const stored = {}\n    messages.forEach(function (m) {\n      stored[m.uri] = true\n      if (!displayed[m.uri]) {\n        addMessage(m, messageTable)\n      }\n    })\n\n    // eslint-disable-next-line space-in-parens\n    for (ele = messageTable.firstChild; ele;) {\n      ele2 = ele.nextSibling\n      if (ele.AJAR_subject && !stored[ele.AJAR_subject.uri]) {\n        messageTable.removeChild(ele)\n      }\n      ele = ele2\n    }\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        // Refresh thumbs up etc\n        widgets.refreshTree(ele) // Things inside may have changed too\n      }\n    }\n  } // syncMessages\n\n  // Called once per original message displayed\n  function addMessage (message, messageTable) {\n    const latest = mostRecentVersion(message)\n    // const content = store.any(latest, ns.sioc('content'))\n    if (isDeleted(latest) && !options.showDeletedMessages) {\n      return // ignore deleted messaged -- @@ could also leave a placeholder\n    }\n    insertMessageIntoTable(channelObject,\n      messageTable,\n      message,\n      messageTable.fresh,\n      options,\n      userContext\n    ) // fresh from elsewhere\n  }\n\n  /* Add a new messageTable at the top/bottom\n   */\n  async function insertPreviousMessages (backwards) {\n    const extremity = backwards ? earliest : latest\n    let date = extremity.messageTable.date // day in mssecs\n\n    date = await dateFolder.loadPrevious(date, backwards) // backwards\n    debug.log(\n      `insertPreviousMessages: from ${\n        backwards ? 'backwards' : 'forwards'\n      } loadPrevious: ${date}`\n    )\n    if (!date && !backwards && !liveMessageTable) {\n      await appendCurrentMessages() // If necessary skip to today and add that\n    }\n    if (!date) return true // done\n    let live = false\n    if (!backwards) {\n      const todayDoc = dateFolder.leafDocumentFromDate(new Date())\n      const doc = dateFolder.leafDocumentFromDate(date)\n      live = doc.sameTerm(todayDoc) // Is this todays?\n    }\n    const newMessageTable = await createMessageTable(date, live)\n    extremity.messageTable = newMessageTable // move pointer to earliest\n    if (backwards ? newestFirst : !newestFirst) {\n      // put on bottom or top\n      div.appendChild(newMessageTable)\n    } else {\n      // put on top as we scroll back\n      div.insertBefore(newMessageTable, div.firstChild)\n    }\n    return live // not done\n  }\n\n  /* Remove message tables earlier than this one\n   */\n  function removePreviousMessages (backwards, messageTable) {\n    if (backwards ? newestFirst : !newestFirst) {\n      // it was put on bottom\n      while (messageTable.nextSibling) {\n        div.removeChild(messageTable.nextSibling)\n      }\n    } else {\n      // it was put on top as we scroll back\n      while (messageTable.previousSibling) {\n        div.removeChild(messageTable.previousSibling)\n      }\n    }\n    const extr = backwards ? earliest : latest\n    extr.messageTable = messageTable\n  }\n\n  /* Load and render message table\n   ** @returns DOM element generates\n   */\n  async function createMessageTable (date, live) {\n    debug.log('   createMessageTable for  ' + date)\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    try {\n      await store.fetcher.load(chatDocument)\n    } catch (err) {\n      const messageTable = dom.createElement('table')\n      const statusTR = messageTable.appendChild(dom.createElement('tr')) // ### find status in exception\n      if (err.response && err.response.status && err.response.status === 404) {\n        debug.log('Error 404 for chat file ' + chatDocument)\n        return renderMessageTable(date, live) // no mssage file is fine.. will be craeted later\n        // statusTR.appendChild(widgets.errorMessageBlock(dom, 'no message file', 'white'))\n      } else {\n        debug.log('*** Error NON 404 for chat file ' + chatDocument)\n        statusTR.appendChild(widgets.errorMessageBlock(dom, err, 'pink'))\n      }\n      return statusTR\n    }\n    return renderMessageTable(date, live)\n  }\n\n  function renderMessageTable (date, live) {\n    let scrollBackbutton\n    let scrollForwardButton\n\n    /// /////////////////   Scroll down adding more above\n\n    async function extendBackwards () {\n      const done = await insertPreviousMessages(true)\n      if (done) {\n        if (scrollBackbutton) {\n          scrollBackbutton.firstChild.setAttribute(\n            'src',\n            icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n          ) // T\n          scrollBackbutton.disabled = true\n        }\n        messageTable.initial = true\n      } else {\n        messageTable.extendedBack = true\n      }\n      setScrollBackbuttonIcon()\n      return done\n    }\n\n    function setScrollBackbuttonIcon () {\n      if (!scrollBackbutton) {\n        return\n      }\n      const sense = messageTable.extendedBack ? !newestFirst : newestFirst\n      const scrollBackIcon = messageTable.initial\n        ? 'noun_T-Block_1114655_000000.svg'\n        : getScrollbackIcon(sense)\n      scrollBackbutton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollBackIcon\n      )\n\n      function getScrollbackIcon (sense) {\n        return sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    async function scrollBackbuttonHandler (_event) {\n      if (messageTable.extendedBack) {\n        removePreviousMessages(true, messageTable)\n        messageTable.extendedBack = false\n        setScrollBackbuttonIcon()\n      } else {\n        await extendBackwards()\n      }\n    }\n\n    /// ////////////// Scroll up adding more below\n\n    async function extendForwards () {\n      const done = await insertPreviousMessages(false)\n      if (done) {\n        scrollForwardButton.firstChild.setAttribute(\n          'src',\n          icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n        )\n        scrollForwardButton.disabled = true\n        messageTable.final = true\n      } else {\n        messageTable.extendedForwards = true\n      }\n      setScrollForwardButtonIcon()\n      return done\n    }\n\n    function setScrollForwardButtonIcon () {\n      const sense = messageTable.extendedForwards ? !newestFirst : newestFirst // noun_T-Block_1114657_000000.svg\n      const scrollForwardIcon = messageTable.final\n        ? 'noun_T-Block_1114657_000000.svg'\n        : getScrollForwardButtonIcon(sense)\n      scrollForwardButton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollForwardIcon\n      )\n\n      function getScrollForwardButtonIcon (sense) {\n        return !sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    async function scrollForwardButtonHandler (_event) {\n      if (messageTable.extendedForwards) {\n        removePreviousMessages(false, messageTable)\n        messageTable.extendedForwards = false\n        setScrollForwardButtonIcon()\n      } else {\n        await extendForwards() // async\n        latest.messageTable.scrollIntoView(newestFirst)\n      }\n    }\n\n    /// ///////////////////////\n    /*\n    options = options || {}\n    options.authorDateOnLeft = true\n    const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n    const channelObject = new ChatChannel(chatChannel, options)\n    const dateFolder = channelObject.dateFolder\n\n    const div = dom.createElement('div')\n    const statusArea = div.appendChild(dom.createElement('div'))\n    const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n*/\n    const messageTable = dom.createElement('table')\n\n    messageTable.extendBackwards = extendBackwards // Make function available to scroll stuff\n    messageTable.extendForwards = extendForwards // Make function available to scroll stuff\n\n    messageTable.date = date\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    messageTable.chatDocument = chatDocument\n\n    messageTable.fresh = false\n    messageTable.setAttribute('style', 'width: 100%;') // fill that div!\n    if (live) {\n      messageTable.final = true\n      liveMessageTable = messageTable\n      latest.messageTable = messageTable\n      const tr = renderMessageEditor(channelObject, messageTable, userContext, options)\n      if (newestFirst) {\n        messageTable.insertBefore(tr, messageTable.firstChild) // If newestFirst\n      } else {\n        messageTable.appendChild(tr) // not newestFirst\n      }\n      messageTable.inputRow = tr\n    }\n\n    /// ///// Infinite scroll\n    //\n    // @@ listen for swipe past end event not just button\n    if (options.infinite) {\n      const scrollBackbuttonTR = dom.createElement('tr')\n      const scrollBackbuttonCell = scrollBackbuttonTR.appendChild(\n        dom.createElement('td')\n      )\n      // up traingles: noun_1369237.svg\n      // down triangles: noun_1369241.svg\n      const scrollBackIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollBackbutton = widgets.button(\n        dom,\n        icons.iconBase + scrollBackIcon,\n        'Previous messages ...'\n      )\n      scrollBackbuttonCell.style = 'width:3em; height:3em;'\n      scrollBackbutton.addEventListener('click', scrollBackbuttonHandler, false)\n      messageTable.extendedBack = false\n      scrollBackbuttonCell.appendChild(scrollBackbutton)\n      setScrollBackbuttonIcon()\n\n      const dateCell = scrollBackbuttonTR.appendChild(dom.createElement('td'))\n      dateCell.style =\n        'text-align: center; vertical-align: middle; color: #888; font-style: italic;'\n      dateCell.textContent = widgets.shortDate(date.toISOString(), true) // no time, only date\n\n      // @@@@@@@@@@@ todo move this button to other end of  message cell, o\n      const scrollForwardButtonCell = scrollBackbuttonTR.appendChild(\n        dom.createElement('td')\n      )\n      const scrollForwardIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollForwardButton = widgets.button(\n        dom,\n        icons.iconBase + scrollForwardIcon,\n        'Later messages ...'\n      )\n      scrollForwardButtonCell.appendChild(scrollForwardButton)\n      scrollForwardButtonCell.style = 'width:3em; height:3em;'\n      scrollForwardButton.addEventListener(\n        'click',\n        scrollForwardButtonHandler,\n        false\n      )\n      messageTable.extendedForward = false\n      setScrollForwardButtonIcon()\n\n      messageTable.extendedForwards = false\n\n      if (!newestFirst) {\n        // opposite end from the entry field\n        messageTable.insertBefore(scrollBackbuttonTR, messageTable.firstChild) // If not newestFirst\n      } else {\n        messageTable.appendChild(scrollBackbuttonTR) //  newestFirst\n      }\n    }\n\n    const sts = store.statementsMatching(null, ns.wf('message'), null, chatDocument)\n    if (!live && sts.length === 0) {\n      // not todays\n      // no need buttomns at the moment\n      // messageTable.style.visibility = 'collapse' // Hide files with no messages\n    }\n    sts.forEach(st => {\n      addMessage(st.object, messageTable)\n    })\n    messageTable.fresh = true\n\n    // loadMessageTable(messageTable, chatDocument)\n    messageTable.fresh = false\n    return messageTable\n  } // renderMessageTable\n\n  async function addNewChatDocumentIfNewDay () {\n    // @@ Remove listener from previous table as it is now static\n    const newChatDocument = dateFolder.leafDocumentFromDate(new Date())\n    if (!newChatDocument.sameTerm(latest.messageTable.chatDocument)) {\n      // It is a new day\n      if (liveMessageTable.inputRow) {\n        liveMessageTable.removeChild(liveMessageTable.inputRow)\n        delete liveMessageTable.inputRow\n      }\n      const oldChatDocument = latest.messageTable.chatDocument\n      await appendCurrentMessages()\n      // Adding a link in the document will ping listeners to add the new block too\n      if (\n        !store.holds(\n          oldChatDocument,\n          ns.rdfs('seeAlso'),\n          newChatDocument,\n          oldChatDocument\n        )\n      ) {\n        const sts = [\n          $rdf.st(\n            oldChatDocument,\n            ns.rdfs('seeAlso'),\n            newChatDocument,\n            oldChatDocument\n          )\n        ]\n        try {\n          store.updater.update([], sts)\n        } catch (err) {\n          alert('Unable to link old chat file to new one:' + err)\n        }\n      }\n    }\n  }\n\n  /*\n  function messageCount () {\n    var n = 0\n    const tables = div.children\n    for (let i = 0; i < tables.length; i++) {\n      n += tables[i].children.length - 1\n      // debug.log('    table length:' + tables[i].children.length)\n    }\n    return n\n  }\n*/\n\n  /* Add the live message block with entry field for today\n   */\n  async function appendCurrentMessages () {\n    const now = new Date()\n    const chatDocument = dateFolder.leafDocumentFromDate(now)\n\n    /// ///////////////////////////////////////////////////////////\n    const messageTable = await createMessageTable(now, true)\n    div.appendChild(messageTable)\n    div.refresh = async function () {\n      // only the last messageTable is live\n      await addNewChatDocumentIfNewDay(new Date())\n      syncMessages(chatChannel, messageTable) // @@ livemessagetable??\n      desktopNotification(chatChannel)\n    } // The short chat version the live update listening is done in the pane but we do it in the widget @@\n    store.updater.addDownstreamChangeListener(chatDocument, div.refresh) // Live update\n    liveMessageTable = messageTable\n    latest.messageTable = liveMessageTable\n    return messageTable\n  }\n\n  async function loadMoreWhereNeeded (event, fixScroll) {\n    if (lock) return\n    lock = true\n    const freeze = !fixScroll\n    const magicZone = 150\n    // const top = div.scrollTop\n    // const bottom = div.scrollHeight - top - div.clientHeight\n    let done\n\n    while (\n      div.scrollTop < magicZone &&\n      earliest.messageTable &&\n      !earliest.messageTable.initial &&\n      earliest.messageTable.extendBackwards\n    ) {\n      // If this has been called before the element is actually in the\n      // user's DOM tree, then this scrollTop check won't work -> loop forever\n      // https://github.com/solid/solid-ui/issues/366\n      if (div.scrollHeight === 0) {\n        // console.log('    chat/loadMoreWhereNeeded: trying later...')\n        setTimeout(loadMoreWhereNeeded, 2000) // couple be less\n        lock = false\n        return // abandon now, do later\n      }\n      // console.log('    chat/loadMoreWhereNeeded: Going now')\n      const scrollBottom = div.scrollHeight - div.scrollTop\n      debug.log('infinite scroll: adding above: top ' + div.scrollTop)\n      done = await earliest.messageTable.extendBackwards()\n      if (freeze) {\n        div.scrollTop = div.scrollHeight - scrollBottom\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    while (\n      options.selectedMessage && // we started in the middle not at the bottom\n      div.scrollHeight - div.scrollTop - div.clientHeight < magicZone && // we are scrolled right to the bottom\n      latest.messageTable &&\n      !latest.messageTable.final && // there is more data to come\n      latest.messageTable.extendForwards\n    ) {\n      const scrollTop = div.scrollTop\n      debug.log(\n        'infinite scroll: adding below: bottom: ' +\n        (div.scrollHeight - div.scrollTop - div.clientHeight)\n      )\n      done = await latest.messageTable.extendForwards() // then add more data on the bottom\n      if (freeze) {\n        div.scrollTop = scrollTop // while adding below keep same things in view\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    lock = false\n  }\n\n  async function loadInitialContent () {\n    function yank () {\n      selectedMessageTable.selectedElement.scrollIntoView({ block: 'center' })\n    }\n\n    // During initial load ONLY keep scroll to selected thing or bottom\n    function fixScroll () {\n      if (options.selectedElement) {\n        options.selectedElement.scrollIntoView({ block: 'center' }) // align tops or bottoms\n      } else {\n        if (liveMessageTable.inputRow.scrollIntoView) {\n          liveMessageTable.inputRow.scrollIntoView(newestFirst) // align tops or bottoms\n        }\n      }\n    }\n\n    let live, selectedDocument\n    if (options.selectedMessage) {\n      selectedDocument = options.selectedMessage.doc()\n      const now = new Date()\n      const todayDocument = dateFolder.leafDocumentFromDate(now)\n      live = todayDocument.sameTerm(selectedDocument)\n    }\n    let selectedMessageTable\n    if (options.selectedMessage && !live) {\n      const selectedDate = dateFolder.dateFromLeafDocument(selectedDocument)\n      selectedMessageTable = await createMessageTable(selectedDate, live)\n      div.appendChild(selectedMessageTable)\n      earliest.messageTable = selectedMessageTable\n      latest.messageTable = selectedMessageTable\n      yank()\n      setTimeout(yank, 1000) // @@ kludge - restore position distubed by other cHANGES\n    } else {\n      // Live end\n      await appendCurrentMessages()\n      earliest.messageTable = liveMessageTable\n      latest.messageTable = liveMessageTable\n    }\n\n    await loadMoreWhereNeeded(null, fixScroll)\n    div.addEventListener('scroll', loadMoreWhereNeeded)\n    if (options.solo) {\n      document.body.addEventListener('scroll', loadMoreWhereNeeded)\n    }\n  }\n\n  // Body of main function\n\n  options = options || {}\n  options.authorDateOnLeft = false // @@ make a user optiosn\n  const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n\n  const channelObject = new ChatChannel(chatChannel, options)\n  const dateFolder = channelObject.dateFolder\n\n  const div = dom.createElement('div')\n  channelObject.div = div\n\n  const statusArea = div.appendChild(dom.createElement('div'))\n  const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n  // const messageTable = dom.createElement('table') // @@ check does this go in renderMessageTable\n\n  let liveMessageTable\n  const earliest = { messageTable: null } // Stuff about each end of the loaded days\n  const latest = { messageTable: null }\n\n  let lock = false\n\n  await loadInitialContent()\n  return div\n}\n"],"file":"infinite.js"}